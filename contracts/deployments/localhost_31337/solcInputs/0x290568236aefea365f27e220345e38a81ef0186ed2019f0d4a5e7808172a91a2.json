{
  "language": "Solidity",
  "sources": {
    "contracts/governance/Governable.sol": {
      "content": "pragma solidity ^0.5.0;\n\n/**\n * @title   Governable\n */\ncontract Governable {\n\n    event GovernorshipTransferred(address indexed previousGovernor, address indexed newGovernor);\n\n    address private _governor;\n\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial Governor.\n     */\n    constructor () internal {\n        _governor = msg.sender;\n        emit GovernorshipTransferred(address(0), _governor);\n    }\n\n    /**\n     * @dev Returns the address of the current Governor.\n     */\n    function governor() public view returns (address) {\n        return _governor;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the Governor.\n     */\n    modifier onlyGovernor() {\n        require(isGovernor(), \"Caller is not the Governor\");\n        _;\n    }\n\n    /**\n     * @dev Returns true if the caller is the current Governor.\n     */\n    function isGovernor() public view returns (bool) {\n        return msg.sender == _governor;\n    }\n\n    /**\n     * @dev Transfers Governance of the contract to a new account (`newGovernor`).\n     * Can only be called by the current Governor.\n     * @param _newGovernor Address of the new Governor\n     */\n    function changeGovernor(address _newGovernor) external onlyGovernor {\n        _changeGovernor(_newGovernor);\n    }\n\n    /**\n     * @dev Change Governance of the contract to a new account (`newGovernor`).\n     * @param _newGovernor Address of the new Governor\n     */\n    function _changeGovernor(address _newGovernor) internal {\n        require(_newGovernor != address(0), \"GOV: new Governor is address(0)\");\n        emit GovernorshipTransferred(_governor, _newGovernor);\n        _governor = _newGovernor;\n    }\n}\n"
    },
    "contracts/interfaces/IKernel.sol": {
      "content": "pragma solidity 0.5.16;\n\n/**\n  * @title IKernel\n  * @dev Basic interface for interacting with the Kernel\n  */\ninterface IKernel {\n    function governor() external view returns (address);\n    function getModule(bytes32 key) external view returns (address);\n\n    function proposeModule(bytes32 _key, address _addr) external;\n    function cancelProposedModule(bytes32 _key) external;\n    function acceptProposedModule(bytes32 _key) external;\n    function acceptProposedModules(bytes32[] calldata _keys) external;\n}\n"
    },
    "contracts/kernel/Kernel.sol": {
      "content": "pragma solidity 0.5.16;\n\nimport { IKernel } from \"../interfaces/IKernel.sol\";\nimport { Governable } from \"../governance/Governable.sol\";\n\ncontract Kernel is IKernel, Governable {\n\n    event ModuleProposed(bytes32 indexed key, address addr, uint256 timestamp);\n    event ModuleAdded(bytes32 indexed key, address addr);\n    event ModuleCancelled(bytes32 indexed key);\n\n    /** @dev Struct to store information about current modules */\n    struct Module {\n        address addr;       // Module address\n    }\n\n    /** @dev Struct to store information about proposed modules */\n    struct Proposal {\n        address newAddress; // Proposed Module address\n        uint256 timestamp;  // Timestamp when module upgrade was proposed\n    }\n\n    // Module-key => Module\n    mapping(bytes32 => Module) public modules;\n    // Module-address => Module-key\n    mapping(address => bytes32) private addressToModule;\n    // Module-key => Proposal\n    mapping(bytes32 => Proposal) public proposedModules;\n\n    // Init flag to allow add modules at the time of deplyment without delay\n    bool public initialized = false;\n\n    /**\n     * @dev Modifier allows functions calls only when contract is not initialized.\n     */\n    modifier whenNotInitialized() {\n        require(!initialized, \"Kernel is already initialized\");\n        _;\n    }\n\n    /**\n     * @dev Adds multiple new modules to the system to initialize the\n     *      Kernel contract with default modules. This should be called first\n     *      after deploying Kernel contract.\n     * @param _keys         Keys of the new modules in bytes32 form\n     * @param _addresses    Contract addresses of the new modules\n     * @return bool         Success of publishing new Modules\n     */\n    function initialize(\n        bytes32[] calldata _keys,\n        address[] calldata _addresses,\n        address _governorAddr\n    )\n        external\n        onlyGovernor\n        whenNotInitialized\n        returns (bool)\n    {\n        uint256 len = _keys.length;\n        require(len > 0, \"No keys provided\");\n        require(len == _addresses.length, \"Insufficient address data\");\n\n        for(uint256 i = 0 ; i < len; i++) {\n            _publishModule(_keys[i], _addresses[i]);\n        }\n\n        if(_governorAddr != governor()) _changeGovernor(_governorAddr);\n\n        initialized = true;\n        return true;\n    }\n\n    /**\n     * @dev Propose a new or update existing module\n     * @param _key  Key of the module\n     * @param _addr Address of the module\n     */\n    function proposeModule(bytes32 _key, address _addr)\n        external\n        onlyGovernor\n    {\n        require(_key != bytes32(0x0), \"Key must not be zero\");\n        require(_addr != address(0), \"Module address must not be 0\");\n        require(modules[_key].addr != _addr, \"Module already has same address\");\n        Proposal storage p = proposedModules[_key];\n        require(p.timestamp == 0, \"Module already proposed\");\n\n        p.newAddress = _addr;\n        p.timestamp = now;\n        emit ModuleProposed(_key, _addr, now);\n    }\n\n    /**\n     * @dev Cancel a proposed module request\n     * @param _key Key of the module\n     */\n    function cancelProposedModule(bytes32 _key)\n        external\n        onlyGovernor\n    {\n        uint256 timestamp = proposedModules[_key].timestamp;\n        require(timestamp > 0, \"Proposed module not found\");\n\n        delete proposedModules[_key];\n        emit ModuleCancelled(_key);\n    }\n\n    /**\n     * @dev Accept and publish an already proposed module\n     * @param _key Key of the module\n     */\n    function acceptProposedModule(bytes32 _key)\n        external\n        onlyGovernor\n    {\n        _acceptProposedModule(_key);\n    }\n\n    /**\n     * @dev Accept and publish already proposed modules\n     * @param _keys Keys array of the modules\n     */\n    function acceptProposedModules(bytes32[] calldata _keys)\n        external\n        onlyGovernor\n    {\n        uint256 len = _keys.length;\n        require(len > 0, \"Keys array empty\");\n\n        for(uint256 i = 0 ; i < len; i++) {\n            _acceptProposedModule(_keys[i]);\n        }\n    }\n\n    /**\n     * @dev Accept a proposed module\n     * @param _key Key of the module\n     */\n    function _acceptProposedModule(bytes32 _key) internal {\n        Proposal memory p = proposedModules[_key];\n\n        delete proposedModules[_key];\n        _publishModule(_key, p.newAddress);\n    }\n\n    /**\n     * @dev Internal func to publish a module to kernel\n     * @param _key      Key of the new module in bytes32 form\n     * @param _addr     Contract address of the new module\n     */\n    function _publishModule(bytes32 _key, address _addr) internal {\n        require(addressToModule[_addr] == bytes32(0x0), \"Modules must have unique address\");\n        // Old no longer points to a moduleAddress\n        address oldModuleAddr = modules[_key].addr;\n        if(oldModuleAddr != address(0x0)) {\n            addressToModule[oldModuleAddr] = bytes32(0x0);\n        }\n        modules[_key].addr = _addr;\n        addressToModule[_addr] = _key;\n        emit ModuleAdded(_key, _addr);\n    }\n\n    /**\n     * @dev Checks if a module exists\n     * @param _key  Key of the module\n     * @return      Returns 'true' when a module exists, otherwise 'false'\n     */\n    function moduleExists(bytes32 _key) public view returns (bool) {\n        if(_key != 0 && modules[_key].addr != address(0))\n            return true;\n        return false;\n    }\n\n    /**\n     * @dev Get the module address\n     * @param _key  Key of the module\n     * @return      Return the address of the module\n     */\n    function getModule(bytes32 _key) external view returns (address addr) {\n        addr = modules[_key].addr;\n    }\n}\n"
    },
    "contracts/mocks/MintableERC20.sol": {
      "content": "pragma solidity ^0.5.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\n/**\n * @title ERC20Mintable\n * @dev ERC20 minting logic\n */\ncontract MintableERC20 is ERC20 {\n    /**\n     * @dev Function to mint tokens\n     * @param value The amount of tokens to mint.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function mint(uint256 value) public returns (bool) {\n        _mint(msg.sender, value);\n        return true;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "pragma solidity ^0.5.0;\n\nimport \"../../GSN/Context.sol\";\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20Mintable}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20};\n     *\n     * Requirements:\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for `sender`'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n     *\n     * This is internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\n     * from the caller's allowance.\n     *\n     * See {_burn} and {_approve}.\n     */\n    function _burnFrom(address account, uint256 amount) internal {\n        _burn(account, amount);\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\n    }\n}\n"
    },
    "@openzeppelin/contracts/GSN/Context.sol": {
      "content": "pragma solidity ^0.5.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\ncontract Context {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n    constructor () internal { }\n    // solhint-disable-previous-line no-empty-blocks\n\n    function _msgSender() internal view returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "pragma solidity ^0.5.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n * the optional functions; to access them see {ERC20Detailed}.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "pragma solidity ^0.5.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     *\n     * _Available since v2.4.0._\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "contracts/mocks/MockDAI.sol": {
      "content": "pragma solidity ^0.5.0;\n\nimport \"./MintableERC20.sol\";\n\n\ncontract MockDAI is MintableERC20 {\n    uint256 public decimals = 18;\n    string public symbol = \"DAI\";\n    string public name = \"DAI\";\n}\n"
    },
    "contracts/mocks/MockTUSD.sol": {
      "content": "pragma solidity ^0.5.0;\n\nimport \"./MintableERC20.sol\";\n\ncontract MockTUSD is MintableERC20 {\n    uint256 public decimals = 18;\n    string public symbol = \"TUSD\";\n    string public name = \"TrueUSD\";\n}\n"
    },
    "contracts/mocks/MockUSDC.sol": {
      "content": "pragma solidity ^0.5.0;\n\nimport \"./MintableERC20.sol\";\n\ncontract MockUSDC is MintableERC20 {\n    uint256 public decimals = 6;\n    string public symbol = \"USDC\";\n    string public name = \"USD Coin\";\n}\n"
    },
    "contracts/mocks/MockUSDT.sol": {
      "content": "pragma solidity ^0.5.0;\n\nimport \"./MintableERC20.sol\";\n\ncontract MockUSDT is MintableERC20 {\n    uint256 public decimals = 6;\n    string public symbol = \"USDT\";\n    string public name = \"USDT Coin\";\n}\n"
    },
    "contracts/token/OUSD.sol": {
      "content": "pragma solidity ^0.5.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20Detailed.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\n\nimport \"../utils/Access.sol\";\n\ncontract OUSD is ERC20, ERC20Detailed, Access {\n\n    using SafeMath for uint256;\n    using SafeMath for int256;\n\n    event ExchangeRateUpdated(uint256 totalSupply);\n\n    uint8 private constant DECIMALS = 18;\n    uint256 public constant UINT_MAX_VALUE = uint256(-1);\n    uint256 private constant MAX_SUPPLY = UINT_MAX_VALUE;\n\n    uint256 private _totalSupply;\n    uint256 private _totalCredits;\n    uint256 private _creditsPerToken;\n\n    mapping(address => uint256) private _creditBalances;\n\n    // Allowances denominated in OUSD\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    constructor (address _kernel)\n        public\n        Access(_kernel)\n        ERC20Detailed(\"Origin Dollar\", \"OUSD\", DECIMALS\n    ) {\n        _totalSupply = 0;\n        _totalCredits = 0;\n        _creditsPerToken = 1;\n    }\n\n    /**\n     * @dev Gets the balance of the specified address.\n     * @param account The address to query the balance of.\n     * @return A unit256 representing the amount of base units owned by the\n     *         specified address.\n     */\n    function balanceOf(address account) public view returns (uint256) {\n        return _creditBalances[account].div(_creditsPerToken);\n    }\n\n    /**\n     * @dev Transfer tokens to a specified address.\n     * @param to the address to transfer to.\n     * @param value the amount to be transferred.\n     * @return true on success, false otherwise.\n     */\n    function transfer(address to, uint256 value) public returns (bool) {\n        uint256 creditValue = value.mul(_creditsPerToken);\n        _creditBalances[msg.sender] = _creditBalances[msg.sender].sub(creditValue);\n        _creditBalances[to] = _creditBalances[to].add(creditValue);\n\n        emit Transfer(msg.sender, to, value);\n\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another.\n     * @param from The address you want to send tokens from.\n     * @param to The address you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     */\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _allowances[from][msg.sender] = _allowances[from][msg.sender].sub(value);\n\n        uint256 creditValue = value.mul(_creditsPerToken);\n        _creditBalances[from] = _creditBalances[from].sub(creditValue);\n        _creditBalances[to] = _creditBalances[to].add(creditValue);\n\n        emit Transfer(from, to, value);\n\n        return true;\n    }\n\n    function mint(address account, uint256 amount) external onlyVault {\n        return _mint(account, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal {\n        require(account != address(0), \"Mint to the zero address\");\n\n        _totalSupply = _totalSupply.add(amount);\n\n        uint256 creditAmount = amount.mul(_creditsPerToken);\n        _creditBalances[account] = _creditBalances[account].add(creditAmount);\n        _totalCredits = _totalCredits.add(creditAmount);\n\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal {\n        require(account != address(0), \"Burn from the zero address\");\n\n        _totalSupply = _totalSupply.sub(amount);\n\n        uint256 creditAmount = amount.mul(_creditsPerToken);\n        _creditBalances[account] = _creditBalances[account].sub(creditAmount, \"Burn amount exceeds balance\");\n        _totalCredits = _totalCredits.sub(creditAmount);\n\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Modify the supply without minting new tokens. This uses a change in\n            the exchange rate between \"credits\" and OUSD tokens to change balances.\n     * @param supplyDelta Change in the total supply.\n     * @return A uint256 representing the new total supply.\n     */\n    function increaseSupply(int256 supplyDelta) external onlyVault returns (uint256) {\n        if (supplyDelta == 0) {\n            emit ExchangeRateUpdated(_totalSupply);\n            return _totalSupply;\n        }\n\n        if (supplyDelta < 0) {\n            _totalSupply = _totalSupply.sub(uint256(-supplyDelta));\n        } else {\n            _totalSupply = _totalSupply.add(uint256(supplyDelta));\n        }\n\n        if (_totalSupply > MAX_SUPPLY) {\n            _totalSupply = MAX_SUPPLY;\n        }\n\n        // Applied supplyDelta can differ from specified supplyDelta by < 1\n        _creditsPerToken = _totalCredits.div(_totalSupply);\n\n        emit ExchangeRateUpdated(_totalSupply);\n\n        return _totalSupply;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20Detailed.sol": {
      "content": "pragma solidity ^0.5.0;\n\nimport \"./IERC20.sol\";\n\n/**\n * @dev Optional functions from the ERC20 standard.\n */\ncontract ERC20Detailed is IERC20 {\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\n     * these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = decimals;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n}\n"
    },
    "contracts/utils/Access.sol": {
      "content": "pragma solidity 0.5.16;\n\nimport { InitializableKeys } from \"../utils/InitializableKeys.sol\";\nimport { IKernel } from \"../interfaces/IKernel.sol\";\n\n\ncontract Access is InitializableKeys {\n\n    IKernel public kernel;\n\n    /**\n     * @dev Initialises the Access by setting publisher addresses,\n     *      and reading all available system access information\n     */\n    constructor(address _kernel) internal {\n        require(_kernel != address(0), \"Kernel is zero address\");\n        kernel = IKernel(_kernel);\n    }\n\n    /**\n     * @dev Modifier to allow function calls only from the Governor.\n     */\n    modifier onlyGovernor() {\n        require(msg.sender == _governor(), \"Only governor can execute\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to allow function calls only from the Vault.\n     */\n    modifier onlyVault {\n        require(msg.sender == _vault(), \"Only vault can execute\");\n        _;\n    }\n\n    /**\n     * @dev Returns Governor address from the Kernel\n     * @return Address of Governor Contract\n     */\n    function _governor() internal view returns (address) {\n        return kernel.governor();\n    }\n\n    /**\n     * @dev Return Staking Access address from the Kernel\n     * @return Address of the Staking Access contract\n     */\n    function _vault() internal view returns (address) {\n        return kernel.getModule(KEY_VAULT);\n    }\n\n    /**\n     * @dev Return ProxyAdmin Access address from the Kernel\n     * @return Address of the ProxyAdmin Access contract\n     */\n    function _proxyAdmin() internal view returns (address) {\n        return kernel.getModule(KEY_PROXY_ADMIN);\n    }\n}\n"
    },
    "contracts/utils/InitializableKeys.sol": {
      "content": "pragma solidity ^0.5.0;\n\ncontract InitializableKeys {\n\n    bytes32 internal KEY_GOVERNANCE;\n    bytes32 internal KEY_PROXY_ADMIN;\n    bytes32 internal KEY_VAULT;\n\n    /**\n     * @dev Initialize function for upgradable proxy contracts. This function should be called\n     *      via Proxy to initialize constants in the Proxy contract.\n     */\n    function _initialize() internal {\n        KEY_PROXY_ADMIN = keccak256(\"ProxyAdmin\");\n        KEY_VAULT = keccak256(\"Vault\");\n    }\n}\n"
    },
    "contracts/vault/Vault.sol": {
      "content": "pragma solidity 0.5.16;\n\n/*\n\nThe Vault contract stores assets. On a deposit, OUSD will be minted and sent to\nthe depositor. On a withdrawal, OUSD will be burned and assets will be sent to\nthe withdrawer.\n\nThe Vault accepts deposits of interest form yield bearing strategies which will\nmodify the supply of OUSD.\n\n*/\n\nimport { IERC20 }     from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { SafeERC20 }  from \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\n\nimport { OUSD } from \"../token/OUSD.sol\";\nimport \"../utils/Access.sol\";\n\ncontract Vault is Access {\n\n    using SafeERC20 for IERC20;\n\n    event MarketSupported(address __contractAddress);\n\n    struct Market {\n      uint totalBalance;\n      uint price;\n      bool supported;\n    }\n\n    mapping(address => Market) markets;\n    IERC20 [] allMarkets;\n\n    OUSD oUsd;\n\n    constructor (address oUsdAddress) public {\n        oUsd = OUSD(oUsdAddress);\n    }\n\n    function createMarket(address _contractAddress) external onlyGovernor {\n        require(!markets[_contractAddress].supported, \"Market already created\");\n\n        markets[_contractAddress] = Market({ totalBalance: 0, price: 1, supported: true });\n        allMarkets.push(IERC20(_contractAddress));\n\n        emit MarketSupported(_contractAddress);\n    }\n\n    /**\n     *\n     *\n     */\n    function depositAndMint(address _contractAddress, uint256 _amount) public {\n        require(markets[_contractAddress].supported, \"Market is not supported\");\n        require(_amount > 0, \"Amount must be greater than 0\");\n\n        IERC20 asset = IERC20(_contractAddress);\n        require(\n            asset.transferFrom(msg.sender, address(this), _amount),\n            \"Could not transfer for asset to mint OUSD\"\n        );\n\n        return oUsd.mint(msg.sender, _amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/SafeERC20.sol": {
      "content": "pragma solidity ^0.5.0;\n\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves.\n\n        // A Solidity high level call has three parts:\n        //  1. The target address is checked to verify it contains contract code\n        //  2. The call itself is made, and success asserted\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\n        // solhint-disable-next-line max-line-length\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = address(token).call(data);\n        require(success, \"SafeERC20: low-level call failed\");\n\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "pragma solidity ^0.5.5;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following \n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    /**\n     * @dev Converts an `address` into `address payable`. Note that this is\n     * simply a type cast: the actual underlying value is not changed.\n     *\n     * _Available since v2.4.0._\n     */\n    function toPayable(address account) internal pure returns (address payable) {\n        return address(uint160(account));\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     *\n     * _Available since v2.4.0._\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-call-value\n        (bool success, ) = recipient.call.value(amount)(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n}\n"
    }
  },
  "settings": {
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "id",
          "ast"
        ]
      }
    }
  }
}