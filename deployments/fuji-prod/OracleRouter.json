{
  "address": "0xDad08E923fd1AA9361d96672e87FDE2d7392a732",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd7253e2d405dd67bc5f2323c02659bcc16f8e4ecb7edf3835eeb8c9c8e07e268",
  "receipt": {
    "to": null,
    "from": "0x3cECEAe65A70d7f5b7D579Ba25093A37A47706B3",
    "contractAddress": "0xDad08E923fd1AA9361d96672e87FDE2d7392a732",
    "transactionIndex": 0,
    "gasUsed": "405972",
    "logsBloom": "0x
    "blockHash": "0x083a3042db8c382e59d90326cd8599696169fe462eee7e9cb10a111a8dca3c77",
    "transactionHash": "0xd7253e2d405dd67bc5f2323c02659bcc16f8e4ecb7edf3835eeb8c9c8e07e268",
    "logs": [],
    "blockNumber": 4614609,
    "cumulativeGasUsed": "405972",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "8b9ab7c76342cbbb7fc72e2bb6468724",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"price(address)\":{\"params\":{\"asset\":\"address of the asset\"},\"returns\":{\"_0\":\"uint256 USD price of 1 of the asset, in 8 decimal fixed\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"price(address)\":{\"notice\":\"Returns the total price in 8 digit USD for a given asset.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracle/OracleRouter.sol\":\"OracleRouterTestnet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IBasicToken.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\ninterface IBasicToken {\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xcabd808c03076fa6fb5838a13210b2b99314d23842e0e3d5e55e0c1466e75212\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\ninterface IOracle {\\n    /**\\n     * @dev returns the asset price in USD, 8 decimal digits.\\n     */\\n    function price(address asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x595ee808ea4eb2e36362c0e46e85e4f923e673a6eb17fe7efad1c8d77d41d09d\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/chainlink/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n    function decimals() external view returns (uint8);\\n\\n    function description() external view returns (string memory);\\n\\n    function version() external view returns (uint256);\\n\\n    // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n    // if they do not have data to report, instead of returning unset values\\n    // which could be misinterpreted as actual reported values.\\n    function getRoundData(uint80 _roundId)\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n}\\n\",\"keccak256\":\"0x6194c60f3343140b13e867d59b1b00d042dc4149cb5a18f03b3d7cb3adb7127e\",\"license\":\"agpl-3.0\"},\"contracts/oracle/OracleRouter.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/chainlink/AggregatorV3Interface.sol\\\";\\nimport { IOracle } from \\\"../interfaces/IOracle.sol\\\";\\nimport { Helpers } from \\\"../utils/Helpers.sol\\\";\\n\\nabstract contract OracleRouterBase is IOracle {\\n    uint256 constant MIN_DRIFT = uint256(70000000);\\n    uint256 constant MAX_DRIFT = uint256(130000000);\\n\\n    /**\\n     * @dev The price feed contract to use for a particular asset.\\n     * @param asset address of the asset\\n     * @return address address of the price feed for the asset\\n     */\\n    function feed(address asset) internal view virtual returns (address);\\n\\n    /**\\n     * @notice Returns the total price in 8 digit USD for a given asset.\\n     * @param asset address of the asset\\n     * @return uint256 USD price of 1 of the asset, in 8 decimal fixed\\n     */\\n    function price(address asset) external view override returns (uint256) {\\n        address _feed = feed(asset);\\n\\n        require(_feed != address(0), \\\"Asset not available\\\");\\n        (, int256 _iprice, , , ) = AggregatorV3Interface(_feed)\\n            .latestRoundData();\\n        uint256 _price = uint256(_iprice);\\n        if (isStablecoin(asset)) {\\n            require(_price <= MAX_DRIFT, \\\"Oracle: Price exceeds max\\\");\\n            require(_price >= MIN_DRIFT, \\\"Oracle: Price under min\\\");\\n        }\\n        return uint256(_price);\\n    }\\n\\n    function isStablecoin(address _asset) internal view returns (bool) {\\n        string memory symbol = Helpers.getSymbol(_asset);\\n        bytes32 symbolHash = keccak256(abi.encodePacked(symbol));\\n        return\\n            symbolHash == keccak256(abi.encodePacked(\\\"DAI\\\")) ||\\n            symbolHash == keccak256(abi.encodePacked(\\\"USDC\\\")) ||\\n            symbolHash == keccak256(abi.encodePacked(\\\"USDT\\\"));\\n    }\\n}\\n\\ncontract OracleRouter is OracleRouterBase {\\n    /**\\n     * @dev The price feed contract to use for a particular asset.\\n     * @param asset address of the asset\\n     */\\n    function feed(address asset) internal pure override returns (address) {\\n        // DAI\\n        if (asset == address(0xd586E7F844cEa2F87f50152665BCbc2C279D8d70)) {\\n            // Chainlink: DAI/USD\\n            return address(0x51D7180edA2260cc4F6e4EebB82FEF5c3c2B8300);\\n        } else if (\\n            // USDCe\\n            asset == address(0xA7D7079b0FEaD91F3e65f86E8915Cb59c1a4C664)\\n        ) {\\n            // Chainlink: USDC/USD\\n            return address(0xF096872672F44d6EBA71458D74fe67F9a77a23B9);\\n        } else if (\\n            // USDTe\\n            asset == address(0xc7198437980c041c805A1EDcbA50c1Ce5db95118)\\n        ) {\\n            // Chainlink: USDT/USD\\n            return address(0xEBE676ee90Fe1112671f19b6B7459bC678B67e8a);\\n        } else if (\\n            // WAVAX\\n            asset == address(0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7)\\n        ) {\\n            // Chainlink: WAVAX/USD\\n            return address(0x0A77230d17318075983913bC2145DB16C7366156);\\n        } else {\\n            revert(\\\"Asset not available\\\");\\n        }\\n    }\\n}\\n\\ncontract OracleRouterTestnet is OracleRouterBase {\\n    /**\\n     * @dev The price feed contract to use for a particular asset. Testnet hacks.\\n     * @param asset address of the asset\\n     */\\n    function feed(address asset) internal pure override returns (address) {\\n        // DAI\\n        if (asset == address(0x51BC2DfB9D12d9dB50C855A5330fBA0faF761D15)) {\\n            // Chainlink: USDT/USD ~1\\n            return address(0x7898AcCC83587C3C55116c5230C17a6Cd9C71bad);\\n        } else if (\\n            // rando USDC\\n            asset == address(0x3a9fC2533eaFd09Bc5C36A7D6fdd0C664C81d659)\\n        ) {\\n            // Chainlink: USDT/USD ~1\\n            return address(0x7898AcCC83587C3C55116c5230C17a6Cd9C71bad);\\n        } else if (\\n            // USDTe\\n            asset == address(0x02823f9B469960Bb3b1de0B3746D4b95B7E35543)\\n        ) {\\n            // Chainlink: USDT/USD ~1\\n            return address(0x7898AcCC83587C3C55116c5230C17a6Cd9C71bad);\\n        } else if (\\n            // WAVAX\\n            asset == address(0xd00ae08403B9bbb9124bB305C09058E32C39A48c)\\n        ) {\\n            // Chainlink: WAVAX/USD\\n            return address(0x5498BB86BC934c8D34FDA08E81D444153d0D06aD);\\n        } else {\\n            revert(\\\"Asset not available\\\");\\n        }\\n    }\\n}\\n\\ncontract OracleRouterDev is OracleRouterBase {\\n    mapping(address => address) public assetToFeed;\\n\\n    function setFeed(address _asset, address _feed) external {\\n        assetToFeed[_asset] = _feed;\\n    }\\n\\n    /**\\n     * @dev The price feed contract to use for a particular asset.\\n     * @param asset address of the asset\\n     */\\n    function feed(address asset) internal view override returns (address) {\\n        return assetToFeed[asset];\\n    }\\n}\\n\",\"keccak256\":\"0xcdc54007ab8f58ef7225f3b9ed57ee2f7f87ddcfbcb7d061d2db04ed86c4fdce\",\"license\":\"agpl-3.0\"},\"contracts/utils/Helpers.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nimport { IBasicToken } from \\\"../interfaces/IBasicToken.sol\\\";\\n\\nlibrary Helpers {\\n    /**\\n     * @notice Fetch the `symbol()` from an ERC20 token\\n     * @dev Grabs the `symbol()` from a contract\\n     * @param _token Address of the ERC20 token\\n     * @return string Symbol of the ERC20 token\\n     */\\n    function getSymbol(address _token) internal view returns (string memory) {\\n        string memory symbol = IBasicToken(_token).symbol();\\n        return symbol;\\n    }\\n\\n    /**\\n     * @notice Fetch the `decimals()` from an ERC20 token\\n     * @dev Grabs the `decimals()` from a contract and fails if\\n     *      the decimal value does not live within a certain range\\n     * @param _token Address of the ERC20 token\\n     * @return uint256 Decimals of the ERC20 token\\n     */\\n    function getDecimals(address _token) internal view returns (uint256) {\\n        uint256 decimals = IBasicToken(_token).decimals();\\n        require(\\n            decimals >= 4 && decimals <= 18,\\n            \\\"Token must have sufficient decimal places\\\"\\n        );\\n\\n        return decimals;\\n    }\\n}\\n\",\"keccak256\":\"0x7ce41c7eacd2b6722029bd87759fe6e4d9b48a862277707737be82c94581b855\",\"license\":\"agpl-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610662806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063aea9107814610030575b600080fd5b61004361003e3660046104a4565b610055565b60405190815260200160405180910390f35b600080610061836101f0565b90506001600160a01b0381166100b45760405162461bcd60e51b81526020600482015260136024820152724173736574206e6f7420617661696c61626c6560681b60448201526064015b60405180910390fd5b6000816001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156100ef57600080fd5b505afa158015610103573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610127919061057a565b505050915050600081905061013b85610335565b156101e8576307bfa4808111156101945760405162461bcd60e51b815260206004820152601960248201527f4f7261636c653a2050726963652065786365656473206d61780000000000000060448201526064016100ab565b63042c1d808110156101e85760405162461bcd60e51b815260206004820152601760248201527f4f7261636c653a20507269636520756e646572206d696e00000000000000000060448201526064016100ab565b949350505050565b60006001600160a01b0382167351bc2dfb9d12d9db50c855a5330fba0faf761d1514156102325750737898accc83587c3c55116c5230c17a6cd9c71bad919050565b6001600160a01b038216733a9fc2533eafd09bc5c36a7d6fdd0c664c81d65914156102725750737898accc83587c3c55116c5230c17a6cd9c71bad919050565b6001600160a01b0382167302823f9b469960bb3b1de0b3746d4b95b7e3554314156102b25750737898accc83587c3c55116c5230c17a6cd9c71bad919050565b6001600160a01b03821673d00ae08403b9bbb9124bb305c09058e32c39a48c14156102f25750735498bb86bc934c8d34fda08e81d444153d0d06ad919050565b60405162461bcd60e51b81526020600482015260136024820152724173736574206e6f7420617661696c61626c6560681b60448201526064016100ab565b919050565b6000806103418361040a565b905060008160405160200161035691906105ca565b604051602081830303815290604052805190602001209050604051602001610387906244414960e81b815260030190565b604051602081830303815290604052805190602001208114806103d15750604051635553444360e01b60208201526024016040516020818303038152906040528051906020012081145b806101e85750604051631554d11560e21b6020820152602401604051602081830303815290604052805190602001208114949350505050565b60606000826001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b15801561044757600080fd5b505afa15801561045b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261048391908101906104cd565b9392505050565b805169ffffffffffffffffffff8116811461033057600080fd5b6000602082840312156104b657600080fd5b81356001600160a01b038116811461048357600080fd5b6000602082840312156104df57600080fd5b815167ffffffffffffffff808211156104f757600080fd5b818401915084601f83011261050b57600080fd5b81518181111561051d5761051d610616565b604051601f8201601f19908116603f0116810190838211818310171561054557610545610616565b8160405282815287602084870101111561055e57600080fd5b61056f8360208301602088016105e6565b979650505050505050565b600080600080600060a0868803121561059257600080fd5b61059b8661048a565b94506020860151935060408601519250606086015191506105be6080870161048a565b90509295509295909350565b600082516105dc8184602087016105e6565b9190910192915050565b60005b838110156106015781810151838201526020016105e9565b83811115610610576000848401525b50505050565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220f4a38481dae3602948685de8e7bde1fba8500df305a5d8df4a36660b5f7ff5b964736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063aea9107814610030575b600080fd5b61004361003e3660046104a4565b610055565b60405190815260200160405180910390f35b600080610061836101f0565b90506001600160a01b0381166100b45760405162461bcd60e51b81526020600482015260136024820152724173736574206e6f7420617661696c61626c6560681b60448201526064015b60405180910390fd5b6000816001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156100ef57600080fd5b505afa158015610103573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610127919061057a565b505050915050600081905061013b85610335565b156101e8576307bfa4808111156101945760405162461bcd60e51b815260206004820152601960248201527f4f7261636c653a2050726963652065786365656473206d61780000000000000060448201526064016100ab565b63042c1d808110156101e85760405162461bcd60e51b815260206004820152601760248201527f4f7261636c653a20507269636520756e646572206d696e00000000000000000060448201526064016100ab565b949350505050565b60006001600160a01b0382167351bc2dfb9d12d9db50c855a5330fba0faf761d1514156102325750737898accc83587c3c55116c5230c17a6cd9c71bad919050565b6001600160a01b038216733a9fc2533eafd09bc5c36a7d6fdd0c664c81d65914156102725750737898accc83587c3c55116c5230c17a6cd9c71bad919050565b6001600160a01b0382167302823f9b469960bb3b1de0b3746d4b95b7e3554314156102b25750737898accc83587c3c55116c5230c17a6cd9c71bad919050565b6001600160a01b03821673d00ae08403b9bbb9124bb305c09058e32c39a48c14156102f25750735498bb86bc934c8d34fda08e81d444153d0d06ad919050565b60405162461bcd60e51b81526020600482015260136024820152724173736574206e6f7420617661696c61626c6560681b60448201526064016100ab565b919050565b6000806103418361040a565b905060008160405160200161035691906105ca565b604051602081830303815290604052805190602001209050604051602001610387906244414960e81b815260030190565b604051602081830303815290604052805190602001208114806103d15750604051635553444360e01b60208201526024016040516020818303038152906040528051906020012081145b806101e85750604051631554d11560e21b6020820152602401604051602081830303815290604052805190602001208114949350505050565b60606000826001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b15801561044757600080fd5b505afa15801561045b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261048391908101906104cd565b9392505050565b805169ffffffffffffffffffff8116811461033057600080fd5b6000602082840312156104b657600080fd5b81356001600160a01b038116811461048357600080fd5b6000602082840312156104df57600080fd5b815167ffffffffffffffff808211156104f757600080fd5b818401915084601f83011261050b57600080fd5b81518181111561051d5761051d610616565b604051601f8201601f19908116603f0116810190838211818310171561054557610545610616565b8160405282815287602084870101111561055e57600080fd5b61056f8360208301602088016105e6565b979650505050505050565b600080600080600060a0868803121561059257600080fd5b61059b8661048a565b94506020860151935060408601519250606086015191506105be6080870161048a565b90509295509295909350565b600082516105dc8184602087016105e6565b9190910192915050565b60005b838110156106015781810151838201526020016105e9565b83811115610610576000848401525b50505050565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220f4a38481dae3602948685de8e7bde1fba8500df305a5d8df4a36660b5f7ff5b964736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "price(address)": {
        "params": {
          "asset": "address of the asset"
        },
        "returns": {
          "_0": "uint256 USD price of 1 of the asset, in 8 decimal fixed"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "price(address)": {
        "notice": "Returns the total price in 8 digit USD for a given asset."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}