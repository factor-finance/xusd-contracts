{
  "address": "0x49a3E3387ca1D3d47C752d3BF66F5bF21f1fC592",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "GovernorshipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        }
      ],
      "name": "PTokenAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        }
      ],
      "name": "PTokenRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "PendingGovernorshipTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_oldThreshold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newThreshold",
          "type": "uint256"
        }
      ],
      "name": "RewardLiquidationThresholdUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_oldAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newAddress",
          "type": "address"
        }
      ],
      "name": "RewardTokenAddressUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_oldAddresses",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_newAddresses",
          "type": "address[]"
        }
      ],
      "name": "RewardTokenAddressesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardTokenCollected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "SkippedWithdrawal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "_deprecated_rewardTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "assetToPToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "checkBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collectRewardTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardTokenAddress",
          "type": "address"
        }
      ],
      "name": "getProofAndAmount",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewardTokenAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "incentiveDistributorAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_platformAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vaultAddress",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_rewardTokenAddresses",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_assets",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_pTokens",
          "type": "address[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_platformAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vaultAddress",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_rewardTokenAddresses",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_assets",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_pTokens",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_incentiveDistributorAddresses",
          "type": "address[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isGovernor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "platformAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_assetIndex",
          "type": "uint256"
        }
      ],
      "name": "removePToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardLiquidationThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardTokenAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "safeApproveAllTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pToken",
          "type": "address"
        }
      ],
      "name": "setPTokenAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardTokenAddress",
          "type": "address"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "setProofAndAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_threshold",
          "type": "uint256"
        }
      ],
      "name": "setRewardLiquidationThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_rewardTokenAddresses",
          "type": "address[]"
        }
      ],
      "name": "setRewardTokenAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "supportsAsset",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newGovernor",
          "type": "address"
        }
      ],
      "name": "transferGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transferToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x544645b105142a18d9bdc3ba8c53d3b5c1a077a5095a387367f476bc9f031a07",
  "receipt": {
    "to": null,
    "from": "0xFF1AE57723A4d6d5301e4C7145eF5E9e51901fdc",
    "contractAddress": "0x49a3E3387ca1D3d47C752d3BF66F5bF21f1fC592",
    "transactionIndex": 0,
    "gasUsed": "2724000",
    "logsBloom": "0x
    "blockHash": "0xdc061afb089aa9ed333ce259ddbfe9e693aa77ecac4509eb07b4eeae7dd19a8b",
    "transactionHash": "0x544645b105142a18d9bdc3ba8c53d3b5c1a077a5095a387367f476bc9f031a07",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 12117783,
        "transactionHash": "0x544645b105142a18d9bdc3ba8c53d3b5c1a077a5095a387367f476bc9f031a07",
        "address": "0x49a3E3387ca1D3d47C752d3BF66F5bF21f1fC592",
        "topics": [
          "0xc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ff1ae57723a4d6d5301e4c7145ef5e9e51901fdc"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xdc061afb089aa9ed333ce259ddbfe9e693aa77ecac4509eb07b4eeae7dd19a8b"
      }
    ],
    "blockNumber": 12117783,
    "cumulativeGasUsed": "2724000",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d446e58b2ef115b1f5a66a1ad9203529",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"GovernorshipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"}],\"name\":\"PTokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"}],\"name\":\"PTokenRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"PendingGovernorshipTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldThreshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newThreshold\",\"type\":\"uint256\"}],\"name\":\"RewardLiquidationThresholdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oldAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"RewardTokenAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_oldAddresses\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_newAddresses\",\"type\":\"address[]\"}],\"name\":\"RewardTokenAddressesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardTokenCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SkippedWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_deprecated_rewardTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assetToPToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"checkBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectRewardTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardTokenAddress\",\"type\":\"address\"}],\"name\":\"getProofAndAmount\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardTokenAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"incentiveDistributorAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_platformAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vaultAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_rewardTokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_assets\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_pTokens\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_platformAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vaultAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_rewardTokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_assets\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_pTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_incentiveDistributorAddresses\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isGovernor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_assetIndex\",\"type\":\"uint256\"}],\"name\":\"removePToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardLiquidationThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardTokenAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeApproveAllTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pToken\",\"type\":\"address\"}],\"name\":\"setPTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardTokenAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setProofAndAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"setRewardLiquidationThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_rewardTokenAddresses\",\"type\":\"address[]\"}],\"name\":\"setRewardTokenAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"supportsAsset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newGovernor\",\"type\":\"address\"}],\"name\":\"transferGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkBalance(address)\":{\"details\":\"Get the total asset value held in the platform      This includes any interest that was generated since depositing      CREAM exchange rate between the cToken and asset gradually increases,      causing the cToken to be worth more corresponding asset.\",\"params\":{\"_asset\":\"Address of the asset\"},\"returns\":{\"balance\":\"   Total value of the asset in the platform\"}},\"claimGovernance()\":{\"details\":\"Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor.\"},\"collectRewardTokens()\":{\"details\":\"Collect accumulated WAVAX+ALPHA and send to Vault.\"},\"deposit(address,uint256)\":{\"details\":\"Deposit asset into AlphaHomora\",\"params\":{\"_amount\":\"Amount of asset to deposit\",\"_asset\":\"Address of asset to deposit\"}},\"depositAll()\":{\"details\":\"Deposit the entire balance of any supported asset into AlphaHomora\"},\"getRewardTokenAddresses()\":{\"details\":\"Get the reward token addresses.\",\"returns\":{\"_0\":\"address[] the reward token addresses.\"}},\"governor()\":{\"details\":\"Returns the address of the current Governor.\"},\"initialize(address,address,address[],address[],address[])\":{\"details\":\"Internal initialize function, to set up initial internal state\",\"params\":{\"_assets\":\"Addresses of initial supported assets\",\"_pTokens\":\"Platform Token corresponding addresses\",\"_platformAddress\":\"Generic platform address\",\"_rewardTokenAddresses\":\"Addresses of reward tokens for platform\",\"_vaultAddress\":\"Address of the Vault\"}},\"isGovernor()\":{\"details\":\"Returns true if the caller is the current Governor.\"},\"removePToken(uint256)\":{\"details\":\"Remove a supported asset by passing its index.      This method can only be called by the system Governor\",\"params\":{\"_assetIndex\":\"Index of the asset to be removed\"}},\"safeApproveAllTokens()\":{\"details\":\"Approve the spending of all assets by their corresponding cToken,      if for some reason is it necessary.\"},\"setPTokenAddress(address,address)\":{\"details\":\"Provide support for asset by passing its pToken address.      This method can only be called by the system Governor\",\"params\":{\"_asset\":\"Address for the asset\",\"_pToken\":\"Address for the corresponding platform token\"}},\"setProofAndAmount(address,bytes32[],uint256)\":{\"details\":\"Sets the reward amount and merkle proof from off-chain.\",\"params\":{\"_rewardTokenAddress\":\"The reward token address\",\"amount\":\"The accumulated (total) amount of rewards.\",\"proof\":\"the MerkleProof provided by AlphaHomora\"}},\"setRewardLiquidationThreshold(uint256)\":{\"details\":\"Set the reward token liquidation threshold.\",\"params\":{\"_threshold\":\"Threshold amount in decimals of reward token that will cause the Vault to claim and withdrawAll on allocate() calls.\"}},\"setRewardTokenAddresses(address[])\":{\"details\":\"Set the reward token addresses.\",\"params\":{\"_rewardTokenAddresses\":\"Address array of the reward tokens\"}},\"supportsAsset(address)\":{\"details\":\"Returns bool indicating whether asset is supported by strategy\",\"params\":{\"_asset\":\"Address of the asset\"}},\"transferGovernance(address)\":{\"details\":\"Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete\",\"params\":{\"_newGovernor\":\"Address of the new Governor\"}},\"transferToken(address,uint256)\":{\"details\":\"Transfer token to governor. Intended for recovering tokens stuck in      strategy contracts, i.e. mistaken sends.\",\"params\":{\"_amount\":\"Amount of the asset to transfer\",\"_asset\":\"Address for the asset\"}},\"withdraw(address,address,uint256)\":{\"details\":\"Withdraw asset from AlphaHomora\",\"params\":{\"_amount\":\"Amount of asset to withdraw\",\"_asset\":\"Address of asset to withdraw\",\"_recipient\":\"Address to receive withdrawn asset\"}},\"withdrawAll()\":{\"details\":\"Remove all assets from platform and send all of that asset to Vault contract.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/AlphaHomoraStrategy.sol\":\"AlphaHomoraStrategy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xb03df8481a954604ad0c9125680893b2e3f7ff770fe470e38b89ac61b84e8072\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        bytes32 computedHash = leaf;\\n\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n\\n        // Check if the computed hash (root) is equal to the provided root\\n        return computedHash == root;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1bbdc6813c021e138da527c44d2615931b0e5c7fa2f58369846ed288324a8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/governance/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title XUSD Governable Contract\\n * @dev Copy of the openzeppelin Ownable.sol contract with nomenclature change\\n *      from owner to governor and renounce methods removed. Does not use\\n *      Context.sol like Ownable.sol does for simplification.\\n * @author Factor Finance\\n */\\ncontract Governable {\\n    // Storage position of the owner and pendingOwner of the contract\\n    // keccak256(\\\"XUSD.governor\\\");\\n    bytes32 private constant governorPosition =\\n        0xfe7bb572d5723516ce4fe7a6a664f5adb38f5714efcd271411ed70a34d3ef2f7;\\n\\n    // keccak256(\\\"XUSD.pending.governor\\\");\\n    bytes32 private constant pendingGovernorPosition =\\n        0x1973cae3d8695cb4c31dce9679edb790944900898ecc70570ba365e7de143b0a;\\n\\n    // keccak256(\\\"XUSD.reentry.status\\\");\\n    bytes32 private constant reentryStatusPosition =\\n        0x218adab1852f0bdeacb3305483cf296dbcf6abf496f646284463c8e6a43fa665;\\n\\n    // See OpenZeppelin ReentrancyGuard implementation\\n    uint256 constant _NOT_ENTERED = 1;\\n    uint256 constant _ENTERED = 2;\\n\\n    event PendingGovernorshipTransfer(\\n        address indexed previousGovernor,\\n        address indexed newGovernor\\n    );\\n\\n    event GovernorshipTransferred(\\n        address indexed previousGovernor,\\n        address indexed newGovernor\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial Governor.\\n     */\\n    constructor() {\\n        _setGovernor(msg.sender);\\n        emit GovernorshipTransferred(address(0), _governor());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current Governor.\\n     */\\n    function governor() public view returns (address) {\\n        return _governor();\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current Governor.\\n     */\\n    function _governor() internal view returns (address governorOut) {\\n        bytes32 position = governorPosition;\\n        assembly {\\n            governorOut := sload(position)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address of the pending Governor.\\n     */\\n    function _pendingGovernor()\\n        internal\\n        view\\n        returns (address pendingGovernor)\\n    {\\n        bytes32 position = pendingGovernorPosition;\\n        assembly {\\n            pendingGovernor := sload(position)\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the Governor.\\n     */\\n    modifier onlyGovernor() {\\n        require(isGovernor(), \\\"Caller is not the Governor\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current Governor.\\n     */\\n    function isGovernor() public view returns (bool) {\\n        return msg.sender == _governor();\\n    }\\n\\n    function _setGovernor(address newGovernor) internal {\\n        bytes32 position = governorPosition;\\n        assembly {\\n            sstore(position, newGovernor)\\n        }\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        bytes32 position = reentryStatusPosition;\\n        uint256 _reentry_status;\\n        assembly {\\n            _reentry_status := sload(position)\\n        }\\n\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_reentry_status != _ENTERED, \\\"Reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        assembly {\\n            sstore(position, _ENTERED)\\n        }\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        assembly {\\n            sstore(position, _NOT_ENTERED)\\n        }\\n    }\\n\\n    function _setPendingGovernor(address newGovernor) internal {\\n        bytes32 position = pendingGovernorPosition;\\n        assembly {\\n            sstore(position, newGovernor)\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers Governance of the contract to a new account (`newGovernor`).\\n     * Can only be called by the current Governor. Must be claimed for this to complete\\n     * @param _newGovernor Address of the new Governor\\n     */\\n    function transferGovernance(address _newGovernor) external onlyGovernor {\\n        _setPendingGovernor(_newGovernor);\\n        emit PendingGovernorshipTransfer(_governor(), _newGovernor);\\n    }\\n\\n    /**\\n     * @dev Claim Governance of the contract to a new account (`newGovernor`).\\n     * Can only be called by the new Governor.\\n     */\\n    function claimGovernance() external {\\n        require(\\n            msg.sender == _pendingGovernor(),\\n            \\\"Only the pending Governor can complete the claim\\\"\\n        );\\n        _changeGovernor(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Change Governance of the contract to a new account (`newGovernor`).\\n     * @param _newGovernor Address of the new Governor\\n     */\\n    function _changeGovernor(address _newGovernor) internal {\\n        require(_newGovernor != address(0), \\\"New Governor is address(0)\\\");\\n        emit GovernorshipTransferred(_governor(), _newGovernor);\\n        _setGovernor(_newGovernor);\\n    }\\n}\\n\",\"keccak256\":\"0x6f20b96be4b7079146f87ce8126bf063fb25bd62b58ed5bbfed8ffcce4713a70\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\ninterface IVault {\\n    event AssetSupported(address _asset);\\n    event AssetDefaultStrategyUpdated(address _asset, address _strategy);\\n    event AssetAllocated(address _asset, address _strategy, uint256 _amount);\\n    event StrategyApproved(address _addr);\\n    event StrategyRemoved(address _addr);\\n    event Mint(address _addr, uint256 _value);\\n    event Redeem(address _addr, uint256 _value);\\n    event CapitalPaused();\\n    event CapitalUnpaused();\\n    event RebasePaused();\\n    event RebaseUnpaused();\\n    event VaultBufferUpdated(uint256 _vaultBuffer);\\n    event RedeemFeeUpdated(uint256 _redeemFeeBps);\\n    event PriceProviderUpdated(address _priceProvider);\\n    event AllocateThresholdUpdated(uint256 _threshold);\\n    event RebaseThresholdUpdated(uint256 _threshold);\\n    event UniswapUpdated(address _address);\\n    event StrategistUpdated(address _address);\\n    event MaxSupplyDiffChanged(uint256 maxSupplyDiff);\\n    event YieldDistribution(address _to, uint256 _yield, uint256 _fee);\\n    event TrusteeFeeBpsChanged(uint256 _basis);\\n    event TrusteeAddressChanged(address _address);\\n\\n    // Governable.sol\\n    function transferGovernance(address _newGovernor) external;\\n\\n    function claimGovernance() external;\\n\\n    function governor() external view returns (address);\\n\\n    // VaultAdmin.sol\\n    function setPriceProvider(address _priceProvider) external;\\n\\n    function priceProvider() external view returns (address);\\n\\n    function setRedeemFeeBps(uint256 _redeemFeeBps) external;\\n\\n    function redeemFeeBps() external view returns (uint256);\\n\\n    function setVaultBuffer(uint256 _vaultBuffer) external;\\n\\n    function vaultBuffer() external view returns (uint256);\\n\\n    function setAutoAllocateThreshold(uint256 _threshold) external;\\n\\n    function autoAllocateThreshold() external view returns (uint256);\\n\\n    function setRebaseThreshold(uint256 _threshold) external;\\n\\n    function rebaseThreshold() external view returns (uint256);\\n\\n    function setStrategistAddr(address _address) external;\\n\\n    function strategistAddr() external view returns (address);\\n\\n    function setUniswapAddr(address _address) external;\\n\\n    function uniswapAddr() external view returns (address);\\n\\n    function setMaxSupplyDiff(uint256 _maxSupplyDiff) external;\\n\\n    function maxSupplyDiff() external view returns (uint256);\\n\\n    function setTrusteeAddress(address _address) external;\\n\\n    function trusteeAddress() external view returns (address);\\n\\n    function setTrusteeFeeBps(uint256 _basis) external;\\n\\n    function trusteeFeeBps() external view returns (uint256);\\n\\n    function supportAsset(address _asset) external;\\n\\n    function approveStrategy(address _addr) external;\\n\\n    function removeStrategy(address _addr) external;\\n\\n    function addSwapToken(address _addr) external;\\n\\n    function removeSwapToken(address _addr) external;\\n\\n    function setAssetDefaultStrategy(address _asset, address _strategy)\\n        external;\\n\\n    function assetDefaultStrategies(address _asset)\\n        external\\n        view\\n        returns (address);\\n\\n    function pauseRebase() external;\\n\\n    function unpauseRebase() external;\\n\\n    function rebasePaused() external view returns (bool);\\n\\n    function pauseCapital() external;\\n\\n    function unpauseCapital() external;\\n\\n    function capitalPaused() external view returns (bool);\\n\\n    function transferToken(address _asset, uint256 _amount) external;\\n\\n    function harvest() external;\\n\\n    function harvestAndSwap() external;\\n\\n    function harvest(address _strategyAddr) external;\\n\\n    function harvestAndSwap(address _strategyAddr) external;\\n\\n    function swap() external;\\n\\n    function priceUSDMint(address asset) external view returns (uint256);\\n\\n    function priceUSDRedeem(address asset) external view returns (uint256);\\n\\n    function withdrawAllFromStrategy(address _strategyAddr) external;\\n\\n    function withdrawAllFromStrategies() external;\\n\\n    function reallocate(\\n        address _strategyFromAddress,\\n        address _strategyToAddress,\\n        address[] calldata _assets,\\n        uint256[] calldata _amounts\\n    ) external;\\n\\n    // VaultCore.sol\\n    function mint(\\n        address _asset,\\n        uint256 _amount,\\n        uint256 _minimumXusdAmount\\n    ) external;\\n\\n    function redeem(uint256 _amount, uint256 _minimumUnitAmount) external;\\n\\n    function redeemAll(uint256 _minimumUnitAmount) external;\\n\\n    function allocate() external;\\n\\n    function rebase() external;\\n\\n    function totalValue() external view returns (uint256 value);\\n\\n    function checkBalance(address _asset) external view returns (uint256);\\n\\n    function calculateRedeemOutputs(uint256 _amount)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function getAssetCount() external view returns (uint256);\\n\\n    function getAllAssets() external view returns (address[] memory);\\n\\n    function getStrategyCount() external view returns (uint256);\\n\\n    function isSupportedAsset(address _asset) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xe295f9198d6bde84242764901fa1a4bd63b0dfca83b220d4636c34844ed0e920\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/alphaHomora/IAlphaIncentiveDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\ninterface IAlphaIncentiveDistributor {\\n    // closed source.\\n    // extracted from: https://snowtrace.io/address/0x7424ddc7ac9f60b3d0f7bca9e438dc2c1d44d043 (alpha)\\n    //                       and 0xf40d48bb67508538bfab8091a919d2659a944b16 (wavax)\\n    // Returns the address of the token distributed by this contract.\\n    function token() external view returns (address);\\n\\n    function claim(\\n        address _account,\\n        uint256 _reward,\\n        bytes32[] calldata _proof\\n    ) external;\\n\\n    function claimed(address _account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd70acc385077130f0a4da69f731e7b3236e48e57c605012c55a7d9cffcc4179b\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/alphaHomora/ICERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface ICERC20 {\\n    function decimals() external returns (uint8);\\n\\n    function underlying() external returns (address);\\n\\n    function mint(uint256 mintAmount) external returns (uint256);\\n\\n    function redeem(uint256 redeemTokens) external returns (uint256);\\n\\n    function balanceOf(address user) external view returns (uint256);\\n\\n    function exchangeRateStored() external view returns (uint256);\\n\\n    function exchangeRateCurrent() external returns (uint256);\\n}\\n\",\"keccak256\":\"0xf7ef545addbce6400b06afa80f038fa86557dc05cac33e5bc810e2c7cd0146a6\",\"license\":\"MIT\"},\"contracts/interfaces/alphaHomora/ISafeBox.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport { ICERC20 } from \\\"./ICERC20.sol\\\";\\n\\ninterface ISafeBox {\\n    function cToken() external view returns (ICERC20);\\n\\n    function uToken() external view returns (IERC20);\\n\\n    function deposit(uint256 amount) external;\\n\\n    function withdraw(uint256 amount) external;\\n\\n    function claim(uint256 totalAmount, bytes32[] memory proof) external;\\n\\n    function claimAndWithdraw(\\n        uint256 totalAmount,\\n        bytes32[] memory proof,\\n        uint256 withdrawAmount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x9aff87373b2ecc54e7bb3a219dea817f50b4a938b87c8765f49cfe91b933b499\",\"license\":\"agpl-3.0\"},\"contracts/strategies/AlphaHomoraStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title XUSD AlphaHomora Strategy\\n * @notice Investment strategy for investing stablecoins via AlphaHomora/CREAM\\n * @author XUSD.fi Inc\\n */\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport { IERC20, InitializableAbstractStrategy } from \\\"../utils/InitializableAbstractStrategy.sol\\\";\\nimport { IVault } from \\\"../interfaces/IVault.sol\\\";\\nimport { ICERC20 } from \\\"../interfaces/alphaHomora/ICERC20.sol\\\";\\nimport { ISafeBox } from \\\"../interfaces/alphaHomora/ISafeBox.sol\\\";\\nimport { IAlphaIncentiveDistributor } from \\\"../interfaces/alphaHomora/IAlphaIncentiveDistributor.sol\\\";\\n\\ncontract AlphaHomoraStrategy is InitializableAbstractStrategy {\\n    using SafeERC20 for IERC20;\\n\\n    address[] public incentiveDistributorAddresses;\\n    mapping(address => bytes32[]) internal _proofs;\\n    mapping(address => uint256) internal _amounts;\\n\\n    function initialize(\\n        address _platformAddress, // dead\\n        address _vaultAddress,\\n        address[] calldata _rewardTokenAddresses, // [ALPHA, WAVAX]\\n        address[] calldata _assets,\\n        address[] calldata _pTokens,\\n        address[] calldata _incentiveDistributorAddresses // [ALPHAcontrollerAddr, WAVAXcontrollerAddr]\\n    ) external onlyGovernor initializer {\\n        require(\\n            _rewardTokenAddresses.length ==\\n                _incentiveDistributorAddresses.length,\\n            \\\"not 1:1 rewards-to-incentives\\\"\\n        );\\n        incentiveDistributorAddresses = _incentiveDistributorAddresses;\\n\\n        InitializableAbstractStrategy._initialize(\\n            _platformAddress,\\n            _vaultAddress,\\n            _rewardTokenAddresses,\\n            _assets,\\n            _pTokens\\n        );\\n    }\\n\\n    event SkippedWithdrawal(address asset, uint256 amount);\\n\\n    /**\\n     * @dev Collect accumulated WAVAX+ALPHA and send to Vault.\\n     */\\n    function collectRewardTokens() external override onlyVault nonReentrant {\\n        for (uint256 i = 0; i < rewardTokenAddresses.length; i++) {\\n            IAlphaIncentiveDistributor _incentiveDistributor = IAlphaIncentiveDistributor(\\n                    incentiveDistributorAddresses[i]\\n                );\\n            require(_incentiveDistributor.token() == rewardTokenAddresses[i]);\\n            uint256 _amount = _amounts[rewardTokenAddresses[i]];\\n            if (_amount == 0) {\\n                continue;\\n            }\\n            bytes32[] memory _proof = _proofs[rewardTokenAddresses[i]];\\n            uint256 _claimed = _incentiveDistributor.claimed(address(this));\\n            if (_claimed < _amount) {\\n                /* Claim _amount - _claimed reward tokens */\\n                _incentiveDistributor.claim(address(this), _amount, _proof);\\n                /* // Transfer rewards to Vault */\\n                IERC20 rewardToken = IERC20(rewardTokenAddresses[i]);\\n                uint256 balance = rewardToken.balanceOf(address(this));\\n                emit RewardTokenCollected(\\n                    vaultAddress,\\n                    rewardTokenAddresses[i],\\n                    balance\\n                );\\n                rewardToken.safeTransfer(vaultAddress, balance);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Deposit asset into AlphaHomora\\n     * @param _asset Address of asset to deposit\\n     * @param _amount Amount of asset to deposit\\n     */\\n    function deposit(address _asset, uint256 _amount)\\n        external\\n        override\\n        onlyVault\\n        nonReentrant\\n    {\\n        _deposit(_asset, _amount);\\n    }\\n\\n    /**\\n     * @dev Deposit asset into AlphaHomorax\\n     * @param _asset Address of asset to deposit\\n     * @param _amount Amount of asset to deposit\\n     */\\n    function _deposit(address _asset, uint256 _amount) internal {\\n        require(_amount > 0, \\\"Must deposit something\\\");\\n        ISafeBox safeBox = _getSafeBoxFor(_asset);\\n        emit Deposit(_asset, address(safeBox), _amount);\\n        safeBox.deposit(_amount);\\n    }\\n\\n    /**\\n     * @dev Deposit the entire balance of any supported asset into AlphaHomora\\n     */\\n    function depositAll() external override onlyVault nonReentrant {\\n        for (uint256 i = 0; i < assetsMapped.length; i++) {\\n            uint256 balance = IERC20(assetsMapped[i]).balanceOf(address(this));\\n            if (balance > 0) {\\n                _deposit(assetsMapped[i], balance);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Withdraw asset from AlphaHomora\\n     * @param _recipient Address to receive withdrawn asset\\n     * @param _asset Address of asset to withdraw\\n     * @param _amount Amount of asset to withdraw\\n     */\\n    function withdraw(\\n        address _recipient,\\n        address _asset,\\n        uint256 _amount\\n    ) external override onlyVault nonReentrant {\\n        require(_amount > 0, \\\"Must withdraw something\\\");\\n        require(_recipient != address(0), \\\"Must specify recipient\\\");\\n\\n        ISafeBox safeBox = _getSafeBoxFor(_asset);\\n        ICERC20 cToken = _getCTokenFor(_asset);\\n        uint256 cTokensToRedeem = _convertUnderlyingToCToken(cToken, _amount);\\n        emit Withdrawal(_asset, address(safeBox), cTokensToRedeem);\\n        if (cTokensToRedeem == 0) {\\n            emit SkippedWithdrawal(_asset, _amount);\\n            return;\\n        }\\n        emit Withdrawal(_asset, address(cToken.underlying()), _amount);\\n        uint256 balanceBefore = IERC20(_asset).balanceOf(address(this));\\n        safeBox.withdraw(cTokensToRedeem);\\n        uint256 balanceAfter = IERC20(_asset).balanceOf(address(this));\\n        require(\\n            _amount <= balanceAfter - balanceBefore,\\n            \\\"Did not withdraw enough\\\"\\n        );\\n        IERC20(_asset).safeTransfer(_recipient, _amount);\\n    }\\n\\n    /**\\n     * @dev Remove all assets from platform and send all of that asset to Vault contract.\\n     */\\n    function withdrawAll() external override onlyVaultOrGovernor nonReentrant {\\n        for (uint256 i = 0; i < assetsMapped.length; i++) {\\n            IERC20 asset = IERC20(assetsMapped[i]);\\n            ISafeBox safeBox = _getSafeBoxFor(assetsMapped[i]);\\n            ICERC20 cToken = _getCTokenFor(assetsMapped[i]);\\n            uint256 balance = cToken.balanceOf(address(this));\\n            // Redeem entire balance of safeBox\\n            if (balance > 0) {\\n                safeBox.withdraw(balance);\\n                // Transfer entire balance to Vault, including any already held\\n                asset.safeTransfer(\\n                    vaultAddress,\\n                    asset.balanceOf(address(this))\\n                );\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Get the total asset value held in the platform\\n     *      This includes any interest that was generated since depositing\\n     *      CREAM exchange rate between the cToken and asset gradually increases,\\n     *      causing the cToken to be worth more corresponding asset.\\n     * @param _asset      Address of the asset\\n     * @return balance    Total value of the asset in the platform\\n     */\\n    function checkBalance(address _asset)\\n        external\\n        view\\n        override\\n        returns (uint256 balance)\\n    {\\n        // Balance is always with token cToken decimals\\n        address safeBoxAddr = assetToPToken[_asset];\\n        require(safeBoxAddr != address(0));\\n        ISafeBox _safeBox = _getSafeBoxFor(_asset);\\n        ICERC20 _cToken = _safeBox.cToken();\\n        balance = _checkBalance(safeBoxAddr, _cToken);\\n    }\\n\\n    /**\\n     * @dev Get the total asset value held in the platform\\n     *      underlying = (cTokenAmt * exchangeRate) / 1e18\\n     * @param _cToken     cToken for which to check balance\\n     * @return balance    Total value of the asset in the platform\\n     */\\n    function _checkBalance(address _safeBox, ICERC20 _cToken)\\n        internal\\n        view\\n        returns (uint256 balance)\\n    {\\n        uint256 safeBoxBalance = IERC20(_safeBox).balanceOf(address(this));\\n        uint256 exchangeRate = _cToken.exchangeRateStored();\\n        // e.g. 50e8*205316390724364402565641705 / 1e18 = 1.0265..e18\\n        balance = (safeBoxBalance * exchangeRate) / 1e18;\\n    }\\n\\n    /**\\n     * @dev Returns bool indicating whether asset is supported by strategy\\n     * @param _asset Address of the asset\\n     */\\n    function supportsAsset(address _asset)\\n        external\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return assetToPToken[_asset] != address(0);\\n    }\\n\\n    /**\\n     * @dev Approve the spending of all assets by their corresponding cToken,\\n     *      if for some reason is it necessary.\\n     */\\n    function safeApproveAllTokens() external override {\\n        uint256 assetCount = assetsMapped.length;\\n        for (uint256 i = 0; i < assetCount; i++) {\\n            address asset = assetsMapped[i];\\n            address cToken = assetToPToken[asset];\\n            // Safe approval\\n            IERC20(asset).safeApprove(cToken, 0);\\n            IERC20(asset).safeApprove(cToken, type(uint256).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal method to respond to the addition of new asset / cTokens\\n     *      We need to approve the cToken and give it permission to spend the asset\\n     * @param _asset Address of the asset to approve\\n     * @param _cToken The cToken for the approval\\n     */\\n    function _abstractSetPToken(address _asset, address _cToken)\\n        internal\\n        override\\n    {\\n        // Safe approval\\n        IERC20(_asset).safeApprove(_cToken, 0);\\n        IERC20(_asset).safeApprove(_cToken, type(uint256).max);\\n    }\\n\\n    /**\\n     * @dev Get the SafeBox token wrap ISafeBox interface for this asset.\\n     *      Fails if the SafeBbox doesn't exist in our mappings.\\n     * @param _asset Address of the asset\\n     * @return Corresponding SafeBox to this asset\\n     */\\n    function _getSafeBoxFor(address _asset) internal view returns (ISafeBox) {\\n        address safeBox = assetToPToken[_asset];\\n        require(safeBox != address(0), \\\"safeBox does not exist\\\");\\n        return ISafeBox(safeBox);\\n    }\\n\\n    /**\\n     * @dev Get the cToken wrapped in the ICERC20 interface for this asset.\\n     *      Fails if the cToken doesn't exist in our mappings.\\n     * @param _asset Address of the asset\\n     * @return Corresponding cToken to this asset\\n     */\\n    function _getCTokenFor(address _asset) internal view returns (ICERC20) {\\n        ISafeBox safeBox = _getSafeBoxFor(_asset);\\n        return ICERC20(safeBox.cToken());\\n    }\\n\\n    /**\\n     * @dev Converts an underlying amount into cToken amount\\n     *      cTokenAmt = (underlying * 1e18) / exchangeRate\\n     * @param _cToken     cToken for which to change\\n     * @param _underlying Amount of underlying to convert\\n     * @return amount     Equivalent amount of cTokens\\n     */\\n    function _convertUnderlyingToCToken(ICERC20 _cToken, uint256 _underlying)\\n        internal\\n        view\\n        returns (uint256 amount)\\n    {\\n        uint256 exchangeRate = _cToken.exchangeRateStored();\\n        // e.g. 1e18*1e18 / 205316390724364402565641705 = 50e8\\n        // e.g. 1e8*1e18 / 205316390724364402565641705 = 0.45 or 0\\n        amount = (_underlying * 1e18) / exchangeRate;\\n    }\\n\\n    /**\\n     * @dev Sets the reward amount and merkle proof from off-chain.\\n     * @param _rewardTokenAddress The reward token address\\n     * @param proof the MerkleProof provided by AlphaHomora\\n     * @param amount The accumulated (total) amount of rewards.\\n     */\\n    function setProofAndAmount(\\n        address _rewardTokenAddress,\\n        bytes32[] calldata proof,\\n        uint256 amount\\n    ) external onlyGovernorOrStrategist {\\n        _proofs[_rewardTokenAddress] = proof;\\n        _amounts[_rewardTokenAddress] = amount;\\n    }\\n\\n    function getProofAndAmount(address _rewardTokenAddress)\\n        external\\n        view\\n        returns (bytes32[] memory, uint256)\\n    {\\n        return (_proofs[_rewardTokenAddress], _amounts[_rewardTokenAddress]);\\n    }\\n\\n    modifier onlyGovernorOrStrategist() {\\n        require(\\n            msg.sender == IVault(vaultAddress).strategistAddr() || isGovernor(),\\n            \\\"Caller is not the Strategist or Governor\\\"\\n        );\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x01b9feb529b148bbeea2eb444d4d4b33eed4fb27852f032b626a5da7145322fb\",\"license\":\"BUSL-1.1\"},\"contracts/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(\\n            initializing || !initialized,\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n\\n        bool isTopLevelCall = !initializing;\\n        if (isTopLevelCall) {\\n            initializing = true;\\n            initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            initializing = false;\\n        }\\n    }\\n\\n    uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0xff2a83835ed8984e10338905bc31dbcaeeabdfc0e58d49257389cb1e5a3b9d8a\",\"license\":\"agpl-3.0\"},\"contracts/utils/InitializableAbstractStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport { Initializable } from \\\"../utils/Initializable.sol\\\";\\nimport { Governable } from \\\"../governance/Governable.sol\\\";\\n\\nabstract contract InitializableAbstractStrategy is Initializable, Governable {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    event PTokenAdded(address indexed _asset, address _pToken);\\n    event PTokenRemoved(address indexed _asset, address _pToken);\\n    event Deposit(address indexed _asset, address _pToken, uint256 _amount);\\n    event Withdrawal(address indexed _asset, address _pToken, uint256 _amount);\\n    event RewardTokenCollected(\\n        address recipient,\\n        address rewardToken,\\n        uint256 amount\\n    );\\n    event RewardTokenAddressesUpdated(\\n        address[] _oldAddresses,\\n        address[] _newAddresses\\n    );\\n    event RewardTokenAddressUpdated(address _oldAddress, address _newAddress);\\n    event RewardLiquidationThresholdUpdated(\\n        uint256 _oldThreshold,\\n        uint256 _newThreshold\\n    );\\n\\n    // Core address for the given platform\\n    address public platformAddress;\\n\\n    address public vaultAddress;\\n\\n    // asset => pToken (Platform Specific Token Address)\\n    mapping(address => address) public assetToPToken;\\n\\n    // Full list of all assets supported here\\n    address[] internal assetsMapped;\\n\\n    // Deprecated: Reward token address\\n    // slither-disable-next-line constable-states\\n    address public _deprecated_rewardTokenAddress;\\n\\n    // Liquidation threshold for any of rewardTokens\\n    uint256 public rewardLiquidationThreshold;\\n\\n    // Reward token addresses\\n    address[] public rewardTokenAddresses;\\n\\n    // Reserved for future expansion\\n    int256[99] private _reserved;\\n\\n    /**\\n     * @dev Internal initialize function, to set up initial internal state\\n     * @param _platformAddress Generic platform address\\n     * @param _vaultAddress Address of the Vault\\n     * @param _rewardTokenAddresses Addresses of reward tokens for platform\\n     * @param _assets Addresses of initial supported assets\\n     * @param _pTokens Platform Token corresponding addresses\\n     */\\n    function initialize(\\n        address _platformAddress,\\n        address _vaultAddress,\\n        address[] calldata _rewardTokenAddresses,\\n        address[] calldata _assets,\\n        address[] calldata _pTokens\\n    ) external onlyGovernor initializer {\\n        InitializableAbstractStrategy._initialize(\\n            _platformAddress,\\n            _vaultAddress,\\n            _rewardTokenAddresses,\\n            _assets,\\n            _pTokens\\n        );\\n    }\\n\\n    function _initialize(\\n        address _platformAddress,\\n        address _vaultAddress,\\n        address[] calldata _rewardTokenAddresses,\\n        address[] memory _assets,\\n        address[] memory _pTokens\\n    ) internal {\\n        platformAddress = _platformAddress;\\n        vaultAddress = _vaultAddress;\\n        rewardTokenAddresses = _rewardTokenAddresses;\\n        uint256 assetCount = _assets.length;\\n        require(assetCount == _pTokens.length, \\\"Invalid input arrays\\\");\\n        for (uint256 i = 0; i < assetCount; i++) {\\n            _setPTokenAddress(_assets[i], _pTokens[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Collect accumulated reward token and send to Vault.\\n     */\\n    function collectRewardTokens() external virtual onlyVault nonReentrant {\\n        _collectRewardTokens();\\n    }\\n\\n    function _collectRewardTokens() internal {\\n        for (uint256 i = 0; i < rewardTokenAddresses.length; i++) {\\n            IERC20 rewardToken = IERC20(rewardTokenAddresses[i]);\\n            uint256 balance = rewardToken.balanceOf(address(this));\\n            emit RewardTokenCollected(\\n                vaultAddress,\\n                rewardTokenAddresses[i],\\n                balance\\n            );\\n            rewardToken.safeTransfer(vaultAddress, balance);\\n        }\\n    }\\n\\n    /**\\n     * @dev Verifies that the caller is the Vault.\\n     */\\n    modifier onlyVault() {\\n        require(msg.sender == vaultAddress, \\\"Caller is not the Vault\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Verifies that the caller is the Vault or Governor.\\n     */\\n    modifier onlyVaultOrGovernor() {\\n        require(\\n            msg.sender == vaultAddress || msg.sender == governor(),\\n            \\\"Caller is not the Vault or Governor\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Set the reward token addresses.\\n     * @param _rewardTokenAddresses Address array of the reward tokens\\n     */\\n    function setRewardTokenAddresses(address[] calldata _rewardTokenAddresses)\\n        external\\n        onlyGovernor\\n    {\\n        for (uint256 i = 0; i < _rewardTokenAddresses.length; i++) {\\n            require(\\n                _rewardTokenAddresses[i] != address(0),\\n                \\\"Can not set an empty address as a reward token\\\"\\n            );\\n        }\\n\\n        emit RewardTokenAddressesUpdated(\\n            rewardTokenAddresses,\\n            _rewardTokenAddresses\\n        );\\n        rewardTokenAddresses = _rewardTokenAddresses;\\n    }\\n\\n    /**\\n     * @dev Set the reward token liquidation threshold.\\n     * @param _threshold Threshold amount in decimals of reward token that will\\n     * cause the Vault to claim and withdrawAll on allocate() calls.\\n     */\\n    function setRewardLiquidationThreshold(uint256 _threshold)\\n        external\\n        onlyGovernor\\n    {\\n        emit RewardLiquidationThresholdUpdated(\\n            rewardLiquidationThreshold,\\n            _threshold\\n        );\\n        rewardLiquidationThreshold = _threshold;\\n    }\\n\\n    /**\\n     * @dev Get the reward token addresses.\\n     * @return address[] the reward token addresses.\\n     */\\n    function getRewardTokenAddresses()\\n        external\\n        view\\n        returns (address[] memory)\\n    {\\n        return rewardTokenAddresses;\\n    }\\n\\n    /**\\n     * @dev Provide support for asset by passing its pToken address.\\n     *      This method can only be called by the system Governor\\n     * @param _asset    Address for the asset\\n     * @param _pToken   Address for the corresponding platform token\\n     */\\n    function setPTokenAddress(address _asset, address _pToken)\\n        external\\n        onlyGovernor\\n    {\\n        _setPTokenAddress(_asset, _pToken);\\n    }\\n\\n    /**\\n     * @dev Remove a supported asset by passing its index.\\n     *      This method can only be called by the system Governor\\n     * @param _assetIndex Index of the asset to be removed\\n     */\\n    function removePToken(uint256 _assetIndex) external onlyGovernor {\\n        require(_assetIndex < assetsMapped.length, \\\"Invalid index\\\");\\n        address asset = assetsMapped[_assetIndex];\\n        address pToken = assetToPToken[asset];\\n\\n        if (_assetIndex < assetsMapped.length - 1) {\\n            assetsMapped[_assetIndex] = assetsMapped[assetsMapped.length - 1];\\n        }\\n        assetsMapped.pop();\\n        assetToPToken[asset] = address(0);\\n\\n        emit PTokenRemoved(asset, pToken);\\n    }\\n\\n    /**\\n     * @dev Provide support for asset by passing its pToken address.\\n     *      Add to internal mappings and execute the platform specific,\\n     * abstract method `_abstractSetPToken`\\n     * @param _asset    Address for the asset\\n     * @param _pToken   Address for the corresponding platform token\\n     */\\n    function _setPTokenAddress(address _asset, address _pToken) internal {\\n        require(assetToPToken[_asset] == address(0), \\\"pToken already set\\\");\\n        require(\\n            _asset != address(0) && _pToken != address(0),\\n            \\\"Invalid addresses\\\"\\n        );\\n\\n        assetToPToken[_asset] = _pToken;\\n        assetsMapped.push(_asset);\\n\\n        emit PTokenAdded(_asset, _pToken);\\n\\n        _abstractSetPToken(_asset, _pToken);\\n    }\\n\\n    /**\\n     * @dev Transfer token to governor. Intended for recovering tokens stuck in\\n     *      strategy contracts, i.e. mistaken sends.\\n     * @param _asset Address for the asset\\n     * @param _amount Amount of the asset to transfer\\n     */\\n    function transferToken(address _asset, uint256 _amount)\\n        public\\n        onlyGovernor\\n    {\\n        IERC20(_asset).safeTransfer(governor(), _amount);\\n    }\\n\\n    /***************************************\\n                 Abstract\\n    ****************************************/\\n\\n    function _abstractSetPToken(address _asset, address _pToken)\\n        internal\\n        virtual;\\n\\n    function safeApproveAllTokens() external virtual;\\n\\n    /**\\n     * @dev Deposit an amount of asset into the platform\\n     * @param _asset               Address for the asset\\n     * @param _amount              Units of asset to deposit\\n     */\\n    function deposit(address _asset, uint256 _amount) external virtual;\\n\\n    /**\\n     * @dev Deposit balance of all supported assets into the platform\\n     */\\n    function depositAll() external virtual;\\n\\n    /**\\n     * @dev Withdraw an amount of asset from the platform.\\n     * @param _recipient         Address to which the asset should be sent\\n     * @param _asset             Address of the asset\\n     * @param _amount            Units of asset to withdraw\\n     */\\n    function withdraw(\\n        address _recipient,\\n        address _asset,\\n        uint256 _amount\\n    ) external virtual;\\n\\n    /**\\n     * @dev Withdraw all assets from strategy sending assets to Vault.\\n     */\\n    function withdrawAll() external virtual;\\n\\n    /**\\n     * @dev Get the total asset value held in the platform.\\n     *      This includes any interest that was generated since depositing.\\n     * @param _asset      Address of the asset\\n     * @return balance    Total value of the asset in the platform\\n     */\\n    function checkBalance(address _asset)\\n        external\\n        view\\n        virtual\\n        returns (uint256 balance);\\n\\n    /**\\n     * @dev Check if an asset is supported.\\n     * @param _asset    Address of the asset\\n     * @return bool     Whether asset is supported\\n     */\\n    function supportsAsset(address _asset) external view virtual returns (bool);\\n}\\n\",\"keccak256\":\"0xbf906558bc1c48829652b5286a0aa01ba65984b3e0a8076bfb6ba357a9e68846\",\"license\":\"agpl-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610028336000805160206200305b83398151915255565b6000805160206200305b833981519152546040516001600160a01b03909116906000907fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a908290a3612fdb80620000806000396000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c8063853828b611610104578063c7af3352116100a2578063dbe55e5611610071578063dbe55e56146103df578063de5f6268146103f2578063e29f7bc1146103fa578063f6ca71b01461040d57600080fd5b8063c7af33521461039e578063cd3b0212146103a6578063d38bfff4146103b9578063d9caed12146103cc57600080fd5b806396d538bb116100de57806396d538bb14610332578063a8a3f0fc14610345578063aa388af614610358578063ad1728cb1461039657600080fd5b8063853828b6146103045780639136616a1461030c5780639688d2fc1461031f57600080fd5b806347e7ef24116101715780635a063f631161014b5780635a063f63146102ce5780635d36b190146102d65780635f515226146102de5780637b2d9b2c146102f157600080fd5b806347e7ef2414610283578063540ea49a146102965780635653b414146102b757600080fd5b80631072cbea116101ad5780631072cbea146102375780632e6552011461024a57806336ec89991461025d578063430bf08a1461027057600080fd5b80630c340a24146101d45780630ed57b3a146101f95780630fc3b4c41461020e575b600080fd5b6101dc610422565b6040516001600160a01b0390911681526020015b60405180910390f35b61020c610207366004612890565b61043f565b005b6101dc61021c366004612856565b6035602052600090815260409020546001600160a01b031681565b61020c610245366004612b0d565b61047a565b6037546101dc906001600160a01b031681565b61020c61026b366004612ab1565b6104ba565b6034546101dc906001600160a01b031681565b61020c610291366004612b0d565b610604565b6102a96102a4366004612856565b610677565b6040516101f0929190612d32565b6102c060385481565b6040519081526020016101f0565b61020c6106f5565b61020c610b68565b6102c06102ec366004612856565b610c0e565b6101dc6102ff366004612b9d565b610cca565b61020c610cf4565b61020c61031a366004612b9d565b610fdd565b61020c61032d3660046128c9565b6111a8565b61020c610340366004612b39565b6112b1565b61020c610353366004612988565b6113d7565b610386610366366004612856565b6001600160a01b0390811660009081526035602052604090205416151590565b60405190151581526020016101f0565b61020c61153e565b6103866115c4565b61020c6103b4366004612b9d565b6115f5565b61020c6103c7366004612856565b61165a565b61020c6103da366004612a70565b6116fe565b6033546101dc906001600160a01b031681565b61020c611b4b565b6101dc610408366004612b9d565b611c9d565b610415611cad565b6040516101f09190612c4d565b600061043a600080516020612f868339815191525490565b905090565b6104476115c4565b61046c5760405162461bcd60e51b815260040161046390612dbe565b60405180910390fd5b6104768282611d0f565b5050565b6104826115c4565b61049e5760405162461bcd60e51b815260040161046390612dbe565b6104766104a9610422565b6001600160a01b0384169083611e74565b603460009054906101000a90046001600160a01b03166001600160a01b031663570d8e1d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561050857600080fd5b505afa15801561051c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105409190612873565b6001600160a01b0316336001600160a01b0316148061056257506105626115c4565b6105bf5760405162461bcd60e51b815260206004820152602860248201527f43616c6c6572206973206e6f74207468652053747261746567697374206f722060448201526723b7bb32b93737b960c11b6064820152608401610463565b6001600160a01b0384166000908152609e602052604090206105e2908484612747565b506001600160a01b039093166000908152609f60205260409020929092555050565b6034546001600160a01b0316331461062e5760405162461bcd60e51b815260040161046390612d87565b600080516020612f66833981519152805460028114156106605760405162461bcd60e51b815260040161046390612e43565b6002825561066e8484611ed7565b50600190555050565b6001600160a01b0381166000908152609e60209081526040808320609f835281842054815483518186028101860190945280845260609594929391928491908301828280156106e557602002820191906000526020600020905b8154815260200190600101908083116106d1575b5050505050915091509150915091565b6034546001600160a01b0316331461071f5760405162461bcd60e51b815260040161046390612d87565b600080516020612f66833981519152805460028114156107515760405162461bcd60e51b815260040161046390612e43565b6002825560005b603954811015610b60576000609d828154811061077757610777612f3a565b600091825260209091200154603980546001600160a01b03909216925090839081106107a5576107a5612f3a565b9060005260206000200160009054906101000a90046001600160a01b03166001600160a01b0316816001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561080557600080fd5b505afa158015610819573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083d9190612873565b6001600160a01b03161461085057600080fd5b6000609f60006039858154811061086957610869612f3a565b60009182526020808320909101546001600160a01b0316835282019290925260400190205490508061089c575050610b4e565b6000609e6000603986815481106108b5576108b5612f3a565b60009182526020808320909101546001600160a01b0316835282810193909352604091820190208054825181850281018501909352808352919290919083018282801561092157602002820191906000526020600020905b81548152602001906001019080831161090d575b505060405163c884ef8360e01b81523060048201529394506000936001600160a01b038816935063c884ef839250602401905060206040518083038186803b15801561096c57600080fd5b505afa158015610980573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a49190612bb6565b905082811015610b4957604051630f44fe1d60e21b81526001600160a01b03851690633d13f874906109de90309087908790600401612c26565b600060405180830381600087803b1580156109f857600080fd5b505af1158015610a0c573d6000803e3d6000fd5b50505050600060398681548110610a2557610a25612f3a565b60009182526020822001546040516370a0823160e01b81523060048201526001600160a01b03909116925082906370a082319060240160206040518083038186803b158015610a7357600080fd5b505afa158015610a87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aab9190612bb6565b603454603980549293507ff6c07a063ed4e63808eb8da7112d46dbcd38de2b40a73dbcc9353c5a94c72353926001600160a01b03909216918a908110610af357610af3612f3a565b60009182526020918290200154604080516001600160a01b0394851681529390911691830191909152810183905260600160405180910390a1603454610b46906001600160a01b03848116911683611e74565b50505b505050505b80610b5881612ef3565b915050610758565b505060019055565b7f1973cae3d8695cb4c31dce9679edb790944900898ecc70570ba365e7de143b0a546001600160a01b0316336001600160a01b031614610c035760405162461bcd60e51b815260206004820152603060248201527f4f6e6c79207468652070656e64696e6720476f7665726e6f722063616e20636f60448201526f6d706c6574652074686520636c61696d60801b6064820152608401610463565b610c0c33611fd4565b565b6001600160a01b0380821660009081526035602052604081205490911680610c3557600080fd5b6000610c4084612098565b90506000816001600160a01b03166369e527da6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c7d57600080fd5b505afa158015610c91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb59190612873565b9050610cc18382612101565b95945050505050565b60398181548110610cda57600080fd5b6000918252602090912001546001600160a01b0316905081565b6034546001600160a01b0316331480610d255750610d10610422565b6001600160a01b0316336001600160a01b0316145b610d7d5760405162461bcd60e51b815260206004820152602360248201527f43616c6c6572206973206e6f7420746865205661756c74206f7220476f7665726044820152623737b960e91b6064820152608401610463565b600080516020612f6683398151915280546002811415610daf5760405162461bcd60e51b815260040161046390612e43565b6002825560005b603654811015610b6057600060368281548110610dd557610dd5612f3a565b6000918252602082200154603680546001600160a01b039092169350610e1f9185908110610e0557610e05612f3a565b6000918252602090912001546001600160a01b0316612098565b90506000610e5360368581548110610e3957610e39612f3a565b6000918252602090912001546001600160a01b0316612211565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a082319060240160206040518083038186803b158015610e9857600080fd5b505afa158015610eac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed09190612bb6565b90508015610fc657604051632e1a7d4d60e01b8152600481018290526001600160a01b03841690632e1a7d4d90602401600060405180830381600087803b158015610f1a57600080fd5b505af1158015610f2e573d6000803e3d6000fd5b50506034546040516370a0823160e01b8152306004820152610fc693506001600160a01b039182169250908716906370a082319060240160206040518083038186803b158015610f7d57600080fd5b505afa158015610f91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb59190612bb6565b6001600160a01b0387169190611e74565b505050508080610fd590612ef3565b915050610db6565b610fe56115c4565b6110015760405162461bcd60e51b815260040161046390612dbe565b60365481106110425760405162461bcd60e51b815260206004820152600d60248201526c092dcecc2d8d2c840d2dcc8caf609b1b6044820152606401610463565b60006036828154811061105757611057612f3a565b60009182526020808320909101546001600160a01b0390811680845260359092526040909220546036549193509091169061109490600190612eac565b83101561111657603680546110ab90600190612eac565b815481106110bb576110bb612f3a565b600091825260209091200154603680546001600160a01b0390921691859081106110e7576110e7612f3a565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b603680548061112757611127612f24565b60008281526020808220600019908401810180546001600160a01b031990811690915593019093556001600160a01b038581168083526035855260409283902080549094169093559051908416815290917f16b7600acff27e39a8a96056b3d533045298de927507f5c1d97e4accde60488c910160405180910390a2505050565b6111b06115c4565b6111cc5760405162461bcd60e51b815260040161046390612dbe565b600054610100900460ff16806111e5575060005460ff16155b6112015760405162461bcd60e51b815260040161046390612df5565b600054610100900460ff16158015611223576000805461ffff19166101011790555b6112948989898989898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808d0282810182019093528c82529093508c92508b91829185019084908082843760009201919091525061229792505050565b80156112a6576000805461ff00191690555b505050505050505050565b6112b96115c4565b6112d55760405162461bcd60e51b815260040161046390612dbe565b60005b818110156113895760008383838181106112f4576112f4612f3a565b90506020020160208101906113099190612856565b6001600160a01b031614156113775760405162461bcd60e51b815260206004820152602e60248201527f43616e206e6f742073657420616e20656d70747920616464726573732061732060448201526d30903932bbb0b932103a37b5b2b760911b6064820152608401610463565b8061138181612ef3565b9150506112d8565b507f04c0b9649497d316554306e53678d5f5f5dbc3a06f97dec13ff4cfe98b986bbc603983836040516113be93929190612c9a565b60405180910390a16113d260398383612792565b505050565b6113df6115c4565b6113fb5760405162461bcd60e51b815260040161046390612dbe565b600054610100900460ff1680611414575060005460ff16155b6114305760405162461bcd60e51b815260040161046390612df5565b600054610100900460ff16158015611452576000805461ffff19166101011790555b8782146114a15760405162461bcd60e51b815260206004820152601d60248201527f6e6f7420313a3120726577617264732d746f2d696e63656e74697665730000006044820152606401610463565b6114ad609d8484612792565b5061151f8b8b8b8b8b8b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808f0282810182019093528e82529093508e92508d91829185019084908082843760009201919091525061229792505050565b8015611531576000805461ff00191690555b5050505050505050505050565b60365460005b818110156104765760006036828154811061156157611561612f3a565b60009182526020808320909101546001600160a01b039081168084526035909252604083205491935016906115999083908390612380565b6115af6001600160a01b03831682600019612380565b505080806115bc90612ef3565b915050611544565b60006115dc600080516020612f868339815191525490565b6001600160a01b0316336001600160a01b031614905090565b6115fd6115c4565b6116195760405162461bcd60e51b815260040161046390612dbe565b60385460408051918252602082018390527f01538952e8f491e3569a11bf3935ca2fa917ea85ec938dac52e696fbb76d8cc6910160405180910390a1603855565b6116626115c4565b61167e5760405162461bcd60e51b815260040161046390612dbe565b6116a6817f1973cae3d8695cb4c31dce9679edb790944900898ecc70570ba365e7de143b0a55565b806001600160a01b03166116c6600080516020612f868339815191525490565b6001600160a01b03167fa39cc5eb22d0f34d8beaefee8a3f17cc229c1a1d1ef87a5ad47313487b1c4f0d60405160405180910390a350565b6034546001600160a01b031633146117285760405162461bcd60e51b815260040161046390612d87565b600080516020612f668339815191528054600281141561175a5760405162461bcd60e51b815260040161046390612e43565b60028255600083116117ae5760405162461bcd60e51b815260206004820152601760248201527f4d75737420776974686472617720736f6d657468696e670000000000000000006044820152606401610463565b6001600160a01b0385166117fd5760405162461bcd60e51b8152602060048201526016602482015275135d5cdd081cdc1958da599e481c9958da5c1a595b9d60521b6044820152606401610463565b600061180885612098565b9050600061181586612211565b9050600061182382876124a4565b604080516001600160a01b03868116825260208201849052929350918916917f2717ead6b9200dd235aad468c9809ea400fe33ac69b5bfaa6d3e90fc922b6398910160405180910390a2806118bc57604080516001600160a01b0389168152602081018890527f2ca0d37ecfc1b8853f4bc276c69586250b3978c1d467c05d6c143966026724ec910160405180910390a1505050611b41565b866001600160a01b03167f2717ead6b9200dd235aad468c9809ea400fe33ac69b5bfaa6d3e90fc922b6398836001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561192257600080fd5b505af1158015611936573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061195a9190612873565b604080516001600160a01b039092168252602082018a90520160405180910390a26040516370a0823160e01b81523060048201526000906001600160a01b038916906370a082319060240160206040518083038186803b1580156119bd57600080fd5b505afa1580156119d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119f59190612bb6565b604051632e1a7d4d60e01b8152600481018490529091506001600160a01b03851690632e1a7d4d90602401600060405180830381600087803b158015611a3a57600080fd5b505af1158015611a4e573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092506001600160a01b038b1691506370a082319060240160206040518083038186803b158015611a9457600080fd5b505afa158015611aa8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611acc9190612bb6565b9050611ad88282612eac565b881115611b275760405162461bcd60e51b815260206004820152601760248201527f446964206e6f7420776974686472617720656e6f7567680000000000000000006044820152606401610463565b611b3b6001600160a01b038a168b8a611e74565b50505050505b5060019055505050565b6034546001600160a01b03163314611b755760405162461bcd60e51b815260040161046390612d87565b600080516020612f6683398151915280546002811415611ba75760405162461bcd60e51b815260040161046390612e43565b6002825560005b603654811015610b6057600060368281548110611bcd57611bcd612f3a565b6000918252602090912001546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015611c1957600080fd5b505afa158015611c2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c519190612bb6565b90508015611c8a57611c8a60368381548110611c6f57611c6f612f3a565b6000918252602090912001546001600160a01b031682611ed7565b5080611c9581612ef3565b915050611bae565b609d8181548110610cda57600080fd5b60606039805480602002602001604051908101604052809291908181526020018280548015611d0557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611ce7575b5050505050905090565b6001600160a01b038281166000908152603560205260409020541615611d6c5760405162461bcd60e51b81526020600482015260126024820152711c151bdad95b88185b1c9958591e481cd95d60721b6044820152606401610463565b6001600160a01b03821615801590611d8c57506001600160a01b03811615155b611dcc5760405162461bcd60e51b8152602060048201526011602482015270496e76616c69642061646472657373657360781b6044820152606401610463565b6001600160a01b03828116600081815260356020908152604080832080549587166001600160a01b031996871681179091556036805460018101825594527f4a11f94e20a93c79f6ec743a1954ec4fc2c08429ae2122118bf234b2185c81b890930180549095168417909455925190815290917fef6485b84315f9b1483beffa32aae9a0596890395e3d7521f1c5fbb51790e765910160405180910390a2610476828261253f565b6040516001600160a01b0383166024820152604481018290526113d290849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261256a565b60008111611f205760405162461bcd60e51b81526020600482015260166024820152754d757374206465706f73697420736f6d657468696e6760501b6044820152606401610463565b6000611f2b83612098565b604080516001600160a01b03808416825260208201869052929350918516917f5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f62910160405180910390a260405163b6b55f2560e01b8152600481018390526001600160a01b0382169063b6b55f2590602401600060405180830381600087803b158015611fb757600080fd5b505af1158015611fcb573d6000803e3d6000fd5b50505050505050565b6001600160a01b03811661202a5760405162461bcd60e51b815260206004820152601a60248201527f4e657720476f7665726e6f7220697320616464726573732830290000000000006044820152606401610463565b806001600160a01b031661204a600080516020612f868339815191525490565b6001600160a01b03167fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a60405160405180910390a361209581600080516020612f8683398151915255565b50565b6001600160a01b03808216600090815260356020526040812054909116806120fb5760405162461bcd60e51b81526020600482015260166024820152751cd85999509bde08191bd95cc81b9bdd08195e1a5cdd60521b6044820152606401610463565b92915050565b6040516370a0823160e01b815230600482015260009081906001600160a01b038516906370a082319060240160206040518083038186803b15801561214557600080fd5b505afa158015612159573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061217d9190612bb6565b90506000836001600160a01b031663182df0f56040518163ffffffff1660e01b815260040160206040518083038186803b1580156121ba57600080fd5b505afa1580156121ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121f29190612bb6565b9050670de0b6b3a76400006122078284612e8d565b610cc19190612e6b565b60008061221d83612098565b9050806001600160a01b03166369e527da6040518163ffffffff1660e01b815260040160206040518083038186803b15801561225857600080fd5b505afa15801561226c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122909190612873565b9392505050565b603380546001600160a01b038089166001600160a01b03199283161790925560348054928816929091169190911790556122d360398585612792565b5081518151811461231d5760405162461bcd60e51b8152602060048201526014602482015273496e76616c696420696e7075742061727261797360601b6044820152606401610463565b60005b818110156123765761236484828151811061233d5761233d612f3a565b602002602001015184838151811061235757612357612f3a565b6020026020010151611d0f565b8061236e81612ef3565b915050612320565b5050505050505050565b8015806124095750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b1580156123cf57600080fd5b505afa1580156123e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124079190612bb6565b155b6124745760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610463565b6040516001600160a01b0383166024820152604481018290526113d290849063095ea7b360e01b90606401611ea0565b600080836001600160a01b031663182df0f56040518163ffffffff1660e01b815260040160206040518083038186803b1580156124e057600080fd5b505afa1580156124f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125189190612bb6565b90508061252d84670de0b6b3a7640000612e8d565b6125379190612e6b565b949350505050565b6125546001600160a01b038316826000612380565b6104766001600160a01b03831682600019612380565b60006125bf826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661263c9092919063ffffffff16565b8051909150156113d257808060200190518101906125dd9190612b7b565b6113d25760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610463565b6060612537848460008585843b6126955760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610463565b600080866001600160a01b031685876040516126b19190612c0a565b60006040518083038185875af1925050503d80600081146126ee576040519150601f19603f3d011682016040523d82523d6000602084013e6126f3565b606091505b509150915061270382828661270e565b979650505050505050565b6060831561271d575081612290565b82511561272d5782518084602001fd5b8160405162461bcd60e51b81526004016104639190612d54565b828054828255906000526020600020908101928215612782579160200282015b82811115612782578235825591602001919060010190612767565b5061278e9291506127e5565b5090565b828054828255906000526020600020908101928215612782579160200282015b828111156127825781546001600160a01b0319166001600160a01b038435161782556020909201916001909101906127b2565b5b8082111561278e57600081556001016127e6565b803561280581612f50565b919050565b60008083601f84011261281c57600080fd5b50813567ffffffffffffffff81111561283457600080fd5b6020830191508360208260051b850101111561284f57600080fd5b9250929050565b60006020828403121561286857600080fd5b813561229081612f50565b60006020828403121561288557600080fd5b815161229081612f50565b600080604083850312156128a357600080fd5b82356128ae81612f50565b915060208301356128be81612f50565b809150509250929050565b60008060008060008060008060a0898b0312156128e557600080fd5b88356128f081612f50565b9750602089013561290081612f50565b9650604089013567ffffffffffffffff8082111561291d57600080fd5b6129298c838d0161280a565b909850965060608b013591508082111561294257600080fd5b61294e8c838d0161280a565b909650945060808b013591508082111561296757600080fd5b506129748b828c0161280a565b999c989b5096995094979396929594505050565b60008060008060008060008060008060c08b8d0312156129a757600080fd5b6129b08b6127fa565b99506129be60208c016127fa565b985060408b013567ffffffffffffffff808211156129db57600080fd5b6129e78e838f0161280a565b909a50985060608d0135915080821115612a0057600080fd5b612a0c8e838f0161280a565b909850965060808d0135915080821115612a2557600080fd5b612a318e838f0161280a565b909650945060a08d0135915080821115612a4a57600080fd5b50612a578d828e0161280a565b915080935050809150509295989b9194979a5092959850565b600080600060608486031215612a8557600080fd5b8335612a9081612f50565b92506020840135612aa081612f50565b929592945050506040919091013590565b60008060008060608587031215612ac757600080fd5b8435612ad281612f50565b9350602085013567ffffffffffffffff811115612aee57600080fd5b612afa8782880161280a565b9598909750949560400135949350505050565b60008060408385031215612b2057600080fd5b8235612b2b81612f50565b946020939093013593505050565b60008060208385031215612b4c57600080fd5b823567ffffffffffffffff811115612b6357600080fd5b612b6f8582860161280a565b90969095509350505050565b600060208284031215612b8d57600080fd5b8151801515811461229057600080fd5b600060208284031215612baf57600080fd5b5035919050565b600060208284031215612bc857600080fd5b5051919050565b600081518084526020808501945080840160005b83811015612bff57815187529582019590820190600101612be3565b509495945050505050565b60008251612c1c818460208701612ec3565b9190910192915050565b60018060a01b0384168152826020820152606060408201526000610cc16060830184612bcf565b6020808252825182820181905260009190848201906040850190845b81811015612c8e5783516001600160a01b031683529284019291840191600101612c69565b50909695505050505050565b6000604082016040835280865480835260608501915087600052602092508260002060005b82811015612ce45781546001600160a01b031684529284019260019182019101612cbf565b505050838103828501528481528590820160005b86811015612d26578235612d0b81612f50565b6001600160a01b031682529183019190830190600101612cf8565b50979650505050505050565b604081526000612d456040830185612bcf565b90508260208301529392505050565b6020815260008251806020840152612d73816040850160208701612ec3565b601f01601f19169190910160400192915050565b60208082526017908201527f43616c6c6572206973206e6f7420746865205661756c74000000000000000000604082015260600190565b6020808252601a908201527f43616c6c6572206973206e6f742074686520476f7665726e6f72000000000000604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252600e908201526d1499595b9d1c985b9d0818d85b1b60921b604082015260600190565b600082612e8857634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615612ea757612ea7612f0e565b500290565b600082821015612ebe57612ebe612f0e565b500390565b60005b83811015612ede578181015183820152602001612ec6565b83811115612eed576000848401525b50505050565b6000600019821415612f0757612f07612f0e565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6001600160a01b038116811461209557600080fdfe218adab1852f0bdeacb3305483cf296dbcf6abf496f646284463c8e6a43fa665fe7bb572d5723516ce4fe7a6a664f5adb38f5714efcd271411ed70a34d3ef2f7a2646970667358221220bb2054c00e56f76a66cd65ad8a9d7ecadbfcb0f79a10522c5c3bf690463e3d9364736f6c63430008070033fe7bb572d5723516ce4fe7a6a664f5adb38f5714efcd271411ed70a34d3ef2f7",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101cf5760003560e01c8063853828b611610104578063c7af3352116100a2578063dbe55e5611610071578063dbe55e56146103df578063de5f6268146103f2578063e29f7bc1146103fa578063f6ca71b01461040d57600080fd5b8063c7af33521461039e578063cd3b0212146103a6578063d38bfff4146103b9578063d9caed12146103cc57600080fd5b806396d538bb116100de57806396d538bb14610332578063a8a3f0fc14610345578063aa388af614610358578063ad1728cb1461039657600080fd5b8063853828b6146103045780639136616a1461030c5780639688d2fc1461031f57600080fd5b806347e7ef24116101715780635a063f631161014b5780635a063f63146102ce5780635d36b190146102d65780635f515226146102de5780637b2d9b2c146102f157600080fd5b806347e7ef2414610283578063540ea49a146102965780635653b414146102b757600080fd5b80631072cbea116101ad5780631072cbea146102375780632e6552011461024a57806336ec89991461025d578063430bf08a1461027057600080fd5b80630c340a24146101d45780630ed57b3a146101f95780630fc3b4c41461020e575b600080fd5b6101dc610422565b6040516001600160a01b0390911681526020015b60405180910390f35b61020c610207366004612890565b61043f565b005b6101dc61021c366004612856565b6035602052600090815260409020546001600160a01b031681565b61020c610245366004612b0d565b61047a565b6037546101dc906001600160a01b031681565b61020c61026b366004612ab1565b6104ba565b6034546101dc906001600160a01b031681565b61020c610291366004612b0d565b610604565b6102a96102a4366004612856565b610677565b6040516101f0929190612d32565b6102c060385481565b6040519081526020016101f0565b61020c6106f5565b61020c610b68565b6102c06102ec366004612856565b610c0e565b6101dc6102ff366004612b9d565b610cca565b61020c610cf4565b61020c61031a366004612b9d565b610fdd565b61020c61032d3660046128c9565b6111a8565b61020c610340366004612b39565b6112b1565b61020c610353366004612988565b6113d7565b610386610366366004612856565b6001600160a01b0390811660009081526035602052604090205416151590565b60405190151581526020016101f0565b61020c61153e565b6103866115c4565b61020c6103b4366004612b9d565b6115f5565b61020c6103c7366004612856565b61165a565b61020c6103da366004612a70565b6116fe565b6033546101dc906001600160a01b031681565b61020c611b4b565b6101dc610408366004612b9d565b611c9d565b610415611cad565b6040516101f09190612c4d565b600061043a600080516020612f868339815191525490565b905090565b6104476115c4565b61046c5760405162461bcd60e51b815260040161046390612dbe565b60405180910390fd5b6104768282611d0f565b5050565b6104826115c4565b61049e5760405162461bcd60e51b815260040161046390612dbe565b6104766104a9610422565b6001600160a01b0384169083611e74565b603460009054906101000a90046001600160a01b03166001600160a01b031663570d8e1d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561050857600080fd5b505afa15801561051c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105409190612873565b6001600160a01b0316336001600160a01b0316148061056257506105626115c4565b6105bf5760405162461bcd60e51b815260206004820152602860248201527f43616c6c6572206973206e6f74207468652053747261746567697374206f722060448201526723b7bb32b93737b960c11b6064820152608401610463565b6001600160a01b0384166000908152609e602052604090206105e2908484612747565b506001600160a01b039093166000908152609f60205260409020929092555050565b6034546001600160a01b0316331461062e5760405162461bcd60e51b815260040161046390612d87565b600080516020612f66833981519152805460028114156106605760405162461bcd60e51b815260040161046390612e43565b6002825561066e8484611ed7565b50600190555050565b6001600160a01b0381166000908152609e60209081526040808320609f835281842054815483518186028101860190945280845260609594929391928491908301828280156106e557602002820191906000526020600020905b8154815260200190600101908083116106d1575b5050505050915091509150915091565b6034546001600160a01b0316331461071f5760405162461bcd60e51b815260040161046390612d87565b600080516020612f66833981519152805460028114156107515760405162461bcd60e51b815260040161046390612e43565b6002825560005b603954811015610b60576000609d828154811061077757610777612f3a565b600091825260209091200154603980546001600160a01b03909216925090839081106107a5576107a5612f3a565b9060005260206000200160009054906101000a90046001600160a01b03166001600160a01b0316816001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561080557600080fd5b505afa158015610819573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083d9190612873565b6001600160a01b03161461085057600080fd5b6000609f60006039858154811061086957610869612f3a565b60009182526020808320909101546001600160a01b0316835282019290925260400190205490508061089c575050610b4e565b6000609e6000603986815481106108b5576108b5612f3a565b60009182526020808320909101546001600160a01b0316835282810193909352604091820190208054825181850281018501909352808352919290919083018282801561092157602002820191906000526020600020905b81548152602001906001019080831161090d575b505060405163c884ef8360e01b81523060048201529394506000936001600160a01b038816935063c884ef839250602401905060206040518083038186803b15801561096c57600080fd5b505afa158015610980573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a49190612bb6565b905082811015610b4957604051630f44fe1d60e21b81526001600160a01b03851690633d13f874906109de90309087908790600401612c26565b600060405180830381600087803b1580156109f857600080fd5b505af1158015610a0c573d6000803e3d6000fd5b50505050600060398681548110610a2557610a25612f3a565b60009182526020822001546040516370a0823160e01b81523060048201526001600160a01b03909116925082906370a082319060240160206040518083038186803b158015610a7357600080fd5b505afa158015610a87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aab9190612bb6565b603454603980549293507ff6c07a063ed4e63808eb8da7112d46dbcd38de2b40a73dbcc9353c5a94c72353926001600160a01b03909216918a908110610af357610af3612f3a565b60009182526020918290200154604080516001600160a01b0394851681529390911691830191909152810183905260600160405180910390a1603454610b46906001600160a01b03848116911683611e74565b50505b505050505b80610b5881612ef3565b915050610758565b505060019055565b7f1973cae3d8695cb4c31dce9679edb790944900898ecc70570ba365e7de143b0a546001600160a01b0316336001600160a01b031614610c035760405162461bcd60e51b815260206004820152603060248201527f4f6e6c79207468652070656e64696e6720476f7665726e6f722063616e20636f60448201526f6d706c6574652074686520636c61696d60801b6064820152608401610463565b610c0c33611fd4565b565b6001600160a01b0380821660009081526035602052604081205490911680610c3557600080fd5b6000610c4084612098565b90506000816001600160a01b03166369e527da6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c7d57600080fd5b505afa158015610c91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb59190612873565b9050610cc18382612101565b95945050505050565b60398181548110610cda57600080fd5b6000918252602090912001546001600160a01b0316905081565b6034546001600160a01b0316331480610d255750610d10610422565b6001600160a01b0316336001600160a01b0316145b610d7d5760405162461bcd60e51b815260206004820152602360248201527f43616c6c6572206973206e6f7420746865205661756c74206f7220476f7665726044820152623737b960e91b6064820152608401610463565b600080516020612f6683398151915280546002811415610daf5760405162461bcd60e51b815260040161046390612e43565b6002825560005b603654811015610b6057600060368281548110610dd557610dd5612f3a565b6000918252602082200154603680546001600160a01b039092169350610e1f9185908110610e0557610e05612f3a565b6000918252602090912001546001600160a01b0316612098565b90506000610e5360368581548110610e3957610e39612f3a565b6000918252602090912001546001600160a01b0316612211565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a082319060240160206040518083038186803b158015610e9857600080fd5b505afa158015610eac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed09190612bb6565b90508015610fc657604051632e1a7d4d60e01b8152600481018290526001600160a01b03841690632e1a7d4d90602401600060405180830381600087803b158015610f1a57600080fd5b505af1158015610f2e573d6000803e3d6000fd5b50506034546040516370a0823160e01b8152306004820152610fc693506001600160a01b039182169250908716906370a082319060240160206040518083038186803b158015610f7d57600080fd5b505afa158015610f91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb59190612bb6565b6001600160a01b0387169190611e74565b505050508080610fd590612ef3565b915050610db6565b610fe56115c4565b6110015760405162461bcd60e51b815260040161046390612dbe565b60365481106110425760405162461bcd60e51b815260206004820152600d60248201526c092dcecc2d8d2c840d2dcc8caf609b1b6044820152606401610463565b60006036828154811061105757611057612f3a565b60009182526020808320909101546001600160a01b0390811680845260359092526040909220546036549193509091169061109490600190612eac565b83101561111657603680546110ab90600190612eac565b815481106110bb576110bb612f3a565b600091825260209091200154603680546001600160a01b0390921691859081106110e7576110e7612f3a565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b603680548061112757611127612f24565b60008281526020808220600019908401810180546001600160a01b031990811690915593019093556001600160a01b038581168083526035855260409283902080549094169093559051908416815290917f16b7600acff27e39a8a96056b3d533045298de927507f5c1d97e4accde60488c910160405180910390a2505050565b6111b06115c4565b6111cc5760405162461bcd60e51b815260040161046390612dbe565b600054610100900460ff16806111e5575060005460ff16155b6112015760405162461bcd60e51b815260040161046390612df5565b600054610100900460ff16158015611223576000805461ffff19166101011790555b6112948989898989898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808d0282810182019093528c82529093508c92508b91829185019084908082843760009201919091525061229792505050565b80156112a6576000805461ff00191690555b505050505050505050565b6112b96115c4565b6112d55760405162461bcd60e51b815260040161046390612dbe565b60005b818110156113895760008383838181106112f4576112f4612f3a565b90506020020160208101906113099190612856565b6001600160a01b031614156113775760405162461bcd60e51b815260206004820152602e60248201527f43616e206e6f742073657420616e20656d70747920616464726573732061732060448201526d30903932bbb0b932103a37b5b2b760911b6064820152608401610463565b8061138181612ef3565b9150506112d8565b507f04c0b9649497d316554306e53678d5f5f5dbc3a06f97dec13ff4cfe98b986bbc603983836040516113be93929190612c9a565b60405180910390a16113d260398383612792565b505050565b6113df6115c4565b6113fb5760405162461bcd60e51b815260040161046390612dbe565b600054610100900460ff1680611414575060005460ff16155b6114305760405162461bcd60e51b815260040161046390612df5565b600054610100900460ff16158015611452576000805461ffff19166101011790555b8782146114a15760405162461bcd60e51b815260206004820152601d60248201527f6e6f7420313a3120726577617264732d746f2d696e63656e74697665730000006044820152606401610463565b6114ad609d8484612792565b5061151f8b8b8b8b8b8b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808f0282810182019093528e82529093508e92508d91829185019084908082843760009201919091525061229792505050565b8015611531576000805461ff00191690555b5050505050505050505050565b60365460005b818110156104765760006036828154811061156157611561612f3a565b60009182526020808320909101546001600160a01b039081168084526035909252604083205491935016906115999083908390612380565b6115af6001600160a01b03831682600019612380565b505080806115bc90612ef3565b915050611544565b60006115dc600080516020612f868339815191525490565b6001600160a01b0316336001600160a01b031614905090565b6115fd6115c4565b6116195760405162461bcd60e51b815260040161046390612dbe565b60385460408051918252602082018390527f01538952e8f491e3569a11bf3935ca2fa917ea85ec938dac52e696fbb76d8cc6910160405180910390a1603855565b6116626115c4565b61167e5760405162461bcd60e51b815260040161046390612dbe565b6116a6817f1973cae3d8695cb4c31dce9679edb790944900898ecc70570ba365e7de143b0a55565b806001600160a01b03166116c6600080516020612f868339815191525490565b6001600160a01b03167fa39cc5eb22d0f34d8beaefee8a3f17cc229c1a1d1ef87a5ad47313487b1c4f0d60405160405180910390a350565b6034546001600160a01b031633146117285760405162461bcd60e51b815260040161046390612d87565b600080516020612f668339815191528054600281141561175a5760405162461bcd60e51b815260040161046390612e43565b60028255600083116117ae5760405162461bcd60e51b815260206004820152601760248201527f4d75737420776974686472617720736f6d657468696e670000000000000000006044820152606401610463565b6001600160a01b0385166117fd5760405162461bcd60e51b8152602060048201526016602482015275135d5cdd081cdc1958da599e481c9958da5c1a595b9d60521b6044820152606401610463565b600061180885612098565b9050600061181586612211565b9050600061182382876124a4565b604080516001600160a01b03868116825260208201849052929350918916917f2717ead6b9200dd235aad468c9809ea400fe33ac69b5bfaa6d3e90fc922b6398910160405180910390a2806118bc57604080516001600160a01b0389168152602081018890527f2ca0d37ecfc1b8853f4bc276c69586250b3978c1d467c05d6c143966026724ec910160405180910390a1505050611b41565b866001600160a01b03167f2717ead6b9200dd235aad468c9809ea400fe33ac69b5bfaa6d3e90fc922b6398836001600160a01b0316636f307dc36040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561192257600080fd5b505af1158015611936573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061195a9190612873565b604080516001600160a01b039092168252602082018a90520160405180910390a26040516370a0823160e01b81523060048201526000906001600160a01b038916906370a082319060240160206040518083038186803b1580156119bd57600080fd5b505afa1580156119d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119f59190612bb6565b604051632e1a7d4d60e01b8152600481018490529091506001600160a01b03851690632e1a7d4d90602401600060405180830381600087803b158015611a3a57600080fd5b505af1158015611a4e573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092506001600160a01b038b1691506370a082319060240160206040518083038186803b158015611a9457600080fd5b505afa158015611aa8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611acc9190612bb6565b9050611ad88282612eac565b881115611b275760405162461bcd60e51b815260206004820152601760248201527f446964206e6f7420776974686472617720656e6f7567680000000000000000006044820152606401610463565b611b3b6001600160a01b038a168b8a611e74565b50505050505b5060019055505050565b6034546001600160a01b03163314611b755760405162461bcd60e51b815260040161046390612d87565b600080516020612f6683398151915280546002811415611ba75760405162461bcd60e51b815260040161046390612e43565b6002825560005b603654811015610b6057600060368281548110611bcd57611bcd612f3a565b6000918252602090912001546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015611c1957600080fd5b505afa158015611c2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c519190612bb6565b90508015611c8a57611c8a60368381548110611c6f57611c6f612f3a565b6000918252602090912001546001600160a01b031682611ed7565b5080611c9581612ef3565b915050611bae565b609d8181548110610cda57600080fd5b60606039805480602002602001604051908101604052809291908181526020018280548015611d0557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611ce7575b5050505050905090565b6001600160a01b038281166000908152603560205260409020541615611d6c5760405162461bcd60e51b81526020600482015260126024820152711c151bdad95b88185b1c9958591e481cd95d60721b6044820152606401610463565b6001600160a01b03821615801590611d8c57506001600160a01b03811615155b611dcc5760405162461bcd60e51b8152602060048201526011602482015270496e76616c69642061646472657373657360781b6044820152606401610463565b6001600160a01b03828116600081815260356020908152604080832080549587166001600160a01b031996871681179091556036805460018101825594527f4a11f94e20a93c79f6ec743a1954ec4fc2c08429ae2122118bf234b2185c81b890930180549095168417909455925190815290917fef6485b84315f9b1483beffa32aae9a0596890395e3d7521f1c5fbb51790e765910160405180910390a2610476828261253f565b6040516001600160a01b0383166024820152604481018290526113d290849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261256a565b60008111611f205760405162461bcd60e51b81526020600482015260166024820152754d757374206465706f73697420736f6d657468696e6760501b6044820152606401610463565b6000611f2b83612098565b604080516001600160a01b03808416825260208201869052929350918516917f5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f62910160405180910390a260405163b6b55f2560e01b8152600481018390526001600160a01b0382169063b6b55f2590602401600060405180830381600087803b158015611fb757600080fd5b505af1158015611fcb573d6000803e3d6000fd5b50505050505050565b6001600160a01b03811661202a5760405162461bcd60e51b815260206004820152601a60248201527f4e657720476f7665726e6f7220697320616464726573732830290000000000006044820152606401610463565b806001600160a01b031661204a600080516020612f868339815191525490565b6001600160a01b03167fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a60405160405180910390a361209581600080516020612f8683398151915255565b50565b6001600160a01b03808216600090815260356020526040812054909116806120fb5760405162461bcd60e51b81526020600482015260166024820152751cd85999509bde08191bd95cc81b9bdd08195e1a5cdd60521b6044820152606401610463565b92915050565b6040516370a0823160e01b815230600482015260009081906001600160a01b038516906370a082319060240160206040518083038186803b15801561214557600080fd5b505afa158015612159573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061217d9190612bb6565b90506000836001600160a01b031663182df0f56040518163ffffffff1660e01b815260040160206040518083038186803b1580156121ba57600080fd5b505afa1580156121ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121f29190612bb6565b9050670de0b6b3a76400006122078284612e8d565b610cc19190612e6b565b60008061221d83612098565b9050806001600160a01b03166369e527da6040518163ffffffff1660e01b815260040160206040518083038186803b15801561225857600080fd5b505afa15801561226c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122909190612873565b9392505050565b603380546001600160a01b038089166001600160a01b03199283161790925560348054928816929091169190911790556122d360398585612792565b5081518151811461231d5760405162461bcd60e51b8152602060048201526014602482015273496e76616c696420696e7075742061727261797360601b6044820152606401610463565b60005b818110156123765761236484828151811061233d5761233d612f3a565b602002602001015184838151811061235757612357612f3a565b6020026020010151611d0f565b8061236e81612ef3565b915050612320565b5050505050505050565b8015806124095750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b1580156123cf57600080fd5b505afa1580156123e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124079190612bb6565b155b6124745760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610463565b6040516001600160a01b0383166024820152604481018290526113d290849063095ea7b360e01b90606401611ea0565b600080836001600160a01b031663182df0f56040518163ffffffff1660e01b815260040160206040518083038186803b1580156124e057600080fd5b505afa1580156124f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125189190612bb6565b90508061252d84670de0b6b3a7640000612e8d565b6125379190612e6b565b949350505050565b6125546001600160a01b038316826000612380565b6104766001600160a01b03831682600019612380565b60006125bf826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661263c9092919063ffffffff16565b8051909150156113d257808060200190518101906125dd9190612b7b565b6113d25760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610463565b6060612537848460008585843b6126955760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610463565b600080866001600160a01b031685876040516126b19190612c0a565b60006040518083038185875af1925050503d80600081146126ee576040519150601f19603f3d011682016040523d82523d6000602084013e6126f3565b606091505b509150915061270382828661270e565b979650505050505050565b6060831561271d575081612290565b82511561272d5782518084602001fd5b8160405162461bcd60e51b81526004016104639190612d54565b828054828255906000526020600020908101928215612782579160200282015b82811115612782578235825591602001919060010190612767565b5061278e9291506127e5565b5090565b828054828255906000526020600020908101928215612782579160200282015b828111156127825781546001600160a01b0319166001600160a01b038435161782556020909201916001909101906127b2565b5b8082111561278e57600081556001016127e6565b803561280581612f50565b919050565b60008083601f84011261281c57600080fd5b50813567ffffffffffffffff81111561283457600080fd5b6020830191508360208260051b850101111561284f57600080fd5b9250929050565b60006020828403121561286857600080fd5b813561229081612f50565b60006020828403121561288557600080fd5b815161229081612f50565b600080604083850312156128a357600080fd5b82356128ae81612f50565b915060208301356128be81612f50565b809150509250929050565b60008060008060008060008060a0898b0312156128e557600080fd5b88356128f081612f50565b9750602089013561290081612f50565b9650604089013567ffffffffffffffff8082111561291d57600080fd5b6129298c838d0161280a565b909850965060608b013591508082111561294257600080fd5b61294e8c838d0161280a565b909650945060808b013591508082111561296757600080fd5b506129748b828c0161280a565b999c989b5096995094979396929594505050565b60008060008060008060008060008060c08b8d0312156129a757600080fd5b6129b08b6127fa565b99506129be60208c016127fa565b985060408b013567ffffffffffffffff808211156129db57600080fd5b6129e78e838f0161280a565b909a50985060608d0135915080821115612a0057600080fd5b612a0c8e838f0161280a565b909850965060808d0135915080821115612a2557600080fd5b612a318e838f0161280a565b909650945060a08d0135915080821115612a4a57600080fd5b50612a578d828e0161280a565b915080935050809150509295989b9194979a5092959850565b600080600060608486031215612a8557600080fd5b8335612a9081612f50565b92506020840135612aa081612f50565b929592945050506040919091013590565b60008060008060608587031215612ac757600080fd5b8435612ad281612f50565b9350602085013567ffffffffffffffff811115612aee57600080fd5b612afa8782880161280a565b9598909750949560400135949350505050565b60008060408385031215612b2057600080fd5b8235612b2b81612f50565b946020939093013593505050565b60008060208385031215612b4c57600080fd5b823567ffffffffffffffff811115612b6357600080fd5b612b6f8582860161280a565b90969095509350505050565b600060208284031215612b8d57600080fd5b8151801515811461229057600080fd5b600060208284031215612baf57600080fd5b5035919050565b600060208284031215612bc857600080fd5b5051919050565b600081518084526020808501945080840160005b83811015612bff57815187529582019590820190600101612be3565b509495945050505050565b60008251612c1c818460208701612ec3565b9190910192915050565b60018060a01b0384168152826020820152606060408201526000610cc16060830184612bcf565b6020808252825182820181905260009190848201906040850190845b81811015612c8e5783516001600160a01b031683529284019291840191600101612c69565b50909695505050505050565b6000604082016040835280865480835260608501915087600052602092508260002060005b82811015612ce45781546001600160a01b031684529284019260019182019101612cbf565b505050838103828501528481528590820160005b86811015612d26578235612d0b81612f50565b6001600160a01b031682529183019190830190600101612cf8565b50979650505050505050565b604081526000612d456040830185612bcf565b90508260208301529392505050565b6020815260008251806020840152612d73816040850160208701612ec3565b601f01601f19169190910160400192915050565b60208082526017908201527f43616c6c6572206973206e6f7420746865205661756c74000000000000000000604082015260600190565b6020808252601a908201527f43616c6c6572206973206e6f742074686520476f7665726e6f72000000000000604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252600e908201526d1499595b9d1c985b9d0818d85b1b60921b604082015260600190565b600082612e8857634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615612ea757612ea7612f0e565b500290565b600082821015612ebe57612ebe612f0e565b500390565b60005b83811015612ede578181015183820152602001612ec6565b83811115612eed576000848401525b50505050565b6000600019821415612f0757612f07612f0e565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6001600160a01b038116811461209557600080fdfe218adab1852f0bdeacb3305483cf296dbcf6abf496f646284463c8e6a43fa665fe7bb572d5723516ce4fe7a6a664f5adb38f5714efcd271411ed70a34d3ef2f7a2646970667358221220bb2054c00e56f76a66cd65ad8a9d7ecadbfcb0f79a10522c5c3bf690463e3d9364736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "checkBalance(address)": {
        "details": "Get the total asset value held in the platform      This includes any interest that was generated since depositing      CREAM exchange rate between the cToken and asset gradually increases,      causing the cToken to be worth more corresponding asset.",
        "params": {
          "_asset": "Address of the asset"
        },
        "returns": {
          "balance": "   Total value of the asset in the platform"
        }
      },
      "claimGovernance()": {
        "details": "Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor."
      },
      "collectRewardTokens()": {
        "details": "Collect accumulated WAVAX+ALPHA and send to Vault."
      },
      "deposit(address,uint256)": {
        "details": "Deposit asset into AlphaHomora",
        "params": {
          "_amount": "Amount of asset to deposit",
          "_asset": "Address of asset to deposit"
        }
      },
      "depositAll()": {
        "details": "Deposit the entire balance of any supported asset into AlphaHomora"
      },
      "getRewardTokenAddresses()": {
        "details": "Get the reward token addresses.",
        "returns": {
          "_0": "address[] the reward token addresses."
        }
      },
      "governor()": {
        "details": "Returns the address of the current Governor."
      },
      "initialize(address,address,address[],address[],address[])": {
        "details": "Internal initialize function, to set up initial internal state",
        "params": {
          "_assets": "Addresses of initial supported assets",
          "_pTokens": "Platform Token corresponding addresses",
          "_platformAddress": "Generic platform address",
          "_rewardTokenAddresses": "Addresses of reward tokens for platform",
          "_vaultAddress": "Address of the Vault"
        }
      },
      "isGovernor()": {
        "details": "Returns true if the caller is the current Governor."
      },
      "removePToken(uint256)": {
        "details": "Remove a supported asset by passing its index.      This method can only be called by the system Governor",
        "params": {
          "_assetIndex": "Index of the asset to be removed"
        }
      },
      "safeApproveAllTokens()": {
        "details": "Approve the spending of all assets by their corresponding cToken,      if for some reason is it necessary."
      },
      "setPTokenAddress(address,address)": {
        "details": "Provide support for asset by passing its pToken address.      This method can only be called by the system Governor",
        "params": {
          "_asset": "Address for the asset",
          "_pToken": "Address for the corresponding platform token"
        }
      },
      "setProofAndAmount(address,bytes32[],uint256)": {
        "details": "Sets the reward amount and merkle proof from off-chain.",
        "params": {
          "_rewardTokenAddress": "The reward token address",
          "amount": "The accumulated (total) amount of rewards.",
          "proof": "the MerkleProof provided by AlphaHomora"
        }
      },
      "setRewardLiquidationThreshold(uint256)": {
        "details": "Set the reward token liquidation threshold.",
        "params": {
          "_threshold": "Threshold amount in decimals of reward token that will cause the Vault to claim and withdrawAll on allocate() calls."
        }
      },
      "setRewardTokenAddresses(address[])": {
        "details": "Set the reward token addresses.",
        "params": {
          "_rewardTokenAddresses": "Address array of the reward tokens"
        }
      },
      "supportsAsset(address)": {
        "details": "Returns bool indicating whether asset is supported by strategy",
        "params": {
          "_asset": "Address of the asset"
        }
      },
      "transferGovernance(address)": {
        "details": "Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete",
        "params": {
          "_newGovernor": "Address of the new Governor"
        }
      },
      "transferToken(address,uint256)": {
        "details": "Transfer token to governor. Intended for recovering tokens stuck in      strategy contracts, i.e. mistaken sends.",
        "params": {
          "_amount": "Amount of the asset to transfer",
          "_asset": "Address for the asset"
        }
      },
      "withdraw(address,address,uint256)": {
        "details": "Withdraw asset from AlphaHomora",
        "params": {
          "_amount": "Amount of asset to withdraw",
          "_asset": "Address of asset to withdraw",
          "_recipient": "Address to receive withdrawn asset"
        }
      },
      "withdrawAll()": {
        "details": "Remove all assets from platform and send all of that asset to Vault contract."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 13956,
        "contract": "contracts/strategies/AlphaHomoraStrategy.sol:AlphaHomoraStrategy",
        "label": "initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 13959,
        "contract": "contracts/strategies/AlphaHomoraStrategy.sol:AlphaHomoraStrategy",
        "label": "initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 13999,
        "contract": "contracts/strategies/AlphaHomoraStrategy.sol:AlphaHomoraStrategy",
        "label": "______gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 14081,
        "contract": "contracts/strategies/AlphaHomoraStrategy.sol:AlphaHomoraStrategy",
        "label": "platformAddress",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 14083,
        "contract": "contracts/strategies/AlphaHomoraStrategy.sol:AlphaHomoraStrategy",
        "label": "vaultAddress",
        "offset": 0,
        "slot": "52",
        "type": "t_address"
      },
      {
        "astId": 14087,
        "contract": "contracts/strategies/AlphaHomoraStrategy.sol:AlphaHomoraStrategy",
        "label": "assetToPToken",
        "offset": 0,
        "slot": "53",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 14090,
        "contract": "contracts/strategies/AlphaHomoraStrategy.sol:AlphaHomoraStrategy",
        "label": "assetsMapped",
        "offset": 0,
        "slot": "54",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 14092,
        "contract": "contracts/strategies/AlphaHomoraStrategy.sol:AlphaHomoraStrategy",
        "label": "_deprecated_rewardTokenAddress",
        "offset": 0,
        "slot": "55",
        "type": "t_address"
      },
      {
        "astId": 14094,
        "contract": "contracts/strategies/AlphaHomoraStrategy.sol:AlphaHomoraStrategy",
        "label": "rewardLiquidationThreshold",
        "offset": 0,
        "slot": "56",
        "type": "t_uint256"
      },
      {
        "astId": 14097,
        "contract": "contracts/strategies/AlphaHomoraStrategy.sol:AlphaHomoraStrategy",
        "label": "rewardTokenAddresses",
        "offset": 0,
        "slot": "57",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 14101,
        "contract": "contracts/strategies/AlphaHomoraStrategy.sol:AlphaHomoraStrategy",
        "label": "_reserved",
        "offset": 0,
        "slot": "58",
        "type": "t_array(t_int256)99_storage"
      },
      {
        "astId": 10131,
        "contract": "contracts/strategies/AlphaHomoraStrategy.sol:AlphaHomoraStrategy",
        "label": "incentiveDistributorAddresses",
        "offset": 0,
        "slot": "157",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 10136,
        "contract": "contracts/strategies/AlphaHomoraStrategy.sol:AlphaHomoraStrategy",
        "label": "_proofs",
        "offset": 0,
        "slot": "158",
        "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)"
      },
      {
        "astId": 10140,
        "contract": "contracts/strategies/AlphaHomoraStrategy.sol:AlphaHomoraStrategy",
        "label": "_amounts",
        "offset": 0,
        "slot": "159",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_int256)99_storage": {
        "base": "t_int256",
        "encoding": "inplace",
        "label": "int256[99]",
        "numberOfBytes": "3168"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32[])",
        "numberOfBytes": "32",
        "value": "t_array(t_bytes32)dyn_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}