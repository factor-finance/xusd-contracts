{
  "address": "0x724e2233a8662324433d0c893BF944b08A78a689",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_threshold",
          "type": "uint256"
        }
      ],
      "name": "AllocateThresholdUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "AssetAllocated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "AssetDefaultStrategyUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "AssetSupported",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "CapitalPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "CapitalUnpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "GovernorshipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxSupplyDiff",
          "type": "uint256"
        }
      ],
      "name": "MaxSupplyDiffChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newGovernor",
          "type": "address"
        }
      ],
      "name": "PendingGovernorshipTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_priceProvider",
          "type": "address"
        }
      ],
      "name": "PriceProviderUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "RebasePaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_threshold",
          "type": "uint256"
        }
      ],
      "name": "RebaseThresholdUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "RebaseUnpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "Redeem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_redeemFeeBps",
          "type": "uint256"
        }
      ],
      "name": "RedeemFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "StrategistUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "StrategyApproved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "StrategyRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "SwapTokenAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "SwapTokenRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "TrusteeAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_basis",
          "type": "uint256"
        }
      ],
      "name": "TrusteeFeeBpsChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "UniswapUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_vaultBuffer",
          "type": "uint256"
        }
      ],
      "name": "VaultBufferUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_yield",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "YieldDistribution",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "allocate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "assetDefaultStrategies",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "autoAllocateThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "calculateRedeemOutputs",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "capitalPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "checkBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllAssets",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAssetCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStrategyCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isGovernor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "isSupportedAsset",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSupplyDiff",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minimumXusdAmount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceProvider",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebase",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebasePaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebaseThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minimumUnitAmount",
          "type": "uint256"
        }
      ],
      "name": "redeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minimumUnitAmount",
          "type": "uint256"
        }
      ],
      "name": "redeemAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redeemFeeBps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImpl",
          "type": "address"
        }
      ],
      "name": "setAdminImpl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "strategistAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "swapTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newGovernor",
          "type": "address"
        }
      ],
      "name": "transferGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trusteeAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trusteeFeeBps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultBuffer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xdbf68b22d39986427889eb49cf8f17191820b109926bef94f0fac39077a0b875",
  "receipt": {
    "to": null,
    "from": "0xFF1AE57723A4d6d5301e4C7145eF5E9e51901fdc",
    "contractAddress": "0x724e2233a8662324433d0c893BF944b08A78a689",
    "transactionIndex": 0,
    "gasUsed": "2827731",
    "logsBloom": "0x
    "blockHash": "0xffbfe796ca79af981ca79939369435ee89e8ed2ee78fa9e832a9c4fe89af6d7b",
    "transactionHash": "0xdbf68b22d39986427889eb49cf8f17191820b109926bef94f0fac39077a0b875",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 9963069,
        "transactionHash": "0xdbf68b22d39986427889eb49cf8f17191820b109926bef94f0fac39077a0b875",
        "address": "0x724e2233a8662324433d0c893BF944b08A78a689",
        "topics": [
          "0xc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ff1ae57723a4d6d5301e4c7145ef5e9e51901fdc"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xffbfe796ca79af981ca79939369435ee89e8ed2ee78fa9e832a9c4fe89af6d7b"
      }
    ],
    "blockNumber": 9963069,
    "cumulativeGasUsed": "2827731",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "8376f040d7d2c6a4f125c51586a93880",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"AllocateThresholdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"AssetAllocated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"AssetDefaultStrategyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"AssetSupported\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CapitalPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CapitalUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"GovernorshipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxSupplyDiff\",\"type\":\"uint256\"}],\"name\":\"MaxSupplyDiffChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newGovernor\",\"type\":\"address\"}],\"name\":\"PendingGovernorshipTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_priceProvider\",\"type\":\"address\"}],\"name\":\"PriceProviderUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RebasePaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"RebaseThresholdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RebaseUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_redeemFeeBps\",\"type\":\"uint256\"}],\"name\":\"RedeemFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"StrategistUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"StrategyApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"StrategyRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"SwapTokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"SwapTokenRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"TrusteeAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_basis\",\"type\":\"uint256\"}],\"name\":\"TrusteeFeeBpsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"UniswapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_vaultBuffer\",\"type\":\"uint256\"}],\"name\":\"VaultBufferUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_yield\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"YieldDistribution\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"allocate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assetDefaultStrategies\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoAllocateThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculateRedeemOutputs\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"capitalPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"checkBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllAssets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAssetCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStrategyCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isGovernor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"isSupportedAsset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupplyDiff\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumXusdAmount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceProvider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebasePaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebaseThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumUnitAmount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumUnitAmount\",\"type\":\"uint256\"}],\"name\":\"redeemAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemFeeBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImpl\",\"type\":\"address\"}],\"name\":\"setAdminImpl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategistAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"swapTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newGovernor\",\"type\":\"address\"}],\"name\":\"transferGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trusteeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trusteeFeeBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultBuffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allocate()\":{\"details\":\"Allocate unallocated funds on Vault to strategies.*\"},\"checkBalance(address)\":{\"params\":{\"_asset\":\"Address of asset\"},\"returns\":{\"_0\":\"uint256 Balance of asset in decimals of asset\"}},\"claimGovernance()\":{\"details\":\"Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor.\"},\"getAllAssets()\":{\"details\":\"Return all asset addresses in order\"},\"getAssetCount()\":{\"details\":\"Return the number of assets supported by the Vault.\"},\"getStrategyCount()\":{\"details\":\"Return the number of strategies active on the Vault.\"},\"governor()\":{\"details\":\"Returns the address of the current Governor.\"},\"isGovernor()\":{\"details\":\"Returns true if the caller is the current Governor.\"},\"mint(address,uint256,uint256)\":{\"details\":\"Deposit a supported asset and mint XUSD.\",\"params\":{\"_amount\":\"Amount of the asset being deposited\",\"_asset\":\"Address of the asset being deposited\",\"_minimumXusdAmount\":\"Minimum XUSD to mint\"}},\"rebase()\":{\"details\":\"Calculate the total value of assets held by the Vault and all      strategies and update the supply of XUSD.\"},\"redeem(uint256,uint256)\":{\"details\":\"Withdraw a supported asset and burn XUSD.\",\"params\":{\"_amount\":\"Amount of XUSD to burn\",\"_minimumUnitAmount\":\"Minimum stablecoin units to receive in return\"}},\"redeemAll(uint256)\":{\"params\":{\"_minimumUnitAmount\":\"Minimum stablecoin units to receive in return\"}},\"setAdminImpl(address)\":{\"details\":\"set the implementation for the admin, this needs to be in a base class else we cannot set it\",\"params\":{\"newImpl\":\"address of the implementation\"}},\"totalValue()\":{\"details\":\"Determine the total value of assets held by the vault and its         strategies.\",\"returns\":{\"value\":\"Total value in USD (1e18)\"}},\"transferGovernance(address)\":{\"details\":\"Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete\",\"params\":{\"_newGovernor\":\"Address of the new Governor\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allocate()\":{\"notice\":\"Allocate unallocated funds on Vault to strategies.\"},\"calculateRedeemOutputs(uint256)\":{\"notice\":\"Calculate the outputs for a redeem function, i.e. the mix of coins that will be returned\"},\"checkBalance(address)\":{\"notice\":\"Get the balance of an asset held in Vault and all strategies.\"},\"redeemAll(uint256)\":{\"notice\":\"Withdraw a supported asset and burn all XUSD.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vault/VaultCore.sol\":\"VaultCore\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/governance/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title XUSD Governable Contract\\n * @dev Copy of the openzeppelin Ownable.sol contract with nomenclature change\\n *      from owner to governor and renounce methods removed. Does not use\\n *      Context.sol like Ownable.sol does for simplification.\\n * @author XUSD.fi Inc\\n */\\ncontract Governable {\\n    // Storage position of the owner and pendingOwner of the contract\\n    // keccak256(\\\"XUSD.governor\\\");\\n    bytes32 private constant governorPosition =\\n        0xfe7bb572d5723516ce4fe7a6a664f5adb38f5714efcd271411ed70a34d3ef2f7;\\n\\n    // keccak256(\\\"XUSD.pending.governor\\\");\\n    bytes32 private constant pendingGovernorPosition =\\n        0x1973cae3d8695cb4c31dce9679edb790944900898ecc70570ba365e7de143b0a;\\n\\n    // keccak256(\\\"XUSD.reentry.status\\\");\\n    bytes32 private constant reentryStatusPosition =\\n        0x218adab1852f0bdeacb3305483cf296dbcf6abf496f646284463c8e6a43fa665;\\n\\n    // See OpenZeppelin ReentrancyGuard implementation\\n    uint256 constant _NOT_ENTERED = 1;\\n    uint256 constant _ENTERED = 2;\\n\\n    event PendingGovernorshipTransfer(\\n        address indexed previousGovernor,\\n        address indexed newGovernor\\n    );\\n\\n    event GovernorshipTransferred(\\n        address indexed previousGovernor,\\n        address indexed newGovernor\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial Governor.\\n     */\\n    constructor() {\\n        _setGovernor(msg.sender);\\n        emit GovernorshipTransferred(address(0), _governor());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current Governor.\\n     */\\n    function governor() public view returns (address) {\\n        return _governor();\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current Governor.\\n     */\\n    function _governor() internal view returns (address governorOut) {\\n        bytes32 position = governorPosition;\\n        assembly {\\n            governorOut := sload(position)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address of the pending Governor.\\n     */\\n    function _pendingGovernor()\\n        internal\\n        view\\n        returns (address pendingGovernor)\\n    {\\n        bytes32 position = pendingGovernorPosition;\\n        assembly {\\n            pendingGovernor := sload(position)\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the Governor.\\n     */\\n    modifier onlyGovernor() {\\n        require(isGovernor(), \\\"Caller is not the Governor\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the caller is the current Governor.\\n     */\\n    function isGovernor() public view returns (bool) {\\n        return msg.sender == _governor();\\n    }\\n\\n    function _setGovernor(address newGovernor) internal {\\n        bytes32 position = governorPosition;\\n        assembly {\\n            sstore(position, newGovernor)\\n        }\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        bytes32 position = reentryStatusPosition;\\n        uint256 _reentry_status;\\n        assembly {\\n            _reentry_status := sload(position)\\n        }\\n\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_reentry_status != _ENTERED, \\\"Reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        assembly {\\n            sstore(position, _ENTERED)\\n        }\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        assembly {\\n            sstore(position, _NOT_ENTERED)\\n        }\\n    }\\n\\n    function _setPendingGovernor(address newGovernor) internal {\\n        bytes32 position = pendingGovernorPosition;\\n        assembly {\\n            sstore(position, newGovernor)\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers Governance of the contract to a new account (`newGovernor`).\\n     * Can only be called by the current Governor. Must be claimed for this to complete\\n     * @param _newGovernor Address of the new Governor\\n     */\\n    function transferGovernance(address _newGovernor) external onlyGovernor {\\n        _setPendingGovernor(_newGovernor);\\n        emit PendingGovernorshipTransfer(_governor(), _newGovernor);\\n    }\\n\\n    /**\\n     * @dev Claim Governance of the contract to a new account (`newGovernor`).\\n     * Can only be called by the new Governor.\\n     */\\n    function claimGovernance() external {\\n        require(\\n            msg.sender == _pendingGovernor(),\\n            \\\"Only the pending Governor can complete the claim\\\"\\n        );\\n        _changeGovernor(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Change Governance of the contract to a new account (`newGovernor`).\\n     * @param _newGovernor Address of the new Governor\\n     */\\n    function _changeGovernor(address _newGovernor) internal {\\n        require(_newGovernor != address(0), \\\"New Governor is address(0)\\\");\\n        emit GovernorshipTransferred(_governor(), _newGovernor);\\n        _setGovernor(_newGovernor);\\n    }\\n}\\n\",\"keccak256\":\"0x2348d9d78984ec2f0c9e4c5e4bdc1800bc4b75e472e8e3d85f8ac2163980b4c6\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IBasicToken.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\ninterface IBasicToken {\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xcabd808c03076fa6fb5838a13210b2b99314d23842e0e3d5e55e0c1466e75212\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IBuyback.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\ninterface IBuyback {\\n    function swap() external;\\n}\\n\",\"keccak256\":\"0xd2baf71a834c393104865c9fbd98266ec6e7c2f92c830162d23b28383358ff2f\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\ninterface IOracle {\\n    /**\\n     * @dev returns the asset price in USD, 8 decimal digits.\\n     */\\n    function price(address asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x595ee808ea4eb2e36362c0e46e85e4f923e673a6eb17fe7efad1c8d77d41d09d\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Platform interface to integrate with lending platform like Compound, AAVE etc.\\n */\\ninterface IStrategy {\\n    /**\\n     * @dev Deposit the given asset to platform\\n     * @param _asset asset address\\n     * @param _amount Amount to deposit\\n     */\\n    function deposit(address _asset, uint256 _amount) external;\\n\\n    /**\\n     * @dev Deposit the entire balance of all supported assets in the Strategy\\n     *      to the platform\\n     */\\n    function depositAll() external;\\n\\n    /**\\n     * @dev Withdraw given asset from Lending platform\\n     */\\n    function withdraw(\\n        address _recipient,\\n        address _asset,\\n        uint256 _amount\\n    ) external;\\n\\n    /**\\n     * @dev Liquidate all assets in strategy and return them to Vault.\\n     */\\n    function withdrawAll() external;\\n\\n    /**\\n     * @dev Returns the current balance of the given asset.\\n     */\\n    function checkBalance(address _asset)\\n        external\\n        view\\n        returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns bool indicating whether strategy supports asset.\\n     */\\n    function supportsAsset(address _asset) external view returns (bool);\\n\\n    /**\\n     * @dev Collect reward tokens from the Strategy.\\n     */\\n    function collectRewardToken() external;\\n\\n    /**\\n     * @dev The address of the reward token for the Strategy.\\n     */\\n    function rewardTokenAddress() external pure returns (address);\\n\\n    /**\\n     * @dev The threshold (denominated in the reward token) over which the\\n     * vault will auto harvest on allocate calls.\\n     */\\n    function rewardLiquidationThreshold() external pure returns (uint256);\\n}\\n\",\"keccak256\":\"0x715a3976ef2427302c06679f55cd7efaca179954b5ccd28aabc2dcc1a7c1e136\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\ninterface IVault {\\n    event AssetSupported(address _asset);\\n    event AssetDefaultStrategyUpdated(address _asset, address _strategy);\\n    event AssetAllocated(address _asset, address _strategy, uint256 _amount);\\n    event StrategyApproved(address _addr);\\n    event StrategyRemoved(address _addr);\\n    event Mint(address _addr, uint256 _value);\\n    event Redeem(address _addr, uint256 _value);\\n    event CapitalPaused();\\n    event CapitalUnpaused();\\n    event RebasePaused();\\n    event RebaseUnpaused();\\n    event VaultBufferUpdated(uint256 _vaultBuffer);\\n    event RedeemFeeUpdated(uint256 _redeemFeeBps);\\n    event PriceProviderUpdated(address _priceProvider);\\n    event AllocateThresholdUpdated(uint256 _threshold);\\n    event RebaseThresholdUpdated(uint256 _threshold);\\n    event UniswapUpdated(address _address);\\n    event StrategistUpdated(address _address);\\n    event MaxSupplyDiffChanged(uint256 maxSupplyDiff);\\n    event YieldDistribution(address _to, uint256 _yield, uint256 _fee);\\n    event TrusteeFeeBpsChanged(uint256 _basis);\\n    event TrusteeAddressChanged(address _address);\\n\\n    // Governable.sol\\n    function transferGovernance(address _newGovernor) external;\\n\\n    function claimGovernance() external;\\n\\n    function governor() external view returns (address);\\n\\n    // VaultAdmin.sol\\n    function setPriceProvider(address _priceProvider) external;\\n\\n    function priceProvider() external view returns (address);\\n\\n    function setRedeemFeeBps(uint256 _redeemFeeBps) external;\\n\\n    function redeemFeeBps() external view returns (uint256);\\n\\n    function setVaultBuffer(uint256 _vaultBuffer) external;\\n\\n    function vaultBuffer() external view returns (uint256);\\n\\n    function setAutoAllocateThreshold(uint256 _threshold) external;\\n\\n    function autoAllocateThreshold() external view returns (uint256);\\n\\n    function setRebaseThreshold(uint256 _threshold) external;\\n\\n    function rebaseThreshold() external view returns (uint256);\\n\\n    function setStrategistAddr(address _address) external;\\n\\n    function strategistAddr() external view returns (address);\\n\\n    function setUniswapAddr(address _address) external;\\n\\n    function uniswapAddr() external view returns (address);\\n\\n    function setMaxSupplyDiff(uint256 _maxSupplyDiff) external;\\n\\n    function maxSupplyDiff() external view returns (uint256);\\n\\n    function setTrusteeAddress(address _address) external;\\n\\n    function trusteeAddress() external view returns (address);\\n\\n    function setTrusteeFeeBps(uint256 _basis) external;\\n\\n    function trusteeFeeBps() external view returns (uint256);\\n\\n    function supportAsset(address _asset) external;\\n\\n    function approveStrategy(address _addr) external;\\n\\n    function removeStrategy(address _addr) external;\\n\\n    function addSwapToken(address _addr) external;\\n\\n    function removeSwapToken(address _addr) external;\\n\\n    function setAssetDefaultStrategy(address _asset, address _strategy)\\n        external;\\n\\n    function assetDefaultStrategies(address _asset)\\n        external\\n        view\\n        returns (address);\\n\\n    function pauseRebase() external;\\n\\n    function unpauseRebase() external;\\n\\n    function rebasePaused() external view returns (bool);\\n\\n    function pauseCapital() external;\\n\\n    function unpauseCapital() external;\\n\\n    function capitalPaused() external view returns (bool);\\n\\n    function transferToken(address _asset, uint256 _amount) external;\\n\\n    function harvest() external;\\n\\n    function harvestAndSwap() external;\\n\\n    function harvest(address _strategyAddr) external;\\n\\n    function harvestAndSwap(address _strategyAddr) external;\\n\\n    function swap() external;\\n\\n    function priceUSDMint(address asset) external view returns (uint256);\\n\\n    function priceUSDRedeem(address asset) external view returns (uint256);\\n\\n    function withdrawAllFromStrategy(address _strategyAddr) external;\\n\\n    function withdrawAllFromStrategies() external;\\n\\n    function reallocate(\\n        address _strategyFromAddress,\\n        address _strategyToAddress,\\n        address[] calldata _assets,\\n        uint256[] calldata _amounts\\n    ) external;\\n\\n    // VaultCore.sol\\n    function mint(\\n        address _asset,\\n        uint256 _amount,\\n        uint256 _minimumXusdAmount\\n    ) external;\\n\\n    function redeem(uint256 _amount, uint256 _minimumUnitAmount) external;\\n\\n    function redeemAll(uint256 _minimumUnitAmount) external;\\n\\n    function allocate() external;\\n\\n    function rebase() external;\\n\\n    function totalValue() external view returns (uint256 value);\\n\\n    function checkBalance(address _asset) external view returns (uint256);\\n\\n    function calculateRedeemOutputs(uint256 _amount)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function getAssetCount() external view returns (uint256);\\n\\n    function getAllAssets() external view returns (address[] memory);\\n\\n    function getStrategyCount() external view returns (uint256);\\n\\n    function isSupportedAsset(address _asset) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xe295f9198d6bde84242764901fa1a4bd63b0dfca83b220d4636c34844ed0e920\",\"license\":\"agpl-3.0\"},\"contracts/token/XUSD.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title XUSD Token Contract\\n * @dev ERC20 compatible contract for XUSD\\n * @dev Implements an elastic supply\\n * @author XUSD.fi Inc\\n */\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport { Initializable } from \\\"../utils/Initializable.sol\\\";\\nimport { InitializableERC20Detailed } from \\\"../utils/InitializableERC20Detailed.sol\\\";\\nimport { StableMath } from \\\"../utils/StableMath.sol\\\";\\nimport { Governable } from \\\"../governance/Governable.sol\\\";\\n\\n/**\\n * NOTE that this is an ERC20 token but the invariant that the sum of\\n * balanceOf(x) for all x is not >= totalSupply(). This is a consequence of the\\n * rebasing design. Any integrations with XUSD should be aware.\\n */\\n\\ncontract XUSD is Initializable, InitializableERC20Detailed, Governable {\\n    using SafeMath for uint256;\\n    using StableMath for uint256;\\n\\n    event TotalSupplyUpdated(\\n        uint256 totalSupply,\\n        uint256 rebasingCredits,\\n        uint256 rebasingCreditsPerToken\\n    );\\n\\n    enum RebaseOptions {\\n        NotSet,\\n        OptOut,\\n        OptIn\\n    }\\n\\n    uint256 private constant MAX_SUPPLY = ~uint128(0); // (2^128) - 1\\n    uint256 public _totalSupply;\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n    address public vaultAddress = address(0);\\n    mapping(address => uint256) private _creditBalances;\\n    uint256 private _rebasingCredits;\\n    uint256 private _rebasingCreditsPerToken;\\n    // Frozen address/credits are non rebasing (value is held in contracts which\\n    // do not receive yield unless they explicitly opt in)\\n    uint256 public nonRebasingSupply;\\n    mapping(address => uint256) public nonRebasingCreditsPerToken;\\n    mapping(address => RebaseOptions) public rebaseState;\\n    mapping(address => uint256) public isUpgraded; // DEPRECATED\\n\\n    function initialize(\\n        string calldata _nameArg,\\n        string calldata _symbolArg,\\n        address _vaultAddress\\n    ) external onlyGovernor initializer {\\n        InitializableERC20Detailed._initialize(_nameArg, _symbolArg, 18);\\n        _rebasingCreditsPerToken = 1e18;\\n        vaultAddress = _vaultAddress;\\n    }\\n\\n    /**\\n     * @dev Verifies that the caller is the Vault contract\\n     */\\n    modifier onlyVault() {\\n        require(vaultAddress == msg.sender, \\\"Caller is not the Vault\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @return The total supply of XUSD.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @return rebasingCreditsPerToken\\n     */\\n    function rebasingCreditsPerToken() public view returns (uint256) {\\n        return _rebasingCreditsPerToken;\\n    }\\n\\n    /**\\n     * @return Total number of rebasing credits\\n     */\\n    function rebasingCredits() public view returns (uint256) {\\n        return _rebasingCredits;\\n    }\\n\\n    /**\\n     * @dev Gets the balance of the specified address.\\n     * @param _account Address to query the balance of.\\n     * @return A uint256 representing the amount of base units owned by the\\n     *         specified address.\\n     */\\n    function balanceOf(address _account)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        if (_creditBalances[_account] == 0) return 0;\\n        return\\n            _creditBalances[_account].divPrecisely(_creditsPerToken(_account));\\n    }\\n\\n    /**\\n     * @dev Gets the credits balance of the specified address.\\n     * @param _account The address to query the balance of.\\n     * @return (uint256, uint256, bool) Credit balance, credits per token of the\\n     *         address\\n     */\\n    function creditsBalanceOf(address _account)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        return (_creditBalances[_account], _creditsPerToken(_account));\\n    }\\n\\n    /**\\n     * @dev Transfer tokens to a specified address.\\n     * @param _to the address to transfer to.\\n     * @param _value the amount to be transferred.\\n     * @return true on success.\\n     */\\n    function transfer(address _to, uint256 _value)\\n        public\\n        override\\n        returns (bool)\\n    {\\n        require(_to != address(0), \\\"Transfer to zero address\\\");\\n        require(\\n            _value <= balanceOf(msg.sender),\\n            \\\"Transfer greater than balance\\\"\\n        );\\n\\n        _executeTransfer(msg.sender, _to, _value);\\n\\n        emit Transfer(msg.sender, _to, _value);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Transfer tokens from one address to another.\\n     * @param _from The address you want to send tokens from.\\n     * @param _to The address you want to transfer to.\\n     * @param _value The amount of tokens to be transferred.\\n     */\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) public override returns (bool) {\\n        require(_to != address(0), \\\"Transfer to zero address\\\");\\n        require(_value <= balanceOf(_from), \\\"Transfer greater than balance\\\");\\n\\n        _allowances[_from][msg.sender] = _allowances[_from][msg.sender].sub(\\n            _value\\n        );\\n\\n        _executeTransfer(_from, _to, _value);\\n\\n        emit Transfer(_from, _to, _value);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Update the count of non rebasing credits in response to a transfer\\n     * @param _from The address you want to send tokens from.\\n     * @param _to The address you want to transfer to.\\n     * @param _value Amount of XUSD to transfer\\n     */\\n    function _executeTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) internal {\\n        bool isNonRebasingTo = _isNonRebasingAccount(_to);\\n        bool isNonRebasingFrom = _isNonRebasingAccount(_from);\\n\\n        // Credits deducted and credited might be different due to the\\n        // differing creditsPerToken used by each account\\n        uint256 creditsCredited = _value.mulTruncate(_creditsPerToken(_to));\\n        uint256 creditsDeducted = _value.mulTruncate(_creditsPerToken(_from));\\n\\n        _creditBalances[_from] = _creditBalances[_from].sub(\\n            creditsDeducted,\\n            \\\"Transfer amount exceeds balance\\\"\\n        );\\n        _creditBalances[_to] = _creditBalances[_to].add(creditsCredited);\\n\\n        if (isNonRebasingTo && !isNonRebasingFrom) {\\n            // Transfer to non-rebasing account from rebasing account, credits\\n            // are removed from the non rebasing tally\\n            nonRebasingSupply = nonRebasingSupply.add(_value);\\n            // Update rebasingCredits by subtracting the deducted amount\\n            _rebasingCredits = _rebasingCredits.sub(creditsDeducted);\\n        } else if (!isNonRebasingTo && isNonRebasingFrom) {\\n            // Transfer to rebasing account from non-rebasing account\\n            // Decreasing non-rebasing credits by the amount that was sent\\n            nonRebasingSupply = nonRebasingSupply.sub(_value);\\n            // Update rebasingCredits by adding the credited amount\\n            _rebasingCredits = _rebasingCredits.add(creditsCredited);\\n        }\\n    }\\n\\n    /**\\n     * @dev Function to check the amount of tokens that _owner has allowed to\\n     *      `_spender`.\\n     * @param _owner The address which owns the funds.\\n     * @param _spender The address which will spend the funds.\\n     * @return The number of tokens still available for the _spender.\\n     */\\n    function allowance(address _owner, address _spender)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _allowances[_owner][_spender];\\n    }\\n\\n    /**\\n     * @dev Approve the passed address to spend the specified amount of tokens\\n     *      on behalf of msg.sender. This method is included for ERC20\\n     *      compatibility. `increaseAllowance` and `decreaseAllowance` should be\\n     *      used instead.\\n     *\\n     *      Changing an allowance with this method brings the risk that someone\\n     *      may transfer both the old and the new allowance - if they are both\\n     *      greater than zero - if a transfer transaction is mined before the\\n     *      later approve() call is mined.\\n     * @param _spender The address which will spend the funds.\\n     * @param _value The amount of tokens to be spent.\\n     */\\n    function approve(address _spender, uint256 _value)\\n        public\\n        override\\n        returns (bool)\\n    {\\n        _allowances[msg.sender][_spender] = _value;\\n        emit Approval(msg.sender, _spender, _value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Increase the amount of tokens that an owner has allowed to\\n     *      `_spender`.\\n     *      This method should be used instead of approve() to avoid the double\\n     *      approval vulnerability described above.\\n     * @param _spender The address which will spend the funds.\\n     * @param _addedValue The amount of tokens to increase the allowance by.\\n     */\\n    function increaseAllowance(address _spender, uint256 _addedValue)\\n        public\\n        returns (bool)\\n    {\\n        _allowances[msg.sender][_spender] = _allowances[msg.sender][_spender]\\n            .add(_addedValue);\\n        emit Approval(msg.sender, _spender, _allowances[msg.sender][_spender]);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Decrease the amount of tokens that an owner has allowed to\\n            `_spender`.\\n     * @param _spender The address which will spend the funds.\\n     * @param _subtractedValue The amount of tokens to decrease the allowance\\n     *        by.\\n     */\\n    function decreaseAllowance(address _spender, uint256 _subtractedValue)\\n        public\\n        returns (bool)\\n    {\\n        uint256 oldValue = _allowances[msg.sender][_spender];\\n        if (_subtractedValue >= oldValue) {\\n            _allowances[msg.sender][_spender] = 0;\\n        } else {\\n            _allowances[msg.sender][_spender] = oldValue.sub(_subtractedValue);\\n        }\\n        emit Approval(msg.sender, _spender, _allowances[msg.sender][_spender]);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Mints new tokens, increasing totalSupply.\\n     */\\n    function mint(address _account, uint256 _amount) external onlyVault {\\n        _mint(_account, _amount);\\n    }\\n\\n    /**\\n     * @dev Creates `_amount` tokens and assigns them to `_account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address _account, uint256 _amount) internal nonReentrant {\\n        require(_account != address(0), \\\"Mint to the zero address\\\");\\n\\n        bool isNonRebasingAccount = _isNonRebasingAccount(_account);\\n\\n        uint256 creditAmount = _amount.mulTruncate(_creditsPerToken(_account));\\n        _creditBalances[_account] = _creditBalances[_account].add(creditAmount);\\n\\n        // If the account is non rebasing and doesn't have a set creditsPerToken\\n        // then set it i.e. this is a mint from a fresh contract\\n        if (isNonRebasingAccount) {\\n            nonRebasingSupply = nonRebasingSupply.add(_amount);\\n        } else {\\n            _rebasingCredits = _rebasingCredits.add(creditAmount);\\n        }\\n\\n        _totalSupply = _totalSupply.add(_amount);\\n\\n        require(_totalSupply < MAX_SUPPLY, \\\"Max supply\\\");\\n\\n        emit Transfer(address(0), _account, _amount);\\n    }\\n\\n    /**\\n     * @dev Burns tokens, decreasing totalSupply.\\n     */\\n    function burn(address account, uint256 amount) external onlyVault {\\n        _burn(account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `_amount` tokens from `_account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `_account` cannot be the zero address.\\n     * - `_account` must have at least `_amount` tokens.\\n     */\\n    function _burn(address _account, uint256 _amount) internal nonReentrant {\\n        require(_account != address(0), \\\"Burn from the zero address\\\");\\n        if (_amount == 0) {\\n            return;\\n        }\\n\\n        bool isNonRebasingAccount = _isNonRebasingAccount(_account);\\n        uint256 creditAmount = _amount.mulTruncate(_creditsPerToken(_account));\\n        uint256 currentCredits = _creditBalances[_account];\\n\\n        // Remove the credits, burning rounding errors\\n        if (\\n            currentCredits == creditAmount || currentCredits - 1 == creditAmount\\n        ) {\\n            // Handle dust from rounding\\n            _creditBalances[_account] = 0;\\n        } else if (currentCredits > creditAmount) {\\n            _creditBalances[_account] = _creditBalances[_account].sub(\\n                creditAmount\\n            );\\n        } else {\\n            revert(\\\"Remove exceeds balance\\\");\\n        }\\n\\n        // Remove from the credit tallies and non-rebasing supply\\n        if (isNonRebasingAccount) {\\n            nonRebasingSupply = nonRebasingSupply.sub(_amount);\\n        } else {\\n            _rebasingCredits = _rebasingCredits.sub(creditAmount);\\n        }\\n\\n        _totalSupply = _totalSupply.sub(_amount);\\n\\n        emit Transfer(_account, address(0), _amount);\\n    }\\n\\n    /**\\n     * @dev Get the credits per token for an account. Returns a fixed amount\\n     *      if the account is non-rebasing.\\n     * @param _account Address of the account.\\n     */\\n    function _creditsPerToken(address _account)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (nonRebasingCreditsPerToken[_account] != 0) {\\n            return nonRebasingCreditsPerToken[_account];\\n        } else {\\n            return _rebasingCreditsPerToken;\\n        }\\n    }\\n\\n    /**\\n     * @dev Is an account using rebasing accounting or non-rebasing accounting?\\n     *      Also, ensure contracts are non-rebasing if they have not opted in.\\n     * @param _account Address of the account.\\n     */\\n    function _isNonRebasingAccount(address _account) internal returns (bool) {\\n        bool isContract = Address.isContract(_account);\\n        if (isContract && rebaseState[_account] == RebaseOptions.NotSet) {\\n            _ensureRebasingMigration(_account);\\n        }\\n        return nonRebasingCreditsPerToken[_account] > 0;\\n    }\\n\\n    /**\\n     * @dev Ensures internal account for rebasing and non-rebasing credits and\\n     *      supply is updated following deployment of frozen yield change.\\n     */\\n    function _ensureRebasingMigration(address _account) internal {\\n        if (nonRebasingCreditsPerToken[_account] == 0) {\\n            if (_creditBalances[_account] == 0) {\\n                // Since there is no existing balance, we can directly set to\\n                // high resolution, and do not have to do any other bookkeeping\\n                nonRebasingCreditsPerToken[_account] = 1e27;\\n            } else {\\n                // Migrate an existing account:\\n\\n                // Set fixed credits per token for this account\\n                nonRebasingCreditsPerToken[_account] = _rebasingCreditsPerToken;\\n                // Update non rebasing supply\\n                nonRebasingSupply = nonRebasingSupply.add(balanceOf(_account));\\n                // Update credit tallies\\n                _rebasingCredits = _rebasingCredits.sub(\\n                    _creditBalances[_account]\\n                );\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Add a contract address to the non-rebasing exception list. The\\n     * address's balance will be part of rebases and the account will be exposed\\n     * to upside and downside.\\n     */\\n    function rebaseOptIn() public nonReentrant {\\n        require(_isNonRebasingAccount(msg.sender), \\\"Account has not opted out\\\");\\n\\n        // Convert balance into the same amount at the current exchange rate\\n        uint256 newCreditBalance = _creditBalances[msg.sender]\\n            .mul(_rebasingCreditsPerToken)\\n            .div(_creditsPerToken(msg.sender));\\n\\n        // Decreasing non rebasing supply\\n        nonRebasingSupply = nonRebasingSupply.sub(balanceOf(msg.sender));\\n\\n        _creditBalances[msg.sender] = newCreditBalance;\\n\\n        // Increase rebasing credits, totalSupply remains unchanged so no\\n        // adjustment necessary\\n        _rebasingCredits = _rebasingCredits.add(_creditBalances[msg.sender]);\\n\\n        rebaseState[msg.sender] = RebaseOptions.OptIn;\\n\\n        // Delete any fixed credits per token\\n        delete nonRebasingCreditsPerToken[msg.sender];\\n    }\\n\\n    /**\\n     * @dev Explicitly mark that an address is non-rebasing.\\n     */\\n    function rebaseOptOut() public nonReentrant {\\n        require(!_isNonRebasingAccount(msg.sender), \\\"Account has not opted in\\\");\\n\\n        // Increase non rebasing supply\\n        nonRebasingSupply = nonRebasingSupply.add(balanceOf(msg.sender));\\n        // Set fixed credits per token\\n        nonRebasingCreditsPerToken[msg.sender] = _rebasingCreditsPerToken;\\n\\n        // Decrease rebasing credits, total supply remains unchanged so no\\n        // adjustment necessary\\n        _rebasingCredits = _rebasingCredits.sub(_creditBalances[msg.sender]);\\n\\n        // Mark explicitly opted out of rebasing\\n        rebaseState[msg.sender] = RebaseOptions.OptOut;\\n    }\\n\\n    /**\\n     * @dev Modify the supply without minting new tokens. This uses a change in\\n     *      the exchange rate between \\\"credits\\\" and XUSD tokens to change balances.\\n     * @param _newTotalSupply New total supply of XUSD.\\n     */\\n    function changeSupply(uint256 _newTotalSupply)\\n        external\\n        onlyVault\\n        nonReentrant\\n    {\\n        require(_totalSupply > 0, \\\"Cannot increase 0 supply\\\");\\n\\n        if (_totalSupply == _newTotalSupply) {\\n            emit TotalSupplyUpdated(\\n                _totalSupply,\\n                _rebasingCredits,\\n                _rebasingCreditsPerToken\\n            );\\n            return;\\n        }\\n\\n        _totalSupply = _newTotalSupply > MAX_SUPPLY\\n            ? MAX_SUPPLY\\n            : _newTotalSupply;\\n\\n        _rebasingCreditsPerToken = _rebasingCredits.divPrecisely(\\n            _totalSupply.sub(nonRebasingSupply)\\n        );\\n\\n        require(_rebasingCreditsPerToken > 0, \\\"Invalid change in supply\\\");\\n\\n        _totalSupply = _rebasingCredits\\n            .divPrecisely(_rebasingCreditsPerToken)\\n            .add(nonRebasingSupply);\\n\\n        emit TotalSupplyUpdated(\\n            _totalSupply,\\n            _rebasingCredits,\\n            _rebasingCreditsPerToken\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xc1d42597dad481b3680c151f998bf7d67817e13c0c693aeef14a7d44fe511f47\",\"license\":\"agpl-3.0\"},\"contracts/utils/Helpers.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nimport { IBasicToken } from \\\"../interfaces/IBasicToken.sol\\\";\\n\\nlibrary Helpers {\\n    /**\\n     * @notice Fetch the `symbol()` from an ERC20 token\\n     * @dev Grabs the `symbol()` from a contract\\n     * @param _token Address of the ERC20 token\\n     * @return string Symbol of the ERC20 token\\n     */\\n    function getSymbol(address _token) internal view returns (string memory) {\\n        string memory symbol = IBasicToken(_token).symbol();\\n        return symbol;\\n    }\\n\\n    /**\\n     * @notice Fetch the `decimals()` from an ERC20 token\\n     * @dev Grabs the `decimals()` from a contract and fails if\\n     *      the decimal value does not live within a certain range\\n     * @param _token Address of the ERC20 token\\n     * @return uint256 Decimals of the ERC20 token\\n     */\\n    function getDecimals(address _token) internal view returns (uint256) {\\n        uint256 decimals = IBasicToken(_token).decimals();\\n        require(\\n            decimals >= 4 && decimals <= 18,\\n            \\\"Token must have sufficient decimal places\\\"\\n        );\\n\\n        return decimals;\\n    }\\n}\\n\",\"keccak256\":\"0x7ce41c7eacd2b6722029bd87759fe6e4d9b48a862277707737be82c94581b855\",\"license\":\"agpl-3.0\"},\"contracts/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(\\n            initializing || !initialized,\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n\\n        bool isTopLevelCall = !initializing;\\n        if (isTopLevelCall) {\\n            initializing = true;\\n            initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            initializing = false;\\n        }\\n    }\\n\\n    uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0xff2a83835ed8984e10338905bc31dbcaeeabdfc0e58d49257389cb1e5a3b9d8a\",\"license\":\"agpl-3.0\"},\"contracts/utils/InitializableERC20Detailed.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @dev Optional functions from the ERC20 standard.\\n * Converted from openzeppelin/contracts/token/ERC20/ERC20Detailed.sol\\n */\\nabstract contract InitializableERC20Detailed is IERC20 {\\n    // Storage gap to skip storage from prior to XUSD reset\\n    uint256[100] private _____gap;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\\n     * these values are immutable: they can only be set once during\\n     * construction.\\n     * @notice To avoid variable shadowing appended `Arg` after arguments name.\\n     */\\n    function _initialize(\\n        string memory nameArg,\\n        string memory symbolArg,\\n        uint8 decimalsArg\\n    ) internal {\\n        _name = nameArg;\\n        _symbol = symbolArg;\\n        _decimals = decimalsArg;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n}\\n\",\"keccak256\":\"0xe489d08b064c2628d4850dc73389a7a7619ce3789e41f81981d9d5603fe245da\",\"license\":\"agpl-3.0\"},\"contracts/utils/StableMath.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n// Based on StableMath from Stability Labs Pty. Ltd.\\n// https://github.com/mstable/mStable-contracts/blob/master/contracts/shared/StableMath.sol\\n\\nlibrary StableMath {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @dev Scaling unit for use in specific calculations,\\n     * where 1 * 10**18, or 1e18 represents a unit '1'\\n     */\\n    uint256 private constant FULL_SCALE = 1e18;\\n\\n    /***************************************\\n                    Helpers\\n    ****************************************/\\n\\n    /**\\n     * @dev Adjust the scale of an integer\\n     * @param to Decimals to scale to\\n     * @param from Decimals to scale from\\n     */\\n    function scaleBy(\\n        uint256 x,\\n        uint256 to,\\n        uint256 from\\n    ) internal pure returns (uint256) {\\n        if (to > from) {\\n            x = x.mul(10**(to - from));\\n        } else if (to < from) {\\n            x = x.div(10**(from - to));\\n        }\\n        return x;\\n    }\\n\\n    /***************************************\\n               Precise Arithmetic\\n    ****************************************/\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the full scale\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *         scale unit\\n     */\\n    function mulTruncate(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulTruncateScale(x, y, FULL_SCALE);\\n    }\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the given scale. For example,\\n     * when calculating 90% of 10e18, (10e18 * 9e17) / 1e18 = (9e36) / 1e18 = 9e18\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @param scale Scale unit\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *         scale unit\\n     */\\n    function mulTruncateScale(\\n        uint256 x,\\n        uint256 y,\\n        uint256 scale\\n    ) internal pure returns (uint256) {\\n        // e.g. assume scale = fullScale\\n        // z = 10e18 * 9e17 = 9e36\\n        uint256 z = x.mul(y);\\n        // return 9e36 / 1e18 = 9e18\\n        return z.div(scale);\\n    }\\n\\n    /**\\n     * @dev Multiplies two precise units, and then truncates by the full scale, rounding up the result\\n     * @param x Left hand input to multiplication\\n     * @param y Right hand input to multiplication\\n     * @return Result after multiplying the two inputs and then dividing by the shared\\n     *          scale unit, rounded up to the closest base unit.\\n     */\\n    function mulTruncateCeil(uint256 x, uint256 y)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // e.g. 8e17 * 17268172638 = 138145381104e17\\n        uint256 scaled = x.mul(y);\\n        // e.g. 138145381104e17 + 9.99...e17 = 138145381113.99...e17\\n        uint256 ceil = scaled.add(FULL_SCALE.sub(1));\\n        // e.g. 13814538111.399...e18 / 1e18 = 13814538111\\n        return ceil.div(FULL_SCALE);\\n    }\\n\\n    /**\\n     * @dev Precisely divides two units, by first scaling the left hand operand. Useful\\n     *      for finding percentage weightings, i.e. 8e18/10e18 = 80% (or 8e17)\\n     * @param x Left hand input to division\\n     * @param y Right hand input to division\\n     * @return Result after multiplying the left operand by the scale, and\\n     *         executing the division on the right hand input.\\n     */\\n    function divPrecisely(uint256 x, uint256 y)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        // e.g. 8e18 * 1e18 = 8e36\\n        uint256 z = x.mul(FULL_SCALE);\\n        // e.g. 8e36 / 10e18 = 8e17\\n        return z.div(y);\\n    }\\n}\\n\",\"keccak256\":\"0x3dd9c475e374285f00f73351de859ed44b490f9989baee63c2d5db79b41aa9e8\",\"license\":\"agpl-3.0\"},\"contracts/vault/VaultCore.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title XUSD Vault Contract\\n * @notice The Vault contract stores assets. On a deposit, XUSD will be minted\\n           and sent to the depositor. On a withdrawal, XUSD will be burned and\\n           assets will be sent to the withdrawer. The Vault accepts deposits of\\n           interest from yield bearing strategies which will modify the supply\\n           of XUSD.\\n * @author XUSD.fi Inc\\n */\\n\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport { StableMath } from \\\"../utils/StableMath.sol\\\";\\nimport { IOracle } from \\\"../interfaces/IOracle.sol\\\";\\nimport { IVault } from \\\"../interfaces/IVault.sol\\\";\\nimport { IBuyback } from \\\"../interfaces/IBuyback.sol\\\";\\nimport \\\"./VaultStorage.sol\\\";\\n\\ncontract VaultCore is VaultStorage {\\n    using SafeERC20 for IERC20;\\n    using StableMath for uint256;\\n    using SafeMath for uint256;\\n\\n    uint256 constant MAX_UINT =\\n        0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n\\n    /**\\n     * @dev Verifies that the rebasing is not paused.\\n     */\\n    modifier whenNotRebasePaused() {\\n        require(!rebasePaused, \\\"Rebasing paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Verifies that the deposits are not paused.\\n     */\\n    modifier whenNotCapitalPaused() {\\n        require(!capitalPaused, \\\"Capital paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Deposit a supported asset and mint XUSD.\\n     * @param _asset Address of the asset being deposited\\n     * @param _amount Amount of the asset being deposited\\n     * @param _minimumXusdAmount Minimum XUSD to mint\\n     */\\n    function mint(\\n        address _asset,\\n        uint256 _amount,\\n        uint256 _minimumXusdAmount\\n    ) external whenNotCapitalPaused nonReentrant {\\n        require(assets[_asset].isSupported, \\\"Asset is not supported\\\");\\n        require(_amount > 0, \\\"Amount must be greater than 0\\\");\\n\\n        uint256 price = IOracle(priceProvider).price(_asset);\\n        if (price > 1e8) {\\n            price = 1e8;\\n        }\\n        uint256 assetDecimals = Helpers.getDecimals(_asset);\\n        // Scale up to 18 decimal\\n        uint256 unitAdjustedDeposit = _amount.scaleBy(18, assetDecimals);\\n        uint256 priceAdjustedDeposit = _amount.mulTruncateScale(\\n            price.scaleBy(18, 8), // Oracles have 8 decimal precision\\n            10**assetDecimals\\n        );\\n\\n        if (_minimumXusdAmount > 0) {\\n            require(\\n                priceAdjustedDeposit >= _minimumXusdAmount,\\n                \\\"Mint amount lower than minimum\\\"\\n            );\\n        }\\n\\n        emit Mint(msg.sender, priceAdjustedDeposit);\\n\\n        // Rebase must happen before any transfers occur.\\n        if (unitAdjustedDeposit >= rebaseThreshold && !rebasePaused) {\\n            _rebase();\\n        }\\n\\n        // Mint matching XUSD\\n        xUSD.mint(msg.sender, priceAdjustedDeposit);\\n\\n        // Transfer the deposited coins to the vault\\n        IERC20 asset = IERC20(_asset);\\n        asset.safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        if (unitAdjustedDeposit >= autoAllocateThreshold) {\\n            _allocate();\\n        }\\n    }\\n\\n    // In memoriam\\n\\n    /**\\n     * @dev Withdraw a supported asset and burn XUSD.\\n     * @param _amount Amount of XUSD to burn\\n     * @param _minimumUnitAmount Minimum stablecoin units to receive in return\\n     */\\n    function redeem(uint256 _amount, uint256 _minimumUnitAmount)\\n        external\\n        whenNotCapitalPaused\\n        nonReentrant\\n    {\\n        _redeem(_amount, _minimumUnitAmount);\\n    }\\n\\n    /**\\n     * @dev Withdraw a supported asset and burn XUSD.\\n     * @param _amount Amount of XUSD to burn\\n     * @param _minimumUnitAmount Minimum stablecoin units to receive in return\\n     */\\n    function _redeem(uint256 _amount, uint256 _minimumUnitAmount) internal {\\n        require(_amount > 0, \\\"Amount must be greater than 0\\\");\\n\\n        // Calculate redemption outputs\\n        (\\n            uint256[] memory outputs,\\n            uint256 _backingValue\\n        ) = _calculateRedeemOutputs(_amount);\\n\\n        // Check that XUSD is backed by enough assets\\n        uint256 _totalSupply = xUSD.totalSupply();\\n        if (maxSupplyDiff > 0) {\\n            // Allow a max difference of maxSupplyDiff% between\\n            // backing assets value and XUSD total supply\\n            uint256 diff = _totalSupply.divPrecisely(_backingValue);\\n            require(\\n                (diff > 1e18 ? diff.sub(1e18) : uint256(1e18).sub(diff)) <=\\n                    maxSupplyDiff,\\n                \\\"Backing supply liquidity error\\\"\\n            );\\n        }\\n\\n        emit Redeem(msg.sender, _amount);\\n\\n        // Send outputs\\n        for (uint256 i = 0; i < allAssets.length; i++) {\\n            if (outputs[i] == 0) continue;\\n\\n            IERC20 asset = IERC20(allAssets[i]);\\n\\n            if (asset.balanceOf(address(this)) >= outputs[i]) {\\n                // Use Vault funds first if sufficient\\n                asset.safeTransfer(msg.sender, outputs[i]);\\n            } else {\\n                address strategyAddr = assetDefaultStrategies[allAssets[i]];\\n                if (strategyAddr != address(0)) {\\n                    // Nothing in Vault, but something in Strategy, send from there\\n                    IStrategy strategy = IStrategy(strategyAddr);\\n                    strategy.withdraw(msg.sender, allAssets[i], outputs[i]);\\n                } else {\\n                    // Cant find funds anywhere\\n                    revert(\\\"Liquidity error\\\");\\n                }\\n            }\\n        }\\n\\n        if (_minimumUnitAmount > 0) {\\n            uint256 unitTotal = 0;\\n            for (uint256 i = 0; i < outputs.length; i++) {\\n                uint256 assetDecimals = Helpers.getDecimals(allAssets[i]);\\n                unitTotal = unitTotal.add(\\n                    outputs[i].scaleBy(18, assetDecimals)\\n                );\\n            }\\n            require(\\n                unitTotal >= _minimumUnitAmount,\\n                \\\"Redeem amount lower than minimum\\\"\\n            );\\n        }\\n\\n        xUSD.burn(msg.sender, _amount);\\n\\n        // Until we can prove that we won't affect the prices of our assets\\n        // by withdrawing them, this should be here.\\n        // It's possible that a strategy was off on its asset total, perhaps\\n        // a reward token sold for more or for less than anticipated.\\n        if (_amount > rebaseThreshold && !rebasePaused) {\\n            _rebase();\\n        }\\n    }\\n\\n    /**\\n     * @notice Withdraw a supported asset and burn all XUSD.\\n     * @param _minimumUnitAmount Minimum stablecoin units to receive in return\\n     */\\n    function redeemAll(uint256 _minimumUnitAmount)\\n        external\\n        whenNotCapitalPaused\\n        nonReentrant\\n    {\\n        _redeem(xUSD.balanceOf(msg.sender), _minimumUnitAmount);\\n    }\\n\\n    /**\\n     * @notice Allocate unallocated funds on Vault to strategies.\\n     * @dev Allocate unallocated funds on Vault to strategies.\\n     **/\\n    function allocate() external whenNotCapitalPaused nonReentrant {\\n        _allocate();\\n    }\\n\\n    /**\\n     * @notice Allocate unallocated funds on Vault to strategies.\\n     * @dev Allocate unallocated funds on Vault to strategies.\\n     **/\\n    function _allocate() internal {\\n        // Harvest for all reward tokens above reward liquidation threshold.\\n        // Harvesting is the first action that takes place so we have an up to\\n        // date picture of total assets before allocating to strategies.\\n        for (uint256 i = 0; i < allStrategies.length; i++) {\\n            IStrategy strategy = IStrategy(allStrategies[i]);\\n            address rewardTokenAddress = strategy.rewardTokenAddress();\\n            if (rewardTokenAddress != address(0)) {\\n                uint256 liquidationThreshold = strategy\\n                    .rewardLiquidationThreshold();\\n                if (liquidationThreshold == 0) {\\n                    // No threshold set, always harvest from strategy\\n                    IVault(address(this)).harvestAndSwap(allStrategies[i]);\\n                } else {\\n                    // Check balance against liquidation threshold\\n                    // Note some strategies don't hold the reward token balance\\n                    // on their contract so the liquidation threshold should be\\n                    // set to 0\\n                    IERC20 rewardToken = IERC20(rewardTokenAddress);\\n                    uint256 rewardTokenAmount = rewardToken.balanceOf(\\n                        allStrategies[i]\\n                    );\\n                    if (rewardTokenAmount >= liquidationThreshold) {\\n                        IVault(address(this)).harvestAndSwap(allStrategies[i]);\\n                    }\\n                }\\n            }\\n        }\\n\\n        uint256 vaultValue = _totalValueInVault();\\n        // Nothing in vault to allocate\\n        if (vaultValue == 0) return;\\n        uint256 strategiesValue = _totalValueInStrategies();\\n        // We have a method that does the same as this, gas optimisation\\n        uint256 calculatedTotalValue = vaultValue.add(strategiesValue);\\n\\n        // We want to maintain a buffer on the Vault so calculate a percentage\\n        // modifier to multiply each amount being allocated by to enforce the\\n        // vault buffer\\n        uint256 vaultBufferModifier;\\n        if (strategiesValue == 0) {\\n            // Nothing in Strategies, allocate 100% minus the vault buffer to\\n            // strategies\\n            vaultBufferModifier = uint256(1e18).sub(vaultBuffer);\\n        } else {\\n            vaultBufferModifier = vaultBuffer.mul(calculatedTotalValue).div(\\n                vaultValue\\n            );\\n            if (1e18 > vaultBufferModifier) {\\n                // E.g. 1e18 - (1e17 * 10e18)/5e18 = 8e17\\n                // (5e18 * 8e17) / 1e18 = 4e18 allocated from Vault\\n                vaultBufferModifier = uint256(1e18).sub(vaultBufferModifier);\\n            } else {\\n                // We need to let the buffer fill\\n                return;\\n            }\\n        }\\n        if (vaultBufferModifier == 0) return;\\n\\n        // Iterate over all assets in the Vault and allocate to the appropriate\\n        // strategy\\n        for (uint256 i = 0; i < allAssets.length; i++) {\\n            IERC20 asset = IERC20(allAssets[i]);\\n            uint256 assetBalance = asset.balanceOf(address(this));\\n            // No balance, nothing to do here\\n            if (assetBalance == 0) continue;\\n\\n            // Multiply the balance by the vault buffer modifier and truncate\\n            // to the scale of the asset decimals\\n            uint256 allocateAmount = assetBalance.mulTruncate(\\n                vaultBufferModifier\\n            );\\n\\n            address depositStrategyAddr = assetDefaultStrategies[\\n                address(asset)\\n            ];\\n\\n            if (depositStrategyAddr != address(0) && allocateAmount > 0) {\\n                IStrategy strategy = IStrategy(depositStrategyAddr);\\n                // Transfer asset to Strategy and call deposit method to\\n                // mint or take required action\\n                asset.safeTransfer(address(strategy), allocateAmount);\\n                strategy.deposit(address(asset), allocateAmount);\\n                emit AssetAllocated(\\n                    address(asset),\\n                    depositStrategyAddr,\\n                    allocateAmount\\n                );\\n            }\\n        }\\n\\n        // Trigger OGN Buyback\\n        address _trusteeAddress = trusteeAddress; // gas savings\\n        if (_trusteeAddress != address(0)) {\\n            IBuyback(trusteeAddress).swap();\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculate the total value of assets held by the Vault and all\\n     *      strategies and update the supply of XUSD.\\n     */\\n    function rebase() external virtual nonReentrant {\\n        _rebase();\\n    }\\n\\n    /**\\n     * @dev Calculate the total value of assets held by the Vault and all\\n     *      strategies and update the supply of XUSD, optionally sending a\\n     *      portion of the yield to the trustee.\\n     */\\n    function _rebase() internal whenNotRebasePaused {\\n        uint256 xusdSupply = xUSD.totalSupply();\\n        if (xusdSupply == 0) {\\n            return;\\n        }\\n        uint256 vaultValue = _totalValue();\\n\\n        // Yield fee collection\\n        address _trusteeAddress = trusteeAddress; // gas savings\\n        if (_trusteeAddress != address(0) && (vaultValue > xusdSupply)) {\\n            uint256 yield = vaultValue.sub(xusdSupply);\\n            uint256 fee = yield.mul(trusteeFeeBps).div(10000);\\n            require(yield > fee, \\\"Fee must not be greater than yield\\\");\\n            if (fee > 0) {\\n                xUSD.mint(_trusteeAddress, fee);\\n            }\\n            emit YieldDistribution(_trusteeAddress, yield, fee);\\n        }\\n\\n        // Only rachet XUSD supply upwards\\n        xusdSupply = xUSD.totalSupply(); // Final check should use latest value\\n        if (vaultValue > xusdSupply) {\\n            xUSD.changeSupply(vaultValue);\\n        }\\n    }\\n\\n    /**\\n     * @dev Determine the total value of assets held by the vault and its\\n     *         strategies.\\n     * @return value Total value in USD (1e18)\\n     */\\n    function totalValue() external view virtual returns (uint256 value) {\\n        value = _totalValue();\\n    }\\n\\n    /**\\n     * @dev Internal Calculate the total value of the assets held by the\\n     *         vault and its strategies.\\n     * @return value Total value in USD (1e18)\\n     */\\n    function _totalValue() internal view virtual returns (uint256 value) {\\n        return _totalValueInVault().add(_totalValueInStrategies());\\n    }\\n\\n    /**\\n     * @dev Internal to calculate total value of all assets held in Vault.\\n     * @return value Total value in ETH (1e18)\\n     */\\n    function _totalValueInVault() internal view returns (uint256 value) {\\n        for (uint256 y = 0; y < allAssets.length; y++) {\\n            IERC20 asset = IERC20(allAssets[y]);\\n            uint256 assetDecimals = Helpers.getDecimals(allAssets[y]);\\n            uint256 balance = asset.balanceOf(address(this));\\n            if (balance > 0) {\\n                value = value.add(balance.scaleBy(18, assetDecimals));\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal to calculate total value of all assets held in Strategies.\\n     * @return value Total value in ETH (1e18)\\n     */\\n    function _totalValueInStrategies() internal view returns (uint256 value) {\\n        for (uint256 i = 0; i < allStrategies.length; i++) {\\n            value = value.add(_totalValueInStrategy(allStrategies[i]));\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal to calculate total value of all assets held by strategy.\\n     * @param _strategyAddr Address of the strategy\\n     * @return value Total value in ETH (1e18)\\n     */\\n    function _totalValueInStrategy(address _strategyAddr)\\n        internal\\n        view\\n        returns (uint256 value)\\n    {\\n        IStrategy strategy = IStrategy(_strategyAddr);\\n        for (uint256 y = 0; y < allAssets.length; y++) {\\n            uint256 assetDecimals = Helpers.getDecimals(allAssets[y]);\\n            if (strategy.supportsAsset(allAssets[y])) {\\n                uint256 balance = strategy.checkBalance(allAssets[y]);\\n                if (balance > 0) {\\n                    value = value.add(balance.scaleBy(18, assetDecimals));\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Get the balance of an asset held in Vault and all strategies.\\n     * @param _asset Address of asset\\n     * @return uint256 Balance of asset in decimals of asset\\n     */\\n    function checkBalance(address _asset) external view returns (uint256) {\\n        return _checkBalance(_asset);\\n    }\\n\\n    /**\\n     * @notice Get the balance of an asset held in Vault and all strategies.\\n     * @param _asset Address of asset\\n     * @return balance Balance of asset in decimals of asset\\n     */\\n    function _checkBalance(address _asset)\\n        internal\\n        view\\n        virtual\\n        returns (uint256 balance)\\n    {\\n        IERC20 asset = IERC20(_asset);\\n        balance = asset.balanceOf(address(this));\\n        for (uint256 i = 0; i < allStrategies.length; i++) {\\n            IStrategy strategy = IStrategy(allStrategies[i]);\\n            if (strategy.supportsAsset(_asset)) {\\n                balance = balance.add(strategy.checkBalance(_asset));\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Get the balance of all assets held in Vault and all strategies.\\n     * @return balance Balance of all assets (1e18)\\n     */\\n    function _checkBalance() internal view returns (uint256 balance) {\\n        for (uint256 i = 0; i < allAssets.length; i++) {\\n            uint256 assetDecimals = Helpers.getDecimals(allAssets[i]);\\n            balance = balance.add(\\n                _checkBalance(allAssets[i]).scaleBy(18, assetDecimals)\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate the outputs for a redeem function, i.e. the mix of\\n     * coins that will be returned\\n     */\\n    function calculateRedeemOutputs(uint256 _amount)\\n        external\\n        view\\n        returns (uint256[] memory)\\n    {\\n        (uint256[] memory outputs, ) = _calculateRedeemOutputs(_amount);\\n        return outputs;\\n    }\\n\\n    /**\\n     * @notice Calculate the outputs for a redeem function, i.e. the mix of\\n     * coins that will be returned.\\n     * @return outputs Array of amounts respective to the supported assets\\n     * @return totalBalance Total balance of Vault\\n     */\\n    function _calculateRedeemOutputs(uint256 _amount)\\n        internal\\n        view\\n        returns (uint256[] memory outputs, uint256 totalBalance)\\n    {\\n        // We always give out coins in proportion to how many we have,\\n        // Now if all coins were the same value, this math would easy,\\n        // just take the percentage of each coin, and multiply by the\\n        // value to be given out. But if coins are worth more than $1,\\n        // then we would end up handing out too many coins. We need to\\n        // adjust by the total value of coins.\\n        //\\n        // To do this, we total up the value of our coins, by their\\n        // percentages. Then divide what we would otherwise give out by\\n        // this number.\\n        //\\n        // Let say we have 100 DAI at $1.06  and 200 USDT at $1.00.\\n        // So for every 1 DAI we give out, we'll be handing out 2 USDT\\n        // Our total output ratio is: 33% * 1.06 + 66% * 1.00 = 1.02\\n        //\\n        // So when calculating the output, we take the percentage of\\n        // each coin, times the desired output value, divided by the\\n        // totalOutputRatio.\\n        //\\n        // For example, withdrawing: 30 XUSD:\\n        // DAI 33% * 30 / 1.02 = 9.80 DAI\\n        // USDT = 66 % * 30 / 1.02 = 19.60 USDT\\n        //\\n        // Checking these numbers:\\n        // 9.80 DAI * 1.06 = $10.40\\n        // 19.60 USDT * 1.00 = $19.60\\n        //\\n        // And so the user gets $10.40 + $19.60 = $30 worth of value.\\n\\n        uint256 assetCount = getAssetCount();\\n        uint256[] memory assetPrices = _getAssetPrices();\\n        uint256[] memory assetBalances = new uint256[](assetCount);\\n        uint256[] memory assetDecimals = new uint256[](assetCount);\\n        uint256 totalOutputRatio = 0;\\n        outputs = new uint256[](assetCount);\\n\\n        // Calculate redeem fee\\n        if (redeemFeeBps > 0) {\\n            uint256 redeemFee = _amount.mul(redeemFeeBps).div(10000);\\n            _amount = _amount.sub(redeemFee);\\n        }\\n\\n        // Calculate assets balances and decimals once,\\n        // for a large gas savings.\\n        for (uint256 i = 0; i < allAssets.length; i++) {\\n            uint256 balance = _checkBalance(allAssets[i]);\\n            uint256 decimals = Helpers.getDecimals(allAssets[i]);\\n            assetBalances[i] = balance;\\n            assetDecimals[i] = decimals;\\n            totalBalance = totalBalance.add(balance.scaleBy(18, decimals));\\n        }\\n        // Calculate totalOutputRatio\\n        for (uint256 i = 0; i < allAssets.length; i++) {\\n            uint256 price = assetPrices[i];\\n            // Never give out more than one\\n            // stablecoin per dollar of XUSD\\n            if (price < 1e18) {\\n                price = 1e18;\\n            }\\n            uint256 ratio = assetBalances[i]\\n                .scaleBy(18, assetDecimals[i])\\n                .mul(price)\\n                .div(totalBalance);\\n            totalOutputRatio = totalOutputRatio.add(ratio);\\n        }\\n        // Calculate final outputs\\n        uint256 factor = _amount.divPrecisely(totalOutputRatio);\\n        for (uint256 i = 0; i < allAssets.length; i++) {\\n            outputs[i] = assetBalances[i].mul(factor).div(totalBalance);\\n        }\\n    }\\n\\n    /**\\n     * @notice Get an array of the supported asset prices in USD.\\n     * @return assetPrices Array of asset prices in USD (1e18)\\n     */\\n    function _getAssetPrices()\\n        internal\\n        view\\n        returns (uint256[] memory assetPrices)\\n    {\\n        assetPrices = new uint256[](getAssetCount());\\n\\n        IOracle oracle = IOracle(priceProvider);\\n        // Price from Oracle is returned with 8 decimals\\n        // _amount is in assetDecimals\\n        for (uint256 i = 0; i < allAssets.length; i++) {\\n            assetPrices[i] = oracle.price(allAssets[i]).scaleBy(18, 8);\\n        }\\n    }\\n\\n    /***************************************\\n                    Utils\\n    ****************************************/\\n\\n    /**\\n     * @dev Return the number of assets supported by the Vault.\\n     */\\n    function getAssetCount() public view returns (uint256) {\\n        return allAssets.length;\\n    }\\n\\n    /**\\n     * @dev Return all asset addresses in order\\n     */\\n    function getAllAssets() external view returns (address[] memory) {\\n        return allAssets;\\n    }\\n\\n    /**\\n     * @dev Return the number of strategies active on the Vault.\\n     */\\n    function getStrategyCount() external view returns (uint256) {\\n        return allStrategies.length;\\n    }\\n\\n    function isSupportedAsset(address _asset) external view returns (bool) {\\n        return assets[_asset].isSupported;\\n    }\\n\\n    /**\\n     * @dev Falldown to the admin implementation\\n     * @notice This is a catch all for all functions not declared in core\\n     */\\n    fallback() external payable {\\n        bytes32 slot = adminImplPosition;\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(\\n                gas(),\\n                sload(slot),\\n                0,\\n                calldatasize(),\\n                0,\\n                0\\n            )\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb56e9aa542e3911b91fc20c08b59bb510855127d7b311255dbe3a70694e1a060\",\"license\":\"agpl-3.0\"},\"contracts/vault/VaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title XUSD VaultStorage Contract\\n * @notice The VaultStorage contract defines the storage for the Vault contracts\\n * @author XUSD.fi Inc\\n */\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport { IStrategy } from \\\"../interfaces/IStrategy.sol\\\";\\nimport { Governable } from \\\"../governance/Governable.sol\\\";\\nimport { XUSD } from \\\"../token/XUSD.sol\\\";\\nimport { Initializable } from \\\"../utils/Initializable.sol\\\";\\nimport \\\"../utils/Helpers.sol\\\";\\nimport { StableMath } from \\\"../utils/StableMath.sol\\\";\\n\\ncontract VaultStorage is Initializable, Governable {\\n    using SafeMath for uint256;\\n    using StableMath for uint256;\\n    using SafeMath for int256;\\n    using SafeERC20 for IERC20;\\n\\n    event AssetSupported(address _asset);\\n    event AssetDefaultStrategyUpdated(address _asset, address _strategy);\\n    event AssetAllocated(address _asset, address _strategy, uint256 _amount);\\n    event StrategyApproved(address _addr);\\n    event StrategyRemoved(address _addr);\\n    event Mint(address _addr, uint256 _value);\\n    event Redeem(address _addr, uint256 _value);\\n    event CapitalPaused();\\n    event CapitalUnpaused();\\n    event RebasePaused();\\n    event RebaseUnpaused();\\n    event VaultBufferUpdated(uint256 _vaultBuffer);\\n    event RedeemFeeUpdated(uint256 _redeemFeeBps);\\n    event PriceProviderUpdated(address _priceProvider);\\n    event AllocateThresholdUpdated(uint256 _threshold);\\n    event RebaseThresholdUpdated(uint256 _threshold);\\n    event UniswapUpdated(address _address);\\n    event StrategistUpdated(address _address);\\n    event MaxSupplyDiffChanged(uint256 maxSupplyDiff);\\n    event YieldDistribution(address _to, uint256 _yield, uint256 _fee);\\n    event TrusteeFeeBpsChanged(uint256 _basis);\\n    event TrusteeAddressChanged(address _address);\\n    event SwapTokenAdded(address _address);\\n    event SwapTokenRemoved(address _address);\\n\\n    // Assets supported by the Vault, i.e. Stablecoins\\n    struct Asset {\\n        bool isSupported;\\n    }\\n    mapping(address => Asset) internal assets;\\n    address[] internal allAssets;\\n\\n    // Strategies approved for use by the Vault\\n    struct Strategy {\\n        bool isSupported;\\n        uint256 _deprecated; // Deprecated storage slot\\n    }\\n    mapping(address => Strategy) internal strategies;\\n    address[] internal allStrategies;\\n\\n    // Address of the Oracle price provider contract\\n    address public priceProvider;\\n    // Pausing bools\\n    bool public rebasePaused = false;\\n    bool public capitalPaused = true;\\n    // Redemption fee in basis points\\n    uint256 public redeemFeeBps;\\n    // Buffer of assets to keep in Vault to handle (most) withdrawals\\n    uint256 public vaultBuffer;\\n    // Mints over this amount automatically allocate funds. 18 decimals.\\n    uint256 public autoAllocateThreshold;\\n    // Mints over this amount automatically rebase. 18 decimals.\\n    uint256 public rebaseThreshold;\\n\\n    XUSD internal xUSD;\\n\\n    //keccak256(\\\"XUSD.vault.governor.admin.impl\\\");\\n    bytes32 constant adminImplPosition =\\n        0x10465603890dc6628fbe448d5030103026f8b8fd67cf4837783af8b8dde720a3;\\n\\n    // Address of the contract responsible for post rebase syncs with AMMs\\n    address private _deprecated_rebaseHooksAddr = address(0);\\n\\n    // Address of Uniswap\\n    address public uniswapAddr = address(0);\\n\\n    // Address of the Strategist\\n    address public strategistAddr = address(0);\\n\\n    // Mapping of asset address to the Strategy that they should automatically\\n    // be allocated to\\n    mapping(address => address) public assetDefaultStrategies;\\n\\n    uint256 public maxSupplyDiff;\\n\\n    // Trustee contract that can collect a percentage of yield\\n    address public trusteeAddress;\\n\\n    // Amount of yield collected in basis points\\n    uint256 public trusteeFeeBps;\\n\\n    // Tokens that should be swapped for stablecoins\\n    address[] public swapTokens;\\n\\n    /**\\n     * @dev set the implementation for the admin, this needs to be in a base class else we cannot set it\\n     * @param newImpl address of the implementation\\n     */\\n    function setAdminImpl(address newImpl) external onlyGovernor {\\n        require(\\n            Address.isContract(newImpl),\\n            \\\"new implementation is not a contract\\\"\\n        );\\n        bytes32 position = adminImplPosition;\\n        assembly {\\n            sstore(position, newImpl)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd893e23ecbb00a8686657f1fb49e4a4ec3706edb9395d580fc59de8087df98bf\",\"license\":\"agpl-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040526037805461ffff60a01b1916600160a81b179055603d80546001600160a01b0319908116909155603e805482169055603f8054909116905534801561004857600080fd5b5061006033600080516020620031eb83398151915255565b600080516020620031eb833981519152546040516001600160a01b03909116906000907fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a908290a361313380620000b86000396000f3fe6080604052600436106101d85760003560e01c80637136a7a611610102578063af14052c11610095578063d4c3eea011610064578063d4c3eea014610571578063e6cc543214610586578063fc0cfeee146105a7578063fe784eaa146105c7576101d8565b8063af14052c14610507578063b888879e1461051c578063c7af33521461053c578063d38bfff414610551576101d8565b80639fa1826e116100d15780639fa1826e14610491578063a0aead4d146104a7578063a403e4d5146104bc578063abaa9916146104f2576101d8565b80637136a7a6146104025780637cbc2373146104225780638e510b52146104425780639be918e614610458576101d8565b806331e19cfa1161017a578063570d8e1d11610149578063570d8e1d146103805780635d36b190146103a05780635f515226146103b557806367bd7ba3146103d5576101d8565b806331e19cfa1461030457806349c1d54d1461031957806352d38e5d1461033957806353ca9f241461034f576101d8565b8063156e29f6116101b6578063156e29f6146102945780631edfe3da146102b6578063207134b0146102cc5780632acada4d146102e2576101d8565b806309f6442c1461021e5780630c340a2414610247578063128a8b0514610274575b7f10465603890dc6628fbe448d5030103026f8b8fd67cf4837783af8b8dde720a3366000803760008036600084545af43d6000803e808015610219573d6000f35b3d6000fd5b34801561022a57600080fd5b5061023460385481565b6040519081526020015b60405180910390f35b34801561025357600080fd5b5061025c6105e7565b6040516001600160a01b03909116815260200161023e565b34801561028057600080fd5b50603e5461025c906001600160a01b031681565b3480156102a057600080fd5b506102b46102af366004612cd2565b610604565b005b3480156102c257600080fd5b5061023460395481565b3480156102d857600080fd5b5061023460435481565b3480156102ee57600080fd5b506102f761094a565b60405161023e9190612dbc565b34801561031057600080fd5b50603654610234565b34801561032557600080fd5b5060425461025c906001600160a01b031681565b34801561034557600080fd5b50610234603b5481565b34801561035b57600080fd5b5060375461037090600160a01b900460ff1681565b604051901515815260200161023e565b34801561038c57600080fd5b50603f5461025c906001600160a01b031681565b3480156103ac57600080fd5b506102b46109ac565b3480156103c157600080fd5b506102346103d0366004612c98565b610a52565b3480156103e157600080fd5b506103f56103f0366004612d29565b610a63565b60405161023e9190612e09565b34801561040e57600080fd5b506102b461041d366004612d29565b610a78565b34801561042e57600080fd5b506102b461043d366004612d5b565b610b63565b34801561044e57600080fd5b5061023460415481565b34801561046457600080fd5b50610370610473366004612c98565b6001600160a01b031660009081526033602052604090205460ff1690565b34801561049d57600080fd5b50610234603a5481565b3480156104b357600080fd5b50603454610234565b3480156104c857600080fd5b5061025c6104d7366004612c98565b6040602081905260009182529020546001600160a01b031681565b3480156104fe57600080fd5b506102b4610bd6565b34801561051357600080fd5b506102b4610c45565b34801561052857600080fd5b5060375461025c906001600160a01b031681565b34801561054857600080fd5b50610370610c83565b34801561055d57600080fd5b506102b461056c366004612c98565b610cb4565b34801561057d57600080fd5b50610234610d88565b34801561059257600080fd5b5060375461037090600160a81b900460ff1681565b3480156105b357600080fd5b506102b46105c2366004612c98565b610d92565b3480156105d357600080fd5b5061025c6105e2366004612d29565b610e64565b60006105ff6000805160206130de8339815191525490565b905090565b603754600160a81b900460ff16156106375760405162461bcd60e51b815260040161062e90612e74565b60405180910390fd5b6000805160206130be833981519152805460028114156106695760405162461bcd60e51b815260040161062e90612e9c565b600282556001600160a01b03851660009081526033602052604090205460ff166106ce5760405162461bcd60e51b8152602060048201526016602482015275105cdcd95d081a5cc81b9bdd081cdd5c1c1bdc9d195960521b604482015260640161062e565b6000841161071e5760405162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206d7573742062652067726561746572207468616e2030000000604482015260640161062e565b6037546040516315d5220f60e31b81526001600160a01b038781166004830152600092169063aea910789060240160206040518083038186803b15801561076457600080fd5b505afa158015610778573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079c9190612d42565b90506305f5e1008111156107b157506305f5e1005b60006107bc87610e8e565b905060006107cc87601284610f77565b905060006107f36107e08560126008610f77565b6107eb85600a612f41565b8a9190610fdb565b9050861561084b578681101561084b5760405162461bcd60e51b815260206004820152601e60248201527f4d696e7420616d6f756e74206c6f776572207468616e206d696e696d756d0000604482015260640161062e565b60408051338152602081018390527f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885910160405180910390a1603b5482101580156108a05750603754600160a01b900460ff16155b156108ad576108ad610ffd565b603c546040516340c10f1960e01b8152336004820152602481018390526001600160a01b03909116906340c10f1990604401600060405180830381600087803b1580156108f957600080fd5b505af115801561090d573d6000803e3d6000fd5b508b92506109299150506001600160a01b03821633308c611337565b603a54831061093a5761093a6113a8565b5050505050600182555050505050565b606060348054806020026020016040519081016040528092919081815260200182805480156109a257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610984575b5050505050905090565b7f1973cae3d8695cb4c31dce9679edb790944900898ecc70570ba365e7de143b0a546001600160a01b0316336001600160a01b031614610a475760405162461bcd60e51b815260206004820152603060248201527f4f6e6c79207468652070656e64696e6720476f7665726e6f722063616e20636f60448201526f6d706c6574652074686520636c61696d60801b606482015260840161062e565b610a50336119ab565b565b6000610a5d82611a6f565b92915050565b60606000610a7083611c3f565b509392505050565b603754600160a81b900460ff1615610aa25760405162461bcd60e51b815260040161062e90612e74565b6000805160206130be83398151915280546002811415610ad45760405162461bcd60e51b815260040161062e90612e9c565b60028255603c546040516370a0823160e01b8152336004820152610b5b916001600160a01b0316906370a082319060240160206040518083038186803b158015610b1d57600080fd5b505afa158015610b31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b559190612d42565b84611f8e565b506001905550565b603754600160a81b900460ff1615610b8d5760405162461bcd60e51b815260040161062e90612e74565b6000805160206130be83398151915280546002811415610bbf5760405162461bcd60e51b815260040161062e90612e9c565b60028255610bcd8484611f8e565b50600190555050565b603754600160a81b900460ff1615610c005760405162461bcd60e51b815260040161062e90612e74565b6000805160206130be83398151915280546002811415610c325760405162461bcd60e51b815260040161062e90612e9c565b60028255610c3e6113a8565b5060019055565b6000805160206130be83398151915280546002811415610c775760405162461bcd60e51b815260040161062e90612e9c565b60028255610c3e610ffd565b6000610c9b6000805160206130de8339815191525490565b6001600160a01b0316336001600160a01b031614905090565b610cbc610c83565b610d085760405162461bcd60e51b815260206004820152601a60248201527f43616c6c6572206973206e6f742074686520476f7665726e6f72000000000000604482015260640161062e565b610d30817f1973cae3d8695cb4c31dce9679edb790944900898ecc70570ba365e7de143b0a55565b806001600160a01b0316610d506000805160206130de8339815191525490565b6001600160a01b03167fa39cc5eb22d0f34d8beaefee8a3f17cc229c1a1d1ef87a5ad47313487b1c4f0d60405160405180910390a350565b60006105ff61253d565b610d9a610c83565b610de65760405162461bcd60e51b815260206004820152601a60248201527f43616c6c6572206973206e6f742074686520476f7665726e6f72000000000000604482015260640161062e565b803b610e405760405162461bcd60e51b8152602060048201526024808201527f6e657720696d706c656d656e746174696f6e206973206e6f74206120636f6e746044820152631c9858dd60e21b606482015260840161062e565b7f10465603890dc6628fbe448d5030103026f8b8fd67cf4837783af8b8dde720a355565b60448181548110610e7457600080fd5b6000918252602090912001546001600160a01b0316905081565b600080826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610eca57600080fd5b505afa158015610ede573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f029190612d7d565b60ff16905060048110158015610f19575060128111155b610a5d5760405162461bcd60e51b815260206004820152602960248201527f546f6b656e206d75737420686176652073756666696369656e7420646563696d604482015268616c20706c6163657360b81b606482015260840161062e565b600081831115610fa757610fa0610f8e8385613008565b610f9990600a612f41565b8590612558565b9350610fd1565b81831015610fd157610fce610fbc8484613008565b610fc790600a612f41565b8590612564565b93505b50825b9392505050565b600080610fe88585612558565b9050610ff48184612564565b95945050505050565b603754600160a01b900460ff16156110495760405162461bcd60e51b815260206004820152600f60248201526e149958985cda5b99c81c185d5cd959608a1b604482015260640161062e565b603c54604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b15801561108e57600080fd5b505afa1580156110a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110c69190612d42565b9050806110d05750565b60006110da61253d565b6042549091506001600160a01b031680158015906110f757508282115b156112435760006111088385612570565b9050600061112d6127106111276043548561255890919063ffffffff16565b90612564565b90508082116111895760405162461bcd60e51b815260206004820152602260248201527f466565206d757374206e6f742062652067726561746572207468616e207969656044820152611b1960f21b606482015260840161062e565b80156111f657603c546040516340c10f1960e01b81526001600160a01b03858116600483015260248201849052909116906340c10f1990604401600060405180830381600087803b1580156111dd57600080fd5b505af11580156111f1573d6000803e3d6000fd5b505050505b604080516001600160a01b0385168152602081018490529081018290527f09516ecf4a8a86e59780a9befc6dee948bc9e60a36e3be68d31ea817ee8d2c809060600160405180910390a150505b603c60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561129157600080fd5b505afa1580156112a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112c99190612d42565b92508282111561133257603c546040516339a7919f60e01b8152600481018490526001600160a01b03909116906339a7919f90602401600060405180830381600087803b15801561131957600080fd5b505af115801561132d573d6000803e3d6000fd5b505050505b505050565b6040516001600160a01b03808516602483015283166044820152606481018290526113a29085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261257c565b50505050565b60005b6036548110156116bd576000603682815481106113ca576113ca61307c565b60009182526020808320909101546040805163125f9e3360e01b815290516001600160a01b039092169450849263125f9e3392600480840193829003018186803b15801561141757600080fd5b505afa15801561142b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061144f9190612cb5565b90506001600160a01b038116156116a8576000826001600160a01b0316635653b4146040518163ffffffff1660e01b815260040160206040518083038186803b15801561149b57600080fd5b505afa1580156114af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d39190612d42565b90508061156657306001600160a01b031663548f5ae5603686815481106114fc576114fc61307c565b60009182526020909120015460405160e083901b6001600160e01b03191681526001600160a01b039091166004820152602401600060405180830381600087803b15801561154957600080fd5b505af115801561155d573d6000803e3d6000fd5b505050506116a6565b60008290506000816001600160a01b03166370a082316036888154811061158f5761158f61307c565b60009182526020909120015460405160e083901b6001600160e01b03191681526001600160a01b03909116600482015260240160206040518083038186803b1580156115da57600080fd5b505afa1580156115ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116129190612d42565b90508281106116a357306001600160a01b031663548f5ae56036888154811061163d5761163d61307c565b60009182526020909120015460405160e083901b6001600160e01b03191681526001600160a01b039091166004820152602401600060405180830381600087803b15801561168a57600080fd5b505af115801561169e573d6000803e3d6000fd5b505050505b50505b505b505080806116b59061304b565b9150506113ab565b5060006116c861264e565b9050806116d25750565b60006116dc612759565b905060006116ea83836127b5565b90506000826117105760395461170990670de0b6b3a764000090612570565b905061174d565b611729846111278460395461255890919063ffffffff16565b905080670de0b6b3a764000011156113a257611709670de0b6b3a764000082612570565b806117585750505050565b60005b6034548110156119285760006034828154811061177a5761177a61307c565b60009182526020822001546040516370a0823160e01b81523060048201526001600160a01b03909116925082906370a082319060240160206040518083038186803b1580156117c857600080fd5b505afa1580156117dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118009190612d42565b90508061180e575050611916565b600061181a82866127c1565b6001600160a01b038085166000908152604060208190529020549192501680158015906118475750600082115b1561191157806118616001600160a01b03861682856127d6565b6040516311f9fbc960e21b81526001600160a01b038681166004830152602482018590528216906347e7ef2490604401600060405180830381600087803b1580156118ab57600080fd5b505af11580156118bf573d6000803e3d6000fd5b5050604080516001600160a01b03808a168252861660208201529081018690527f41b99659f6ba0803f444aff29e5bf6e26dd86a3219aff92119d69710a956ba8d9250606001905060405180910390a1505b505050505b806119208161304b565b91505061175b565b506042546001600160a01b031680156119a457604260009054906101000a90046001600160a01b03166001600160a01b0316638119c0656040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561198b57600080fd5b505af115801561199f573d6000803e3d6000fd5b505050505b5050505050565b6001600160a01b038116611a015760405162461bcd60e51b815260206004820152601a60248201527f4e657720476f7665726e6f722069732061646472657373283029000000000000604482015260640161062e565b806001600160a01b0316611a216000805160206130de8339815191525490565b6001600160a01b03167fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a60405160405180910390a3611a6c816000805160206130de83398151915255565b50565b6040516370a0823160e01b815230600482015260009082906001600160a01b038216906370a082319060240160206040518083038186803b158015611ab357600080fd5b505afa158015611ac7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aeb9190612d42565b915060005b603654811015611c3857600060368281548110611b0f57611b0f61307c565b60009182526020909120015460405163551c457b60e11b81526001600160a01b0387811660048301529091169150819063aa388af69060240160206040518083038186803b158015611b6057600080fd5b505afa158015611b74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b989190612d07565b15611c2557604051632fa8a91360e11b81526001600160a01b038681166004830152611c229190831690635f5152269060240160206040518083038186803b158015611be357600080fd5b505afa158015611bf7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c1b9190612d42565b85906127b5565b93505b5080611c308161304b565b915050611af0565b5050919050565b6060600080611c4d60345490565b90506000611c59612806565b905060008267ffffffffffffffff811115611c7657611c76613092565b604051908082528060200260200182016040528015611c9f578160200160208202803683370190505b50905060008367ffffffffffffffff811115611cbd57611cbd613092565b604051908082528060200260200182016040528015611ce6578160200160208202803683370190505b50905060008467ffffffffffffffff811115611d0457611d04613092565b604051908082528060200260200182016040528015611d2d578160200160208202803683370190505b5060385490975015611d66576000611d566127106111276038548c61255890919063ffffffff16565b9050611d628982612570565b9850505b60005b603454811015611e45576000611da560348381548110611d8b57611d8b61307c565b6000918252602090912001546001600160a01b0316611a6f565b90506000611dd960348481548110611dbf57611dbf61307c565b6000918252602090912001546001600160a01b0316610e8e565b905081868481518110611dee57611dee61307c565b60200260200101818152505080858481518110611e0d57611e0d61307c565b6020908102919091010152611e2e611e2783601284610f77565b8a906127b5565b985050508080611e3d9061304b565b915050611d69565b5060005b603454811015611f07576000858281518110611e6757611e6761307c565b60200260200101519050670de0b6b3a7640000811015611e8c5750670de0b6b3a76400005b6000611ee48961112784611ede60128a8981518110611ead57611ead61307c565b60200260200101518c8a81518110611ec757611ec761307c565b6020026020010151610f779092919063ffffffff16565b90612558565b9050611ef084826127b5565b935050508080611eff9061304b565b915050611e49565b506000611f148983612956565b905060005b603454811015611f8257611f538861112784888581518110611f3d57611f3d61307c565b602002602001015161255890919063ffffffff16565b898281518110611f6557611f6561307c565b602090810291909101015280611f7a8161304b565b915050611f19565b50505050505050915091565b60008211611fde5760405162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206d7573742062652067726561746572207468616e2030000000604482015260640161062e565b600080611fea84611c3f565b915091506000603c60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561203e57600080fd5b505afa158015612052573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120769190612d42565b6041549091501561211a57600061208d8284612956565b9050604154670de0b6b3a764000082116120b8576120b3670de0b6b3a764000083612570565b6120ca565b6120ca82670de0b6b3a7640000612570565b11156121185760405162461bcd60e51b815260206004820152601e60248201527f4261636b696e6720737570706c79206c6971756964697479206572726f720000604482015260640161062e565b505b60408051338152602081018790527f222838db2794d11532d940e8dec38ae307ed0b63cd97c233322e221f998767a6910160405180910390a160005b6034548110156123f8578381815181106121725761217261307c565b602002602001015160001415612187576123e6565b60006034828154811061219c5761219c61307c565b60009182526020909120015485516001600160a01b0390911691508590839081106121c9576121c961307c565b60209081029190910101516040516370a0823160e01b81523060048201526001600160a01b038316906370a082319060240160206040518083038186803b15801561221357600080fd5b505afa158015612227573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061224b9190612d42565b1061228c57612287338684815181106122665761226661307c565b6020026020010151836001600160a01b03166127d69092919063ffffffff16565b6123e4565b600060406000603485815481106122a5576122a561307c565b60009182526020808320909101546001600160a01b03908116845290830193909352604090910190205416905080156123a8576000819050806001600160a01b031663d9caed1233603487815481106123005761230061307c565b9060005260206000200160009054906101000a90046001600160a01b03168a88815181106123305761233061307c565b60209081029190910101516040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b15801561238a57600080fd5b505af115801561239e573d6000803e3d6000fd5b50505050506123e2565b60405162461bcd60e51b815260206004820152600f60248201526e2634b8bab4b234ba3c9032b93937b960891b604482015260640161062e565b505b505b806123f08161304b565b915050612156565b5083156124b1576000805b845181101561245e57600061242460348381548110611dbf57611dbf61307c565b9050612448612441601283898681518110611ec757611ec761307c565b84906127b5565b92505080806124569061304b565b915050612403565b50848110156124af5760405162461bcd60e51b815260206004820181905260248201527f52656465656d20616d6f756e74206c6f776572207468616e206d696e696d756d604482015260640161062e565b505b603c54604051632770a7eb60e21b8152336004820152602481018790526001600160a01b0390911690639dc29fac90604401600060405180830381600087803b1580156124fd57600080fd5b505af1158015612511573d6000803e3d6000fd5b50505050603b54851180156125305750603754600160a01b900460ff16155b156119a4576119a4610ffd565b60006105ff61254a612759565b61255261264e565b906127b5565b6000610fd48284612fe9565b6000610fd48284612edc565b6000610fd48284613008565b60006125d1826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661297f9092919063ffffffff16565b80519091501561133257808060200190518101906125ef9190612d07565b6113325760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161062e565b6000805b603454811015612755576000603482815481106126715761267161307c565b6000918252602082200154603480546001600160a01b0390921693506126a19185908110611dbf57611dbf61307c565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038416906370a082319060240160206040518083038186803b1580156126e657600080fd5b505afa1580156126fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061271e9190612d42565b9050801561273f5761273c61273582601285610f77565b86906127b5565b94505b505050808061274d9061304b565b915050612652565b5090565b6000805b603654811015612755576127a161279a603683815481106127805761278061307c565b6000918252602090912001546001600160a01b031661298e565b83906127b5565b9150806127ad8161304b565b91505061275d565b6000610fd48284612ec4565b6000610fd48383670de0b6b3a7640000610fdb565b6040516001600160a01b03831660248201526044810182905261133290849063a9059cbb60e01b9060640161136b565b606061281160345490565b67ffffffffffffffff81111561282957612829613092565b604051908082528060200260200182016040528015612852578160200160208202803683370190505b506037549091506001600160a01b031660005b6034548110156129515761292260126008846001600160a01b031663aea91078603486815481106128985761289861307c565b60009182526020909120015460405160e083901b6001600160e01b03191681526001600160a01b03909116600482015260240160206040518083038186803b1580156128e357600080fd5b505afa1580156128f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061291b9190612d42565b9190610f77565b8382815181106129345761293461307c565b6020908102919091010152806129498161304b565b915050612865565b505090565b60008061296b84670de0b6b3a7640000612558565b90506129778184612564565b949350505050565b60606129778484600085612b37565b600081815b603454811015611c385760006129b560348381548110611dbf57611dbf61307c565b9050826001600160a01b031663aa388af6603484815481106129d9576129d961307c565b60009182526020909120015460405160e083901b6001600160e01b03191681526001600160a01b03909116600482015260240160206040518083038186803b158015612a2457600080fd5b505afa158015612a38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a5c9190612d07565b15612b24576000836001600160a01b0316635f51522660348581548110612a8557612a8561307c565b60009182526020909120015460405160e083901b6001600160e01b03191681526001600160a01b03909116600482015260240160206040518083038186803b158015612ad057600080fd5b505afa158015612ae4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b089190612d42565b90508015612b2257612b1f61273582601285610f77565b94505b505b5080612b2f8161304b565b915050612993565b606082471015612b985760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161062e565b843b612be65760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161062e565b600080866001600160a01b03168587604051612c029190612da0565b60006040518083038185875af1925050503d8060008114612c3f576040519150601f19603f3d011682016040523d82523d6000602084013e612c44565b606091505b5091509150612c54828286612c5f565b979650505050505050565b60608315612c6e575081610fd4565b825115612c7e5782518084602001fd5b8160405162461bcd60e51b815260040161062e9190612e41565b600060208284031215612caa57600080fd5b8135610fd4816130a8565b600060208284031215612cc757600080fd5b8151610fd4816130a8565b600080600060608486031215612ce757600080fd5b8335612cf2816130a8565b95602085013595506040909401359392505050565b600060208284031215612d1957600080fd5b81518015158114610fd457600080fd5b600060208284031215612d3b57600080fd5b5035919050565b600060208284031215612d5457600080fd5b5051919050565b60008060408385031215612d6e57600080fd5b50508035926020909101359150565b600060208284031215612d8f57600080fd5b815160ff81168114610fd457600080fd5b60008251612db281846020870161301f565b9190910192915050565b6020808252825182820181905260009190848201906040850190845b81811015612dfd5783516001600160a01b031683529284019291840191600101612dd8565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b81811015612dfd57835183529284019291840191600101612e25565b6020815260008251806020840152612e6081604085016020870161301f565b601f01601f19169190910160400192915050565b6020808252600e908201526d10d85c1a5d185b081c185d5cd95960921b604082015260600190565b6020808252600e908201526d1499595b9d1c985b9d0818d85b1b60921b604082015260600190565b60008219821115612ed757612ed7613066565b500190565b600082612ef957634e487b7160e01b600052601260045260246000fd5b500490565b600181815b80851115612f39578160001904821115612f1f57612f1f613066565b80851615612f2c57918102915b93841c9390800290612f03565b509250929050565b6000610fd48383600082612f5757506001610a5d565b81612f6457506000610a5d565b8160018114612f7a5760028114612f8457612fa0565b6001915050610a5d565b60ff841115612f9557612f95613066565b50506001821b610a5d565b5060208310610133831016604e8410600b8410161715612fc3575081810a610a5d565b612fcd8383612efe565b8060001904821115612fe157612fe1613066565b029392505050565b600081600019048311821515161561300357613003613066565b500290565b60008282101561301a5761301a613066565b500390565b60005b8381101561303a578181015183820152602001613022565b838111156113a25750506000910152565b600060001982141561305f5761305f613066565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114611a6c57600080fdfe218adab1852f0bdeacb3305483cf296dbcf6abf496f646284463c8e6a43fa665fe7bb572d5723516ce4fe7a6a664f5adb38f5714efcd271411ed70a34d3ef2f7a26469706673582212203fb4a3f32216d7a390730dca992d0cb0bde9dd00318e52ba1b174d0e8003312f64736f6c63430008070033fe7bb572d5723516ce4fe7a6a664f5adb38f5714efcd271411ed70a34d3ef2f7",
  "deployedBytecode": "0x6080604052600436106101d85760003560e01c80637136a7a611610102578063af14052c11610095578063d4c3eea011610064578063d4c3eea014610571578063e6cc543214610586578063fc0cfeee146105a7578063fe784eaa146105c7576101d8565b8063af14052c14610507578063b888879e1461051c578063c7af33521461053c578063d38bfff414610551576101d8565b80639fa1826e116100d15780639fa1826e14610491578063a0aead4d146104a7578063a403e4d5146104bc578063abaa9916146104f2576101d8565b80637136a7a6146104025780637cbc2373146104225780638e510b52146104425780639be918e614610458576101d8565b806331e19cfa1161017a578063570d8e1d11610149578063570d8e1d146103805780635d36b190146103a05780635f515226146103b557806367bd7ba3146103d5576101d8565b806331e19cfa1461030457806349c1d54d1461031957806352d38e5d1461033957806353ca9f241461034f576101d8565b8063156e29f6116101b6578063156e29f6146102945780631edfe3da146102b6578063207134b0146102cc5780632acada4d146102e2576101d8565b806309f6442c1461021e5780630c340a2414610247578063128a8b0514610274575b7f10465603890dc6628fbe448d5030103026f8b8fd67cf4837783af8b8dde720a3366000803760008036600084545af43d6000803e808015610219573d6000f35b3d6000fd5b34801561022a57600080fd5b5061023460385481565b6040519081526020015b60405180910390f35b34801561025357600080fd5b5061025c6105e7565b6040516001600160a01b03909116815260200161023e565b34801561028057600080fd5b50603e5461025c906001600160a01b031681565b3480156102a057600080fd5b506102b46102af366004612cd2565b610604565b005b3480156102c257600080fd5b5061023460395481565b3480156102d857600080fd5b5061023460435481565b3480156102ee57600080fd5b506102f761094a565b60405161023e9190612dbc565b34801561031057600080fd5b50603654610234565b34801561032557600080fd5b5060425461025c906001600160a01b031681565b34801561034557600080fd5b50610234603b5481565b34801561035b57600080fd5b5060375461037090600160a01b900460ff1681565b604051901515815260200161023e565b34801561038c57600080fd5b50603f5461025c906001600160a01b031681565b3480156103ac57600080fd5b506102b46109ac565b3480156103c157600080fd5b506102346103d0366004612c98565b610a52565b3480156103e157600080fd5b506103f56103f0366004612d29565b610a63565b60405161023e9190612e09565b34801561040e57600080fd5b506102b461041d366004612d29565b610a78565b34801561042e57600080fd5b506102b461043d366004612d5b565b610b63565b34801561044e57600080fd5b5061023460415481565b34801561046457600080fd5b50610370610473366004612c98565b6001600160a01b031660009081526033602052604090205460ff1690565b34801561049d57600080fd5b50610234603a5481565b3480156104b357600080fd5b50603454610234565b3480156104c857600080fd5b5061025c6104d7366004612c98565b6040602081905260009182529020546001600160a01b031681565b3480156104fe57600080fd5b506102b4610bd6565b34801561051357600080fd5b506102b4610c45565b34801561052857600080fd5b5060375461025c906001600160a01b031681565b34801561054857600080fd5b50610370610c83565b34801561055d57600080fd5b506102b461056c366004612c98565b610cb4565b34801561057d57600080fd5b50610234610d88565b34801561059257600080fd5b5060375461037090600160a81b900460ff1681565b3480156105b357600080fd5b506102b46105c2366004612c98565b610d92565b3480156105d357600080fd5b5061025c6105e2366004612d29565b610e64565b60006105ff6000805160206130de8339815191525490565b905090565b603754600160a81b900460ff16156106375760405162461bcd60e51b815260040161062e90612e74565b60405180910390fd5b6000805160206130be833981519152805460028114156106695760405162461bcd60e51b815260040161062e90612e9c565b600282556001600160a01b03851660009081526033602052604090205460ff166106ce5760405162461bcd60e51b8152602060048201526016602482015275105cdcd95d081a5cc81b9bdd081cdd5c1c1bdc9d195960521b604482015260640161062e565b6000841161071e5760405162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206d7573742062652067726561746572207468616e2030000000604482015260640161062e565b6037546040516315d5220f60e31b81526001600160a01b038781166004830152600092169063aea910789060240160206040518083038186803b15801561076457600080fd5b505afa158015610778573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079c9190612d42565b90506305f5e1008111156107b157506305f5e1005b60006107bc87610e8e565b905060006107cc87601284610f77565b905060006107f36107e08560126008610f77565b6107eb85600a612f41565b8a9190610fdb565b9050861561084b578681101561084b5760405162461bcd60e51b815260206004820152601e60248201527f4d696e7420616d6f756e74206c6f776572207468616e206d696e696d756d0000604482015260640161062e565b60408051338152602081018390527f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885910160405180910390a1603b5482101580156108a05750603754600160a01b900460ff16155b156108ad576108ad610ffd565b603c546040516340c10f1960e01b8152336004820152602481018390526001600160a01b03909116906340c10f1990604401600060405180830381600087803b1580156108f957600080fd5b505af115801561090d573d6000803e3d6000fd5b508b92506109299150506001600160a01b03821633308c611337565b603a54831061093a5761093a6113a8565b5050505050600182555050505050565b606060348054806020026020016040519081016040528092919081815260200182805480156109a257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610984575b5050505050905090565b7f1973cae3d8695cb4c31dce9679edb790944900898ecc70570ba365e7de143b0a546001600160a01b0316336001600160a01b031614610a475760405162461bcd60e51b815260206004820152603060248201527f4f6e6c79207468652070656e64696e6720476f7665726e6f722063616e20636f60448201526f6d706c6574652074686520636c61696d60801b606482015260840161062e565b610a50336119ab565b565b6000610a5d82611a6f565b92915050565b60606000610a7083611c3f565b509392505050565b603754600160a81b900460ff1615610aa25760405162461bcd60e51b815260040161062e90612e74565b6000805160206130be83398151915280546002811415610ad45760405162461bcd60e51b815260040161062e90612e9c565b60028255603c546040516370a0823160e01b8152336004820152610b5b916001600160a01b0316906370a082319060240160206040518083038186803b158015610b1d57600080fd5b505afa158015610b31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b559190612d42565b84611f8e565b506001905550565b603754600160a81b900460ff1615610b8d5760405162461bcd60e51b815260040161062e90612e74565b6000805160206130be83398151915280546002811415610bbf5760405162461bcd60e51b815260040161062e90612e9c565b60028255610bcd8484611f8e565b50600190555050565b603754600160a81b900460ff1615610c005760405162461bcd60e51b815260040161062e90612e74565b6000805160206130be83398151915280546002811415610c325760405162461bcd60e51b815260040161062e90612e9c565b60028255610c3e6113a8565b5060019055565b6000805160206130be83398151915280546002811415610c775760405162461bcd60e51b815260040161062e90612e9c565b60028255610c3e610ffd565b6000610c9b6000805160206130de8339815191525490565b6001600160a01b0316336001600160a01b031614905090565b610cbc610c83565b610d085760405162461bcd60e51b815260206004820152601a60248201527f43616c6c6572206973206e6f742074686520476f7665726e6f72000000000000604482015260640161062e565b610d30817f1973cae3d8695cb4c31dce9679edb790944900898ecc70570ba365e7de143b0a55565b806001600160a01b0316610d506000805160206130de8339815191525490565b6001600160a01b03167fa39cc5eb22d0f34d8beaefee8a3f17cc229c1a1d1ef87a5ad47313487b1c4f0d60405160405180910390a350565b60006105ff61253d565b610d9a610c83565b610de65760405162461bcd60e51b815260206004820152601a60248201527f43616c6c6572206973206e6f742074686520476f7665726e6f72000000000000604482015260640161062e565b803b610e405760405162461bcd60e51b8152602060048201526024808201527f6e657720696d706c656d656e746174696f6e206973206e6f74206120636f6e746044820152631c9858dd60e21b606482015260840161062e565b7f10465603890dc6628fbe448d5030103026f8b8fd67cf4837783af8b8dde720a355565b60448181548110610e7457600080fd5b6000918252602090912001546001600160a01b0316905081565b600080826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610eca57600080fd5b505afa158015610ede573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f029190612d7d565b60ff16905060048110158015610f19575060128111155b610a5d5760405162461bcd60e51b815260206004820152602960248201527f546f6b656e206d75737420686176652073756666696369656e7420646563696d604482015268616c20706c6163657360b81b606482015260840161062e565b600081831115610fa757610fa0610f8e8385613008565b610f9990600a612f41565b8590612558565b9350610fd1565b81831015610fd157610fce610fbc8484613008565b610fc790600a612f41565b8590612564565b93505b50825b9392505050565b600080610fe88585612558565b9050610ff48184612564565b95945050505050565b603754600160a01b900460ff16156110495760405162461bcd60e51b815260206004820152600f60248201526e149958985cda5b99c81c185d5cd959608a1b604482015260640161062e565b603c54604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b15801561108e57600080fd5b505afa1580156110a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110c69190612d42565b9050806110d05750565b60006110da61253d565b6042549091506001600160a01b031680158015906110f757508282115b156112435760006111088385612570565b9050600061112d6127106111276043548561255890919063ffffffff16565b90612564565b90508082116111895760405162461bcd60e51b815260206004820152602260248201527f466565206d757374206e6f742062652067726561746572207468616e207969656044820152611b1960f21b606482015260840161062e565b80156111f657603c546040516340c10f1960e01b81526001600160a01b03858116600483015260248201849052909116906340c10f1990604401600060405180830381600087803b1580156111dd57600080fd5b505af11580156111f1573d6000803e3d6000fd5b505050505b604080516001600160a01b0385168152602081018490529081018290527f09516ecf4a8a86e59780a9befc6dee948bc9e60a36e3be68d31ea817ee8d2c809060600160405180910390a150505b603c60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561129157600080fd5b505afa1580156112a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112c99190612d42565b92508282111561133257603c546040516339a7919f60e01b8152600481018490526001600160a01b03909116906339a7919f90602401600060405180830381600087803b15801561131957600080fd5b505af115801561132d573d6000803e3d6000fd5b505050505b505050565b6040516001600160a01b03808516602483015283166044820152606481018290526113a29085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261257c565b50505050565b60005b6036548110156116bd576000603682815481106113ca576113ca61307c565b60009182526020808320909101546040805163125f9e3360e01b815290516001600160a01b039092169450849263125f9e3392600480840193829003018186803b15801561141757600080fd5b505afa15801561142b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061144f9190612cb5565b90506001600160a01b038116156116a8576000826001600160a01b0316635653b4146040518163ffffffff1660e01b815260040160206040518083038186803b15801561149b57600080fd5b505afa1580156114af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d39190612d42565b90508061156657306001600160a01b031663548f5ae5603686815481106114fc576114fc61307c565b60009182526020909120015460405160e083901b6001600160e01b03191681526001600160a01b039091166004820152602401600060405180830381600087803b15801561154957600080fd5b505af115801561155d573d6000803e3d6000fd5b505050506116a6565b60008290506000816001600160a01b03166370a082316036888154811061158f5761158f61307c565b60009182526020909120015460405160e083901b6001600160e01b03191681526001600160a01b03909116600482015260240160206040518083038186803b1580156115da57600080fd5b505afa1580156115ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116129190612d42565b90508281106116a357306001600160a01b031663548f5ae56036888154811061163d5761163d61307c565b60009182526020909120015460405160e083901b6001600160e01b03191681526001600160a01b039091166004820152602401600060405180830381600087803b15801561168a57600080fd5b505af115801561169e573d6000803e3d6000fd5b505050505b50505b505b505080806116b59061304b565b9150506113ab565b5060006116c861264e565b9050806116d25750565b60006116dc612759565b905060006116ea83836127b5565b90506000826117105760395461170990670de0b6b3a764000090612570565b905061174d565b611729846111278460395461255890919063ffffffff16565b905080670de0b6b3a764000011156113a257611709670de0b6b3a764000082612570565b806117585750505050565b60005b6034548110156119285760006034828154811061177a5761177a61307c565b60009182526020822001546040516370a0823160e01b81523060048201526001600160a01b03909116925082906370a082319060240160206040518083038186803b1580156117c857600080fd5b505afa1580156117dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118009190612d42565b90508061180e575050611916565b600061181a82866127c1565b6001600160a01b038085166000908152604060208190529020549192501680158015906118475750600082115b1561191157806118616001600160a01b03861682856127d6565b6040516311f9fbc960e21b81526001600160a01b038681166004830152602482018590528216906347e7ef2490604401600060405180830381600087803b1580156118ab57600080fd5b505af11580156118bf573d6000803e3d6000fd5b5050604080516001600160a01b03808a168252861660208201529081018690527f41b99659f6ba0803f444aff29e5bf6e26dd86a3219aff92119d69710a956ba8d9250606001905060405180910390a1505b505050505b806119208161304b565b91505061175b565b506042546001600160a01b031680156119a457604260009054906101000a90046001600160a01b03166001600160a01b0316638119c0656040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561198b57600080fd5b505af115801561199f573d6000803e3d6000fd5b505050505b5050505050565b6001600160a01b038116611a015760405162461bcd60e51b815260206004820152601a60248201527f4e657720476f7665726e6f722069732061646472657373283029000000000000604482015260640161062e565b806001600160a01b0316611a216000805160206130de8339815191525490565b6001600160a01b03167fc7c0c772add429241571afb3805861fb3cfa2af374534088b76cdb4325a87e9a60405160405180910390a3611a6c816000805160206130de83398151915255565b50565b6040516370a0823160e01b815230600482015260009082906001600160a01b038216906370a082319060240160206040518083038186803b158015611ab357600080fd5b505afa158015611ac7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aeb9190612d42565b915060005b603654811015611c3857600060368281548110611b0f57611b0f61307c565b60009182526020909120015460405163551c457b60e11b81526001600160a01b0387811660048301529091169150819063aa388af69060240160206040518083038186803b158015611b6057600080fd5b505afa158015611b74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b989190612d07565b15611c2557604051632fa8a91360e11b81526001600160a01b038681166004830152611c229190831690635f5152269060240160206040518083038186803b158015611be357600080fd5b505afa158015611bf7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c1b9190612d42565b85906127b5565b93505b5080611c308161304b565b915050611af0565b5050919050565b6060600080611c4d60345490565b90506000611c59612806565b905060008267ffffffffffffffff811115611c7657611c76613092565b604051908082528060200260200182016040528015611c9f578160200160208202803683370190505b50905060008367ffffffffffffffff811115611cbd57611cbd613092565b604051908082528060200260200182016040528015611ce6578160200160208202803683370190505b50905060008467ffffffffffffffff811115611d0457611d04613092565b604051908082528060200260200182016040528015611d2d578160200160208202803683370190505b5060385490975015611d66576000611d566127106111276038548c61255890919063ffffffff16565b9050611d628982612570565b9850505b60005b603454811015611e45576000611da560348381548110611d8b57611d8b61307c565b6000918252602090912001546001600160a01b0316611a6f565b90506000611dd960348481548110611dbf57611dbf61307c565b6000918252602090912001546001600160a01b0316610e8e565b905081868481518110611dee57611dee61307c565b60200260200101818152505080858481518110611e0d57611e0d61307c565b6020908102919091010152611e2e611e2783601284610f77565b8a906127b5565b985050508080611e3d9061304b565b915050611d69565b5060005b603454811015611f07576000858281518110611e6757611e6761307c565b60200260200101519050670de0b6b3a7640000811015611e8c5750670de0b6b3a76400005b6000611ee48961112784611ede60128a8981518110611ead57611ead61307c565b60200260200101518c8a81518110611ec757611ec761307c565b6020026020010151610f779092919063ffffffff16565b90612558565b9050611ef084826127b5565b935050508080611eff9061304b565b915050611e49565b506000611f148983612956565b905060005b603454811015611f8257611f538861112784888581518110611f3d57611f3d61307c565b602002602001015161255890919063ffffffff16565b898281518110611f6557611f6561307c565b602090810291909101015280611f7a8161304b565b915050611f19565b50505050505050915091565b60008211611fde5760405162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206d7573742062652067726561746572207468616e2030000000604482015260640161062e565b600080611fea84611c3f565b915091506000603c60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561203e57600080fd5b505afa158015612052573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120769190612d42565b6041549091501561211a57600061208d8284612956565b9050604154670de0b6b3a764000082116120b8576120b3670de0b6b3a764000083612570565b6120ca565b6120ca82670de0b6b3a7640000612570565b11156121185760405162461bcd60e51b815260206004820152601e60248201527f4261636b696e6720737570706c79206c6971756964697479206572726f720000604482015260640161062e565b505b60408051338152602081018790527f222838db2794d11532d940e8dec38ae307ed0b63cd97c233322e221f998767a6910160405180910390a160005b6034548110156123f8578381815181106121725761217261307c565b602002602001015160001415612187576123e6565b60006034828154811061219c5761219c61307c565b60009182526020909120015485516001600160a01b0390911691508590839081106121c9576121c961307c565b60209081029190910101516040516370a0823160e01b81523060048201526001600160a01b038316906370a082319060240160206040518083038186803b15801561221357600080fd5b505afa158015612227573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061224b9190612d42565b1061228c57612287338684815181106122665761226661307c565b6020026020010151836001600160a01b03166127d69092919063ffffffff16565b6123e4565b600060406000603485815481106122a5576122a561307c565b60009182526020808320909101546001600160a01b03908116845290830193909352604090910190205416905080156123a8576000819050806001600160a01b031663d9caed1233603487815481106123005761230061307c565b9060005260206000200160009054906101000a90046001600160a01b03168a88815181106123305761233061307c565b60209081029190910101516040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401600060405180830381600087803b15801561238a57600080fd5b505af115801561239e573d6000803e3d6000fd5b50505050506123e2565b60405162461bcd60e51b815260206004820152600f60248201526e2634b8bab4b234ba3c9032b93937b960891b604482015260640161062e565b505b505b806123f08161304b565b915050612156565b5083156124b1576000805b845181101561245e57600061242460348381548110611dbf57611dbf61307c565b9050612448612441601283898681518110611ec757611ec761307c565b84906127b5565b92505080806124569061304b565b915050612403565b50848110156124af5760405162461bcd60e51b815260206004820181905260248201527f52656465656d20616d6f756e74206c6f776572207468616e206d696e696d756d604482015260640161062e565b505b603c54604051632770a7eb60e21b8152336004820152602481018790526001600160a01b0390911690639dc29fac90604401600060405180830381600087803b1580156124fd57600080fd5b505af1158015612511573d6000803e3d6000fd5b50505050603b54851180156125305750603754600160a01b900460ff16155b156119a4576119a4610ffd565b60006105ff61254a612759565b61255261264e565b906127b5565b6000610fd48284612fe9565b6000610fd48284612edc565b6000610fd48284613008565b60006125d1826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661297f9092919063ffffffff16565b80519091501561133257808060200190518101906125ef9190612d07565b6113325760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161062e565b6000805b603454811015612755576000603482815481106126715761267161307c565b6000918252602082200154603480546001600160a01b0390921693506126a19185908110611dbf57611dbf61307c565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038416906370a082319060240160206040518083038186803b1580156126e657600080fd5b505afa1580156126fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061271e9190612d42565b9050801561273f5761273c61273582601285610f77565b86906127b5565b94505b505050808061274d9061304b565b915050612652565b5090565b6000805b603654811015612755576127a161279a603683815481106127805761278061307c565b6000918252602090912001546001600160a01b031661298e565b83906127b5565b9150806127ad8161304b565b91505061275d565b6000610fd48284612ec4565b6000610fd48383670de0b6b3a7640000610fdb565b6040516001600160a01b03831660248201526044810182905261133290849063a9059cbb60e01b9060640161136b565b606061281160345490565b67ffffffffffffffff81111561282957612829613092565b604051908082528060200260200182016040528015612852578160200160208202803683370190505b506037549091506001600160a01b031660005b6034548110156129515761292260126008846001600160a01b031663aea91078603486815481106128985761289861307c565b60009182526020909120015460405160e083901b6001600160e01b03191681526001600160a01b03909116600482015260240160206040518083038186803b1580156128e357600080fd5b505afa1580156128f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061291b9190612d42565b9190610f77565b8382815181106129345761293461307c565b6020908102919091010152806129498161304b565b915050612865565b505090565b60008061296b84670de0b6b3a7640000612558565b90506129778184612564565b949350505050565b60606129778484600085612b37565b600081815b603454811015611c385760006129b560348381548110611dbf57611dbf61307c565b9050826001600160a01b031663aa388af6603484815481106129d9576129d961307c565b60009182526020909120015460405160e083901b6001600160e01b03191681526001600160a01b03909116600482015260240160206040518083038186803b158015612a2457600080fd5b505afa158015612a38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a5c9190612d07565b15612b24576000836001600160a01b0316635f51522660348581548110612a8557612a8561307c565b60009182526020909120015460405160e083901b6001600160e01b03191681526001600160a01b03909116600482015260240160206040518083038186803b158015612ad057600080fd5b505afa158015612ae4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b089190612d42565b90508015612b2257612b1f61273582601285610f77565b94505b505b5080612b2f8161304b565b915050612993565b606082471015612b985760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161062e565b843b612be65760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161062e565b600080866001600160a01b03168587604051612c029190612da0565b60006040518083038185875af1925050503d8060008114612c3f576040519150601f19603f3d011682016040523d82523d6000602084013e612c44565b606091505b5091509150612c54828286612c5f565b979650505050505050565b60608315612c6e575081610fd4565b825115612c7e5782518084602001fd5b8160405162461bcd60e51b815260040161062e9190612e41565b600060208284031215612caa57600080fd5b8135610fd4816130a8565b600060208284031215612cc757600080fd5b8151610fd4816130a8565b600080600060608486031215612ce757600080fd5b8335612cf2816130a8565b95602085013595506040909401359392505050565b600060208284031215612d1957600080fd5b81518015158114610fd457600080fd5b600060208284031215612d3b57600080fd5b5035919050565b600060208284031215612d5457600080fd5b5051919050565b60008060408385031215612d6e57600080fd5b50508035926020909101359150565b600060208284031215612d8f57600080fd5b815160ff81168114610fd457600080fd5b60008251612db281846020870161301f565b9190910192915050565b6020808252825182820181905260009190848201906040850190845b81811015612dfd5783516001600160a01b031683529284019291840191600101612dd8565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b81811015612dfd57835183529284019291840191600101612e25565b6020815260008251806020840152612e6081604085016020870161301f565b601f01601f19169190910160400192915050565b6020808252600e908201526d10d85c1a5d185b081c185d5cd95960921b604082015260600190565b6020808252600e908201526d1499595b9d1c985b9d0818d85b1b60921b604082015260600190565b60008219821115612ed757612ed7613066565b500190565b600082612ef957634e487b7160e01b600052601260045260246000fd5b500490565b600181815b80851115612f39578160001904821115612f1f57612f1f613066565b80851615612f2c57918102915b93841c9390800290612f03565b509250929050565b6000610fd48383600082612f5757506001610a5d565b81612f6457506000610a5d565b8160018114612f7a5760028114612f8457612fa0565b6001915050610a5d565b60ff841115612f9557612f95613066565b50506001821b610a5d565b5060208310610133831016604e8410600b8410161715612fc3575081810a610a5d565b612fcd8383612efe565b8060001904821115612fe157612fe1613066565b029392505050565b600081600019048311821515161561300357613003613066565b500290565b60008282101561301a5761301a613066565b500390565b60005b8381101561303a578181015183820152602001613022565b838111156113a25750506000910152565b600060001982141561305f5761305f613066565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114611a6c57600080fdfe218adab1852f0bdeacb3305483cf296dbcf6abf496f646284463c8e6a43fa665fe7bb572d5723516ce4fe7a6a664f5adb38f5714efcd271411ed70a34d3ef2f7a26469706673582212203fb4a3f32216d7a390730dca992d0cb0bde9dd00318e52ba1b174d0e8003312f64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allocate()": {
        "details": "Allocate unallocated funds on Vault to strategies.*"
      },
      "checkBalance(address)": {
        "params": {
          "_asset": "Address of asset"
        },
        "returns": {
          "_0": "uint256 Balance of asset in decimals of asset"
        }
      },
      "claimGovernance()": {
        "details": "Claim Governance of the contract to a new account (`newGovernor`). Can only be called by the new Governor."
      },
      "getAllAssets()": {
        "details": "Return all asset addresses in order"
      },
      "getAssetCount()": {
        "details": "Return the number of assets supported by the Vault."
      },
      "getStrategyCount()": {
        "details": "Return the number of strategies active on the Vault."
      },
      "governor()": {
        "details": "Returns the address of the current Governor."
      },
      "isGovernor()": {
        "details": "Returns true if the caller is the current Governor."
      },
      "mint(address,uint256,uint256)": {
        "details": "Deposit a supported asset and mint XUSD.",
        "params": {
          "_amount": "Amount of the asset being deposited",
          "_asset": "Address of the asset being deposited",
          "_minimumXusdAmount": "Minimum XUSD to mint"
        }
      },
      "rebase()": {
        "details": "Calculate the total value of assets held by the Vault and all      strategies and update the supply of XUSD."
      },
      "redeem(uint256,uint256)": {
        "details": "Withdraw a supported asset and burn XUSD.",
        "params": {
          "_amount": "Amount of XUSD to burn",
          "_minimumUnitAmount": "Minimum stablecoin units to receive in return"
        }
      },
      "redeemAll(uint256)": {
        "params": {
          "_minimumUnitAmount": "Minimum stablecoin units to receive in return"
        }
      },
      "setAdminImpl(address)": {
        "details": "set the implementation for the admin, this needs to be in a base class else we cannot set it",
        "params": {
          "newImpl": "address of the implementation"
        }
      },
      "totalValue()": {
        "details": "Determine the total value of assets held by the vault and its         strategies.",
        "returns": {
          "value": "Total value in USD (1e18)"
        }
      },
      "transferGovernance(address)": {
        "details": "Transfers Governance of the contract to a new account (`newGovernor`). Can only be called by the current Governor. Must be claimed for this to complete",
        "params": {
          "_newGovernor": "Address of the new Governor"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "allocate()": {
        "notice": "Allocate unallocated funds on Vault to strategies."
      },
      "calculateRedeemOutputs(uint256)": {
        "notice": "Calculate the outputs for a redeem function, i.e. the mix of coins that will be returned"
      },
      "checkBalance(address)": {
        "notice": "Get the balance of an asset held in Vault and all strategies."
      },
      "redeemAll(uint256)": {
        "notice": "Withdraw a supported asset and burn all XUSD."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9971,
        "contract": "contracts/vault/VaultCore.sol:VaultCore",
        "label": "initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 9974,
        "contract": "contracts/vault/VaultCore.sol:VaultCore",
        "label": "initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 10014,
        "contract": "contracts/vault/VaultCore.sol:VaultCore",
        "label": "______gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 13843,
        "contract": "contracts/vault/VaultCore.sol:VaultCore",
        "label": "assets",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_struct(Asset)13838_storage)"
      },
      {
        "astId": 13846,
        "contract": "contracts/vault/VaultCore.sol:VaultCore",
        "label": "allAssets",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 13856,
        "contract": "contracts/vault/VaultCore.sol:VaultCore",
        "label": "strategies",
        "offset": 0,
        "slot": "53",
        "type": "t_mapping(t_address,t_struct(Strategy)13851_storage)"
      },
      {
        "astId": 13859,
        "contract": "contracts/vault/VaultCore.sol:VaultCore",
        "label": "allStrategies",
        "offset": 0,
        "slot": "54",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 13861,
        "contract": "contracts/vault/VaultCore.sol:VaultCore",
        "label": "priceProvider",
        "offset": 0,
        "slot": "55",
        "type": "t_address"
      },
      {
        "astId": 13864,
        "contract": "contracts/vault/VaultCore.sol:VaultCore",
        "label": "rebasePaused",
        "offset": 20,
        "slot": "55",
        "type": "t_bool"
      },
      {
        "astId": 13867,
        "contract": "contracts/vault/VaultCore.sol:VaultCore",
        "label": "capitalPaused",
        "offset": 21,
        "slot": "55",
        "type": "t_bool"
      },
      {
        "astId": 13869,
        "contract": "contracts/vault/VaultCore.sol:VaultCore",
        "label": "redeemFeeBps",
        "offset": 0,
        "slot": "56",
        "type": "t_uint256"
      },
      {
        "astId": 13871,
        "contract": "contracts/vault/VaultCore.sol:VaultCore",
        "label": "vaultBuffer",
        "offset": 0,
        "slot": "57",
        "type": "t_uint256"
      },
      {
        "astId": 13873,
        "contract": "contracts/vault/VaultCore.sol:VaultCore",
        "label": "autoAllocateThreshold",
        "offset": 0,
        "slot": "58",
        "type": "t_uint256"
      },
      {
        "astId": 13875,
        "contract": "contracts/vault/VaultCore.sol:VaultCore",
        "label": "rebaseThreshold",
        "offset": 0,
        "slot": "59",
        "type": "t_uint256"
      },
      {
        "astId": 13878,
        "contract": "contracts/vault/VaultCore.sol:VaultCore",
        "label": "xUSD",
        "offset": 0,
        "slot": "60",
        "type": "t_contract(XUSD)9912"
      },
      {
        "astId": 13887,
        "contract": "contracts/vault/VaultCore.sol:VaultCore",
        "label": "_deprecated_rebaseHooksAddr",
        "offset": 0,
        "slot": "61",
        "type": "t_address"
      },
      {
        "astId": 13893,
        "contract": "contracts/vault/VaultCore.sol:VaultCore",
        "label": "uniswapAddr",
        "offset": 0,
        "slot": "62",
        "type": "t_address"
      },
      {
        "astId": 13899,
        "contract": "contracts/vault/VaultCore.sol:VaultCore",
        "label": "strategistAddr",
        "offset": 0,
        "slot": "63",
        "type": "t_address"
      },
      {
        "astId": 13903,
        "contract": "contracts/vault/VaultCore.sol:VaultCore",
        "label": "assetDefaultStrategies",
        "offset": 0,
        "slot": "64",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 13905,
        "contract": "contracts/vault/VaultCore.sol:VaultCore",
        "label": "maxSupplyDiff",
        "offset": 0,
        "slot": "65",
        "type": "t_uint256"
      },
      {
        "astId": 13907,
        "contract": "contracts/vault/VaultCore.sol:VaultCore",
        "label": "trusteeAddress",
        "offset": 0,
        "slot": "66",
        "type": "t_address"
      },
      {
        "astId": 13909,
        "contract": "contracts/vault/VaultCore.sol:VaultCore",
        "label": "trusteeFeeBps",
        "offset": 0,
        "slot": "67",
        "type": "t_uint256"
      },
      {
        "astId": 13912,
        "contract": "contracts/vault/VaultCore.sol:VaultCore",
        "label": "swapTokens",
        "offset": 0,
        "slot": "68",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(XUSD)9912": {
        "encoding": "inplace",
        "label": "contract XUSD",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_struct(Asset)13838_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct VaultStorage.Asset)",
        "numberOfBytes": "32",
        "value": "t_struct(Asset)13838_storage"
      },
      "t_mapping(t_address,t_struct(Strategy)13851_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct VaultStorage.Strategy)",
        "numberOfBytes": "32",
        "value": "t_struct(Strategy)13851_storage"
      },
      "t_struct(Asset)13838_storage": {
        "encoding": "inplace",
        "label": "struct VaultStorage.Asset",
        "members": [
          {
            "astId": 13837,
            "contract": "contracts/vault/VaultCore.sol:VaultCore",
            "label": "isSupported",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Strategy)13851_storage": {
        "encoding": "inplace",
        "label": "struct VaultStorage.Strategy",
        "members": [
          {
            "astId": 13848,
            "contract": "contracts/vault/VaultCore.sol:VaultCore",
            "label": "isSupported",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 13850,
            "contract": "contracts/vault/VaultCore.sol:VaultCore",
            "label": "_deprecated",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}